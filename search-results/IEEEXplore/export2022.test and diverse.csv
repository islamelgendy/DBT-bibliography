"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Configuration management strategy for distributed and diverse software development environments","U. V. Gumaste; Ti-Chung R. Hsueh; A. A. Nocera; Yiu Kwan Wo","AT&T Bell Labs., Holmdel, NJ, USA; NA; NA; NA","Proceedings of the IEEE International Conference on Industrial Technology (ICIT'96)","6 Aug 2002","1996","","","42","46","This paper intends to provide an overview of management of software development environments having multiple operating systems and hardware platforms. The paper addresses issues related to system integration as well as independence while fulfilling the need of a seamless software development environment. The article examines the elements necessary to provide efficient software development, integration and test environments that supports distributed execution of software programs across different hardware platforms. The issues related to dissimilar operating systems and hardware platforms are also presented. Requirements for initial and future configuration management needs of such dissimilar environments are discussed.","","0-7803-3104-4","10.1109/ICIT.1996.601537","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=601537","","Environmental management;Software development management;Programming;Hardware;Computer architecture;Software performance;Operating systems;Software testing;Productivity;Technology management","configuration management;distributed processing;programming environments","configuration management strategy;distributed software development environments;diverse software development environments;software development environment management;multiple operating systems;hardware platforms;seamless software development environment;software integration environment;software test environment;distributed execution","","","1","3","","6 Aug 2002","","","IEEE","IEEE Conferences"
"Sensitivity of Two Coverage-Based Software Reliability Models to Variations in the Operational Profile","O. J. da Silva; A. N. Crespo; M. L. Chaim; M. Jino","Ospra Software, Campinas, Brazil; Renato Archer-CTI, Centro de Tecnol. da Informacao, Campinas, Brazil; Univ. of Sao Paulo-USP, SÃ£o Paulo, Brazil; Univ. of Campinas - UNICAMP, Campinas, Brazil","2010 Fourth International Conference on Secure Software Integration and Reliability Improvement","8 Jul 2010","2010","","","113","120","Software in field use may be utilized by users with diverse profiles. The way software is used affects the reliability perceived by its users, that is, software reliability may not be the same for different operational profiles. Two software reliability growth models based on structural testing coverage were evaluated with respect to their sensitivity to variations in operational profile. An experiment was performed on a real program (SPACE) with real defects, submitted to three distinct operational profiles. Distinction among the operational profiles was assessed by applying the Kolmogorov-Smirnov test. Testing coverage was measured according to the following criteria: all-nodes, all-arcs, all-uses, and all-potential-uses. Reliability measured for each operational profile was compared to the reliabilities estimated by the two models, estimated reliabilities were obtained using the coverage for the four criteria. Results from the experiment show that the predictive ability of the two models is not affected by variations in the operational profile of the program.","","978-1-4244-7434-9","10.1109/SSIRI.2010.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5502848","software reliability;operational profile;software test;test coverage;testing criteria","Software reliability;Software testing;Production;Robustness;Predictive models;Software measurement;Application software","program testing;software reliability","coverage based software reliability model;structural testing coverage;Kolmogorov-Smirnov test;operational profiles;software reliability growth models","","4","","25","","8 Jul 2010","","","IEEE","IEEE Conferences"
"Automated Tests for Mobile Games: An Experience Report","G. Lovreto; A. T. Endo; P. Nardi; V. H. S. Durelli","Dept. of Comput., Fed. Univ. of Technol. - Parana, Cornelio Procopio, Brazil; Dept. of Comput., Fed. Univ. of Technol. - Parana, Cornelio Procopio, Brazil; Dept. of Comput., Fed. Univ. of Technol. - Parana, Cornelio Procopio, Brazil; Dept. of Comput. Sci., Fed. Univ. of Sao Joao del Rei, Sao Joao del Rei, Brazil","2018 17th Brazilian Symposium on Computer Games and Digital Entertainment (SBGames)","7 Feb 2019","2018","","","48","488","As mobile gaming is an ever-growing, competitive and profitable market, there has been an increasing demand for better quality in video game software. While manual testing is still a common practice among mobile game developers, some repetitive and error-prone tasks could benefit from test automation. For instance, test scripts that perform sanity checks of the proper functioning of a mobile game would be desirable in an ecosystem with constant hotfixes and updates, as well as a diverse set of configurations (e.g., device hardware, screensizes, and platforms). In this context, this paper reports an experience on developing automated test scripts for mobile games. To this end, we randomly selected 16 mobile games, from different genres, among the popular ones from the Google Play Store. For each game, test scripts were developed using the Appium testing framework and the OpenCV library. Based on our results, we provide an in-depth discussion on the challenges and lessons learned.","2159-6662","978-1-5386-9605-7","10.1109/SBGAMES.2018.00015","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8636923","Mobile Apps;Software Testing;Mobile Games;Video Game Software;Test Cases","Games;Testing;Land mobile radio;Python;Manuals;Task analysis","computer games;evolutionary computation;human computer interaction;interactive systems;mobile computing","computer games;mobile computing;interactive systems;evolutionary computation;human computer interaction;smart phones;virtual reality;computer simulation;ergonomics;handicapped aids","","2","","23","","7 Feb 2019","","","IEEE","IEEE Conferences"
"Domain Ontology Construction and Evaluation for the Entire Process of Software Testing","Z. Sun; C. Hu; C. Li; L. Wu","Institute of Computer Application, China Academy of Engineering Physics, Mianyang, China; Institute of Computer Application, China Academy of Engineering Physics, Mianyang, China; Institute of Computer Application, China Academy of Engineering Physics, Mianyang, China; Institute of Computer Application, China Academy of Engineering Physics, Mianyang, China","IEEE Access","18 Nov 2020","2020","8","","205374","205385","As an important part of software engineering, software testing is a knowledge-intensive work. In the process of software testing, inconsistent knowledge expression, diverse knowledge carriers, and a few experienced people have mastered most of the knowledge, which hinders the transfer and sharing of domain knowledge. Ontology is widely used in various stages of software engineering to define the semantic relationship between relevant information and knowledge. To solve the problem of knowledge silo in the process of software testing, this article forms an Entire Process Ontology on Software Testing (EPOST). EPOST covers the concepts and relationships of software testing process information, software test object information, and software defect information. The concepts and terms in the ontology are extracted from ISTQB, SWEBOK, IEEE std.829-2008 standard, and IEEE std.610.12-1990 standard. We adopt a comprehensive ontology construction method based on Dev. 101 method and Methontology method. The developed ontology is successfully evaluated by using validation and verification tests. Ontology verification uses an improved FOCA evaluation method by adding a cohesion metric. The evaluation result infers that EPOST has a high quality of ontology and good domain coverage, and achieves the purpose of ontology construction. Finally, we make a case study on the role of EPOST in software testing process. The results show that ontology-based application in the software testing process can promote the sharing and transmission of domain knowledge, and improve the testing process and testing quality.","2169-3536","","10.1109/ACCESS.2020.3037188","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9253652","Ontology construction;software testing;domain ontology;knowledge management;ontology evaluation","Ontologies;Software testing;Software;Tools;Sun;Semantics;IEEE Standards","IEEE standards;ISO standards;knowledge management;ontologies (artificial intelligence);program testing;software metrics;software quality","domain ontology construction;software engineering;knowledge-intensive work;domain knowledge;software testing process information;software test object information;software defect information;testing quality;entire process ontology on software testing;IEEE std.610.12-1990 standard;IEEE std.829-2008 standard;ISTQB;SWEBOK;EPOST;improved FOCA evaluation method;cohesion metric","","5","","38","CCBY","10 Nov 2020","","","IEEE","IEEE Journals"
"ParallelEye-CS: A New Dataset of Synthetic Images for Testing the Visual Intelligence of Intelligent Vehicles","X. Li; Y. Wang; L. Yan; K. Wang; F. Deng; F. -Y. Wang","School of Automation, Beijing Institute of Technology, Beijing, China; State Key Laboratory for Management and Control of Complex Systems, Institute of Automation, Chinese Academy of Sciences, Beijing, China; State Key Laboratory for Management and Control of Complex Systems, Institute of Automation, Chinese Academy of Sciences, Beijing, China; College of Information Science and Technology, Beijing University of Chemical Technology, Beijing, China; School of Automation, Beijing Institute of Technology, Beijing, China; State Key Laboratory for Management and Control of Complex Systems, Institute of Automation, Chinese Academy of Sciences, Beijing, China","IEEE Transactions on Vehicular Technology","21 Oct 2019","2019","68","10","9619","9631","Virtual simulation testing is becoming indispensable for the intelligence testing of intelligent vehicles. However, even the most advanced simulation software provides rather limited test conditions. In the long run, intelligent vehicles are expected to work at SAE (Society of Automotive Engineers) level 4 or level 5. Researchers should make full use of virtual simulation scenarios to test the visual intelligence algorithms of intelligent vehicles under various imaging conditions. In this paper, we create realistic artificial scenes to simulate the self-driving scenarios, and collect a dataset of synthetic images from the virtual driving scenes, named âParallelEye-CSâ. In the artificial scenes, we can flexibly change environmental conditions and automatically acquire accurate and diverse ground-truth labels. As a result, ParallelEye-CS has six ground-truth labels and includes twenty types of tests, which are divided into normal, environmental, and difficult tasks. Furthermore, we utilize ParallelEye-CS in combination with other publicly available datasets to conduct experiments for visual object detection. The experimental results indicate that: 1) object detection algorithms of intelligent vehicles can be tested under various scenario challenges; 2) mixed dataset can improve the accuracy of object detection algorithms, but domain shift is a serious issue worthy of attention.","1939-9359","","10.1109/TVT.2019.2936227","National Key R&D Program of China(grant numbers:2018YFC1704400); National Natural Science Foundation of China(grant numbers:U1811463); China Scholarship Council; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8807212","Intelligent vehicles;visual intelligence;intelligence testing;object detection;virtual simulation;synthetic images","Testing;Intelligent vehicles;Task analysis;Object detection;Automation;Roads;Visual perception","automotive engineering;object detection;traffic engineering computing;virtual reality","ParallelEye-CS;intelligent vehicles;synthetic images;virtual simulation testing;intelligence testing;advanced simulation software;test conditions;virtual simulation scenarios;visual intelligence algorithms;virtual driving scenes;SAE;society of automotive engineers;object detection algorithms","","4","","41","IEEE","20 Aug 2019","","","IEEE","IEEE Journals"
"One test case generation method for SW&HW reliability co-testing","C. Hou; Q. Wang; Z. Ren","AVIC Aero-Polytechnology Establishment, Beijing, China; AVIC Aero-Polytechnology Establishment, Beijing, China; AVIC Aero-Polytechnology Establishment, Beijing, China","The Proceedings of 2011 9th International Conference on Reliability, Maintainability and Safety","11 Aug 2011","2011","","","742","745","Today, more and more software-intensive equipments are used in weapons, and their reliability is gradually being looked closely. For these equipments, software and hardware are coupling; their reliability can't be verified separately. Design testing profile is an important work to reliability verification. Hardware test profile design method is mature relatively. Software test profile design and test case generation method is developing. Although several operation profile construction methods have been proposed, they are not fit for hardware & software (SW&HW) co-testing. This paper combines testing profile of hardware, with utilized information of mission profile and environment profile, divides operation profile into three layers and model by diverse UML diagrams. This method considers both input parameters complexity and real-time requirements. It can be used in operation profile design and test case generation of SW&HW reliability co-testing.","","978-1-61284-666-8","10.1109/ICRMS.2011.5979362","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5979362","Test Case Generation;SW&HW;Reliability Co-testing","Software;Software reliability;Unified modeling language;Hardware;Testing;Reliability engineering","program testing;program verification;software reliability;Unified Modeling Language","test case generation method;software intensive equipments;reliability verification;hardware test profile design method;profile construction methods;UML diagrams;SW&HW reliability cotesting","","1","","11","","11 Aug 2011","","","IEEE","IEEE Conferences"
"IEEE Standard Computer Dictionary: A Compilation of IEEE Standard Computer Glossaries","",,"IEEE Std 610","6 Aug 2002","1991","","","1","217","Identifies terms currently in use in the computer field. Standard definitions for thoseterms are established. Compilation of IEEE Stds IEEE Std 1084, IEEE Std 610.2, IEEE Std 610.3, IEEE Std 610.4, IEEE Std 610.5 and IEEE Std 610.12","","978-0-7381-4768-0","10.1109/IEEESTD.1991.106963","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=182763","terminology;computer;applications;glossary;definitions;dictionary;610","Terminology","glossaries","dictionary;glossary;computer field;definitions","","28","6","13","","6 Aug 2002","","","IEEE","IEEE Standards"
"IEEE Standard Glossary of Software Engineering Terminology","",,"IEEE Std 610.12-1990","6 Aug 2002","1990","","","1","84","This IEEE Standards product is part of the family on Software Engineering. This standard identifies terms currently in use in the field of Software Engineering. Standard definitions for those terms are established.","","978-0-7381-0391-4","10.1109/IEEESTD.1990.101064","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=159342","glossary;terminology;dictionary;Software engineering;Definitions","Terminology;Software engineering;Standards","glossaries;software engineering;standards","IEEE Std 610.12-1990;standard glossary;software engineering terminology","","91","25","17","","6 Aug 2002","","","IEEE","IEEE Standards"
