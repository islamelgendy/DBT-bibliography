"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Automatic generation of software test data based on hybrid particle swarm genetic algorithm","Rui Ding; Xianbin Feng; Shuping Li; Hongbin Dong","Computer department, Mudanjiang Normal University, China; Computer department, Mudanjiang Normal University, China; Computer department, Mudanjiang Normal University, China; National Science Park, Harbin Engineering University, China","2012 IEEE Symposium on Electrical & Electronics Engineering (EEESYM)","6 Aug 2012","2012","","","670","673","A hybrid particle swarm genetic algorithm is purposed to apply in software testing using case automated generations. On the basis of classical genetic algorithm, the algorithm divided the population into “families”, influencing the convergence efficiency by crossover in family, keeping the diversity of the population by crossover between families; meanwhile, enhancing the speed of convergence by the PSO crossover (commixed the thought of PSO in genetic algorithm) According to the characteristics of software testing problems, we designed the corresponding fitness function and the encoding method. The results of data experiment were given to illustrate the effectiveness of the algorithm.","","978-1-4673-2365-9","10.1109/EEESym.2012.6258748","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6258748","Genetic Algorithm;Particle Swarm Optimization;Software Testing;Case Automatically Generates","Reliability;Genetics","encoding;genetic algorithms;particle swarm optimisation;program testing","software test data automatic generation;hybrid particle swarm genetic algorithm;convergence efficiency;population diversity;PSO crossover;fitness function;encoding method","","5","","12","","6 Aug 2012","","","IEEE","IEEE Conferences"
"On the role of diversity measures for multi-objective test case selection","A. De Lucia; M. Di Penta; R. Oliveto; A. Panichella","University of Salerno, via Ponte don Melillo, Fisciano (SA), 84084, Italy; University of Sannio, Palazzo ex Poste, Via Traiano, 82100 Benevento, Italy; University of Molise, Contrada Fonte Lappone, 86090 Pesche (IS), Italy; University of Salerno, via Ponte don Melillo, Fisciano (SA), 84084, Italy","2012 7th International Workshop on Automation of Software Test (AST)","2 Jul 2012","2012","","","145","151","Test case selection has been recently formulated as multi-objective optimization problem trying to satisfy conflicting goals, such as code coverage and computational cost. This paper introduces the concept of asymmetric distance preserving, useful to improve the diversity of non-dominated solutions produced by multi-objective Pareto efficient genetic algorithms, and proposes two techniques to achieve this objective. Results of an empirical study conducted over four programs from the SIR benchmark show how the proposed technique (i) obtains non-dominated solutions having a higher diversity than the previously proposed multi-objective Pareto genetic algorithms; and (ii) improves the convergence speed of the genetic algorithms.","","978-1-4673-1822-8","10.1109/IWAST.2012.6228983","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6228983","Search-based Software Testing;Test Case Selection;Niched Genetic Algorithms;Empirical Studies","Genetic algorithms;Optimization;Minimization;Testing;Convergence;Measurement;Search problems","convergence;genetic algorithms;Pareto optimisation;program testing","diversity measure;multiobjective test case selection;multiobjective optimization problem;conflicting goal satisfaction;code coverage;computational cost;asymmetric distance preserving;multiobjective Pareto efficient genetic algorithm;SIR benchmark;nondominated solution;convergence speed;software testing","","14","","20","","2 Jul 2012","","","IEEE","IEEE Conferences"
"Using Program Data-State Diversity in Test Data Search","M. Alshraideh; L. Bottaci","The University Of Hull, UK; Dept. of Comput. Sci., Hull Univ.","Testing: Academic & Industrial Conference - Practice And Research Techniques (TAIC PART'06)","16 Oct 2006","2006","","","107","114","Search-based automatic software test data generation for structural testing depends on the instrumentation of the test goal to construct a many-valued function which is then optimised. The method encounters difficulty when the search is in a region in which the function is not able to discriminate between different candidate test cases because it returns a constant value. A typical example of this problem arises in the instrumentation of branch predicates that depend on the value of a boolean-valued (flag) variable. Existing transformation techniques can solve many cases of the problem but there are situations for which transformation techniques are inadequate. This paper presents a technique for directing the search when the function that instruments the test goal is not able to discriminate candidate test inputs. The new technique depends on introducing program data-state diversity as an additional search goal. The search is guided by a new evaluation (cost) function made up of two parts, one depends on the conventional instrumentation of the test goal, the other depends on the diversity of the data-states produced during execution of the program under test. The method is demonstrated for a number of example programs for which existing methods are inadequate.","","0-7695-2672-1","10.1109/TAIC-PART.2006.37","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1691676","","Automatic testing;Instruments;Cost function;Software testing;Computer science;Search methods;Genetic algorithms","data flow analysis;optimising compilers;program control structures;program testing;search problems","program data-state diversity;search-based automatic software test data generation;structural testing;many-valued function construction;branch predicates;Boolean-valued variable;program transformation technique","","1","","18","","16 Oct 2006","","","IEEE","IEEE Conferences"
"Improving Continuous Integration with Similarity-Based Test Case Selection","F. G. de Oliveira Neto; A. Ahmad; O. Leifler; K. Sandahl; E. Enoiu","Chalmers | Univ. of Gothenburg, Gothenburg, Sweden; Linkoping Univ., Linkoping, Sweden; Linkoping Univ., Linkoping, Sweden; Linkoping Univ., Linkoping, Sweden; Malardalen Univ., Vasteras, Sweden","2018 IEEE/ACM 13th International Workshop on Automation of Software Test (AST)","15 Nov 2018","2018","","","39","45","Automated testing is an essential component of Continuous Integration (CI) and Delivery (CD), such as scheduling automated test sessions on overnight builds. That allows stakeholders to execute entire test suites and achieve exhaustive test coverage, since running all tests is often infeasible during work hours, i.e., in parallel to development activities. On the other hand, developers also need test feedback from CI servers when pushing changes, even if not all test cases are executed. In this paper we evaluate similarity-based test case selection (SBTCS) on integration-level tests executed on continuous integration pipelines of two companies. We select test cases that maximise diversity of test coverage and reduce feedback time to developers. Our results confirm existing evidence that SBTCS is a strong candidate for test optimisation, by reducing feedback time (up to 92% faster in our case studies) while achieving full test coverage using only information from test artefacts themselves.","","978-1-4503-5743-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8536348","Similarity based test case selection;Continuous integration;Automated testing","Testing;Companies;Pipelines;Optimization;Software;Servers;Instruments","parallel processing;program testing","test feedback;similarity-based test case selection;integration-level tests;test optimisation;automated testing;continuous integration;continuous delivery;CI;CD;SBTCS","","","","21","","15 Nov 2018","","","IEEE","IEEE Conferences"
"Research on an autonomous and controllable portable universal interface test platform","Y. Xu; B. Liu; X. Wang; H. Zhang; Z. Zhang","Jiangsu Automation Research Institute,Lianyungang,Jiangsu,China; Jiangsu Automation Research Institute,Lianyungang,Jiangsu,China; Jiangsu Automation Research Institute,Lianyungang,Jiangsu,China; Jiangsu Automation Research Institute,Lianyungang,Jiangsu,China; Jiangsu Automation Research Institute,Lianyungang,Jiangsu,China","2021 3rd International Conference on Industrial Artificial Intelligence (IAI)","30 Nov 2021","2021","","","1","5","Industrial software testing including software development and debugging depends on the external input interface. The development, debugging and adaptation of interface software simulation consumes a lot of time. The process of software evaluation and self-test lack a portable general software testing equipment suitable for the industrial field, in order to greatly improve the testing efficiency, test integrity and adequacy. Therefore, it is urgent for the general interface generation platform to be transformed into high performance such as hardware, distributed, hardware interface adaptation, test task load and high real-time. In this paper, the overall design framework of portable general software test equipment is carried out, which includes the design and software development of the execution host, the software transformation of general control host and other research contents. At the same time, a portable general software testing equipment for complex industrial system software and multiple interfaces is developed. This platform can satisfy the diversity of complex industrial software system interfaces and the real-time requirements of special systems. It is expected to further promote the development of interface testing automation.","","978-1-6654-3517-8","10.1109/IAI53119.2021.9619437","Nature; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9619437","","Software testing;Debugging;Tools;Software systems;Software;Real-time systems;Hardware","program debugging;program testing;software engineering;user interfaces","interface software simulation;software evaluation;self-test;portable general software testing equipment;testing efficiency;test integrity;general interface generation platform;hardware interface adaptation;test task load;portable general software test equipment;software transformation;complex industrial software system interfaces;interface testing automation;autonomous interface test platform;controllable portable universal interface test platform;industrial software testing;external input interface;debugging;software development","","","","10","IEEE","30 Nov 2021","","","IEEE","IEEE Conferences"
"Computation of Mixed Strategy Non-dominated Nash Equilibria in Game Theory","C. A. O. Soares; L. S. Batista; F. Campelo; F. G. Guimarães","Grad. Program in Electr. Eng., Univ. Fed. de Minas Gerais Belo Horizonte, Belo Horizonte, Brazil; Dept. of Electr. Eng., Univ. Fed. de Minas Gerais, Belo Horizonte, Brazil; Dept. of Electr. Eng., Univ. Fed. de Minas Gerais, Belo Horizonte, Brazil; Dept. of Electr. Eng., Univ. Fed. de Minas Gerais, Belo Horizonte, Brazil","2013 BRICS Congress on Computational Intelligence and 11th Brazilian Congress on Computational Intelligence","17 Jul 2014","2013","","","242","247","Finding Nash equilibria has been one of the early objectives of research in game theory, and still represents a challenge to this day. We introduce a multiobjective formulation for computing Pareto-optimal sets of mixed Nash equilibria in normal form games. Computing these sets can be notably useful in decision making, because it focuses the analysis on solutions with greater outcome and hence more stable and desirable ones. While the formulation is suitable for any multiobjective optimization algorithm, we employ a method known as the cone-epsilon MOEA, due to its good convergence and diversity characteristics when solving multiobjective optimization problems. The adequacy of the proposed formulation is tested on most normal form games provided by the GAMBIT software test suite. The results show that the cone-epsilon MOEA working on the proposed formulation correctly finds the Pareto-optimal Nash equilibra in most games.","2377-0597","978-1-4799-3194-1","10.1109/BRICS-CCI-CBIC.2013.47","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6855856","Pareto;Nash;multiobjective;evolutionary algorithm","Games;Game theory;Silicon;Sociology;Statistics;Optimization;Vectors","game theory;Pareto optimisation","nondominated Nash equilibria;game theory;multiobjective formulation;Pareto-optimal sets;multiobjective optimization algorithm;cone-epsilon MOEA;diversity characteristic;GAMBIT software test suite","","","","11","","17 Jul 2014","","","IEEE","IEEE Conferences"
"Testing highly complex system of systems: An industrial case study","N. B. Ali; K. Petersen; M. V. Mäntylä","School of Computing Blekinge Institute of Technology 37179 Karlskrona. Sweden; School of Computing Blekinge Institute of Technology 37179 Karlskrona. Sweden; Department of Computer Science Lund University 22100 Lund, Sweden","Proceedings of the 2012 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement","7 Mar 2013","2012","","","211","220","Context: Systems of systems (SoS) are highly complex and are integrated on multiple levels (unit, component, system, system of systems). Many of the characteristics of SoS (such as operational and managerial independence, integration of system into system of systems, SoS comprised of complex systems) make their development and testing challenging. Contribution: This paper provides an understanding of SoS testing in large-scale industry settings with respect to challenges and how to address them. Method: The research method used is case study research. As data collection methods we used interviews, documentation, and fault slippage data. Results: We identified challenges related to SoS with respect to fault slippage, test turn-around time, and test maintainability. We also classified the testing challenges to general testing challenges, challenges amplified by SoS, and challenges that are SoS specific. Interestingly, the interviewees agreed on the challenges, even though we sampled them with diversity in mind, which meant that the number of interviews conducted was sufficient to answer our research questions. We also identified solution proposals to the challenges that were categorized under four classes of developer quality assurance, function test, testing in all levels, and requirements engineering and communication. Conclusion: We conclude that although over half of the challenges we identified can be categorized as general testing challenges still SoS systems have their unique and amplified challenges stemming from SoS characteristics. Furthermore, it was found that interviews and fault slippage data indicated that different areas in the software process should be improved, which indicates that using only one of these methods would have led to an incomplete picture of the challenges in the case company.","1949-3789","978-1-4503-1056-7","10.1145/2372251.2372290","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6475419","System of Systems;Software Test;Case Study","Testing;Interviews;Systems engineering and theory;Companies;Context;Software;Collaboration","formal specification;manufacturing data processing;program testing;quality assurance;software quality","highly complex system of system testing;SoS testing;large-scale industry settings;case study research;fault slippage;test turn-around time;test maintainability;general testing challenge;developer quality assurance;function test;requirements engineering","","3","","26","","7 Mar 2013","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering -- Vocabulary","",,"ISO/IEC/IEEE 24765:2010(E)","8 Feb 2018","2010","","","1","418","The systems and software engineering disciplines are continuing to mature while information technology advances. This International Standard was prepared to collect and standardize terminology. Its purpose is to identify terms currently in use in the field and standard definitions for these terms. It is intended to serve as a useful reference for those in the Information Technology field, and to encourage the use of systems and software engineering standards prepared by ISO and liaison organizations IEEE Computer Society and Project Management Institute (PMI). This International Standard replaces IEEE Std 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology, which was contributed by the IEEE as a source document. The approach and lexical exactitude of IEEE Std 610.12-1990 served as a model for this International Standard. Nevertheless, approximately two thirds of the definitions in this International Standard are new since IEEE Std 610.12 was last updated in 1990, a reflection of the continued evolution in the field.;ISO/IEC/IEEE 24765:2010 provides a common vocabulary applicable to all systems and software engineering work. It was prepared to collect and standardize terminology. ISO/IEC/IEEE 24765:2010 is intended to serve as a useful reference for those in the information technology field, and to encourage the use of systems and software engineering standards prepared by ISO and liaison organizations IEEE Computer Society and Project Management Institute. ISO/IEC/IEEE 24765:2010 includes references to the active source standards for each definition so that the use of the term can be further explored.","","978-0-7381-6205-8","10.1109/IEEESTD.2010.5733835","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5733835","computer;dictionary;information technology;software engineering;systems engineering;terminology;vocabulary","IEEE standards;ISO standards;IEC standards;Software engineering;Dictionaries","IEEE standards;ISO standards;software engineering","systems engineering;International Standard;information technology field;IEEE Computer Society;Project Management Institute;IEEE Std 610.12-1990;IEEE Standard Glossary of Software Engineering Terminology","","29","1","128","","8 Feb 2018","","","IEEE","IEEE Standards"
"IEEE Standard Computer Dictionary: A Compilation of IEEE Standard Computer Glossaries","",,"IEEE Std 610","6 Aug 2002","1991","","","1","217","Identifies terms currently in use in the computer field. Standard definitions for thoseterms are established. Compilation of IEEE Stds IEEE Std 1084, IEEE Std 610.2, IEEE Std 610.3, IEEE Std 610.4, IEEE Std 610.5 and IEEE Std 610.12","","978-0-7381-4768-0","10.1109/IEEESTD.1991.106963","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=182763","terminology;computer;applications;glossary;definitions;dictionary;610","Terminology","glossaries","dictionary;glossary;computer field;definitions","","28","6","13","","6 Aug 2002","","","IEEE","IEEE Standards"
"IEEE Standard Glossary of Software Engineering Terminology","",,"IEEE Std 610.12-1990","6 Aug 2002","1990","","","1","84","This IEEE Standards product is part of the family on Software Engineering. This standard identifies terms currently in use in the field of Software Engineering. Standard definitions for those terms are established.","","978-0-7381-0391-4","10.1109/IEEESTD.1990.101064","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=159342","glossary;terminology;dictionary;Software engineering;Definitions","Terminology;Software engineering;Standards","glossaries;software engineering;standards","IEEE Std 610.12-1990;standard glossary;software engineering terminology","","91","25","17","","6 Aug 2002","","","IEEE","IEEE Standards"
