@inbook{10.1145/3488392.3488397,
author = {Teran, Luciano Arruda and Silva, Alan Trindade de Almeida and Melo, Giselle Lorrane Nobre and Mota, Marcelle Pereira},
title = {Intelligent Approaches in the Software Development Process: A Systematic Literature Mapping},
year = {2021},
isbn = {9781450384896},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3488392.3488397},
abstract = { Accessibility in computing, when well applied, allows for the inclusion of users and the breaking of barriers in the interaction process. However, approaches to support accessibility validation are commonly unknown or ignored. The objective of this work is to understand accessibility issues considered in the software development process. This research has carried out an initial literature systematic mapping. The result indicates that there are gaps in the use of smart approaches to assess accessibility during the software development process.},
booktitle = {X Latin American Conference on Human Computer Interaction},
articleno = {5},
numpages = {5}
}

@inproceedings{10.1145/2591062.2591152,
author = {Mittal, Megha and Sureka, Ashish},
title = {Process Mining Software Repositories from Student Projects in an Undergraduate Software Engineering Course},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591152},
doi = {10.1145/2591062.2591152},
abstract = { An undergraduate level Software Engineering courses generally consists of a team-based semester long project and emphasizes on both technical and managerial skills. Software Engineering is a practice-oriented and applied discipline and hence there is an emphasis on hands-on development, process, usage of tools in addition to theory and basic concepts. We present an approach for mining the process data (process mining) from software repositories archiving data generated as a result of constructing software by student teams in an educational setting. We present an application of mining three software repositories: team wiki (used during requirement engineering), version control system (development and maintenance) and issue tracking system (corrective and adaptive maintenance) in the context of an undergraduate Software Engineering course. We propose visualizations, metrics and algorithms to provide an insight into practices and procedures followed during various phases of a software development life-cycle. The proposed visualizations and metrics (learning analytics) provide a multi-faceted view to the instructor serving as a feedback tool on development process and quality by students. We mine the event logs produced by software repositories and derive insights such as degree of individual contributions in a team, quality of commit messages, intensity and consistency of commit activities, bug fixing process trend and quality, component and developer entropy, process compliance and verification. We present our empirical analysis on a software repository dataset consisting of 19 teams of 5 members each and discuss challenges, limitations and recommendations. },
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {344–353},
numpages = {10},
keywords = {Learning Analytic, Mining Software Repositories, Education Data Mining, Software Engineering Education, Process Mining},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@article{10.1145/1924421.1924450,
author = {Grossman, Fred and Tappert, Charles and Bergin, Joe and Merritt, Susan M.},
title = {A Research Doctorate for Computing Professionals},
year = {2011},
issue_date = {April 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {54},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/1924421.1924450},
doi = {10.1145/1924421.1924450},
abstract = {Looking back on the first decade of the Doctor of Professional Studies in Computing---an ambitious doctoral track for people who want to do research in an industrial setting.},
journal = {Commun. ACM},
month = {apr},
pages = {133–141},
numpages = {9}
}

@inproceedings{10.1145/3350768.3352455,
author = {de Sousa, Amanda Oliveira and Bezerra, Carla I. M. and Andrade, Rossana M. C. and Filho, Jos\'{e} M. S. M.},
title = {Quality Evaluation of Self-Adaptive Systems: Challenges and Opportunities},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3350768.3352455},
doi = {10.1145/3350768.3352455},
abstract = {Self-adaptive systems (SAS) can adapt their behavior to suit user preferences or contexts, as well as monitor their performance and adjust it if necessary. In addition to adaptation operations, self-adaptive systems communicate with sensors, actuators, and other devices. Due to the complexity and dynamism of SAS, many situations can compromise the functioning of the system, such as faults in adaptations, low performance to execute tasks, and context inconsistencies. To prevent the system of these problems, it is essential to ensure high levels of quality. However, due to the peculiarities of these systems, there are still challenges to perform quality evaluations in these systems. In this sense, this paper proposes a discussion about the quality evaluation of self-adaptive systems in the last years. As a result, we identify challenges, limitations and research opportunities related to SAS quality evaluation.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {213–218},
numpages = {6},
keywords = {self-adaptive systems, quality evaluation, measurement},
location = {Salvador, Brazil},
series = {SBES 2019}
}

@inproceedings{10.1145/3236024.3264839,
author = {Sherman, Elena and Dyer, Robert},
title = {Software Engineering Collaboratories (SEClabs) and Collaboratories as a Service (CaaS)},
year = {2018},
isbn = {9781450355735},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236024.3264839},
doi = {10.1145/3236024.3264839},
abstract = {Novel research ideas require strong evaluations. Modern software engineering research evaluation typically requires a set of benchmark programs. Open source software repositories have provided a great opportunity for researchers to find such programs for use in their evaluations. Many tools/techniques have been developed to help automate the curation of open source software. There has also been encouragement for researchers to provide their research artifacts so that other researchers can easily reproduce the results. We argue that these two trends (i.e., curating open source software for research evaluation and the providing of research artifacts) drive the need for Software Engineer Collaboratories (SEClabs). We envision research communities coming together to create SEClab instances, where research artifacts can be made publicly available to other researchers. The community can then vet such artifacts and make them available as a service, thus turning the collaboratory into a Collaboratory as a Service (CaaS). If our vision is realized, the speed and transparency of research will drastically increase.},
booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {760–764},
numpages = {5},
keywords = {software as a service, collaboratory, research as a service},
location = {Lake Buena Vista, FL, USA},
series = {ESEC/FSE 2018}
}

@inproceedings{10.5555/2541917.2541921,
author = {Pieterse, Vreda},
title = {Automated Assessment of Programming Assignments},
year = {2013},
publisher = {Open Universiteit, Heerlen},
address = {Heerlen, NLD},
abstract = {This is a position paper in which I argue that massive open online programming courses can benefit by the application of automated assessment of programming assignments.I gathered success factors and identified concerns related to automatic assessment through the analysis of experiences other researchers have reported when designing and using automated assessment of programming assignments and interpret their potential applicability in the context of massive open online courses (MOOCs).In this paper I explain the design of our own assessment software and discuss our experience of using it in relation to the above-mentioned factors and concerns. My reflection on this experience can inform MOOC designers when having to make decisions regarding the use of automatic assessment of programming assignments.},
booktitle = {Proceedings of the 3rd Computer Science Education Research Conference on Computer Science Education Research},
pages = {45–56},
numpages = {12},
keywords = {automatic assessment, Assessment software, MOOC},
location = {Arnhem, Netherlands},
series = {CSERC '13}
}

@inproceedings{10.1145/2568225.2568245,
author = {M\"{a}ntyl\"{a}, Mika V. and Petersen, Kai and Lehtinen, Timo O. A. and Lassenius, Casper},
title = {Time Pressure: A Controlled Experiment of Test Case Development and Requirements Review},
year = {2014},
isbn = {9781450327565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2568225.2568245},
doi = {10.1145/2568225.2568245},
abstract = { Time pressure is prevalent in the software industry in which shorter and shorter deadlines and high customer demands lead to increasingly tight deadlines. However, the effects of time pressure have received little attention in software engineering research. We performed a controlled experiment on time pressure with 97 observations from 54 subjects. Using a two-by-two crossover design, our subjects performed requirements review and test case development tasks. We found statistically significant evidence that time pressure increases efficiency in test case development (high effect size Cohen’s d=1.279) and in requirements review (medium effect size Cohen’s d=0.650). However, we found no statistically significant evidence that time pressure would decrease effectiveness or cause adverse effects on motivation, frustration or perceived performance. We also investigated the role of knowledge but found no evidence of the mediating role of knowledge in time pressure as suggested by prior work, possibly due to our subjects. We conclude that applying moderate time pressure for limited periods could be used to increase efficiency in software engineering tasks that are well structured and straight forward. },
booktitle = {Proceedings of the 36th International Conference on Software Engineering},
pages = {83–94},
numpages = {12},
keywords = {Time pressure, Experiment, Review, Test case development},
location = {Hyderabad, India},
series = {ICSE 2014}
}

@article{10.1145/333329.333332,
author = {McInerney, Paul and Sobiesiak, Rick},
title = {The UI Design Process},
year = {2000},
issue_date = {Jan. 2000},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {1},
issn = {0736-6906},
url = {https://doi.org/10.1145/333329.333332},
doi = {10.1145/333329.333332},
abstract = {The root cause of many user interface (UI) design deficiencies is not a lack of knowledge about human-computer interaction principles nor a lack of information on user needs. Rather, many UI deficiencies arise because the UI design process is ad hoc and the design is not communicated successfully to the programmers who will implement it. Many UI designers are seeking and discovering ways to plan, manage, and document UI design work more effectively. This workshop provided an opportunity for participants to share lessons learned and obtain advice from other participants.In the weeks leading up to the workshop, participants selected the specific topics that were of prime concern to them. As a result, we narrowed the focus of the workshop to the following topics:• Division of UI design activities into stages• Division of labor and interdisciplinary collaboration• Collaborating in geographically-dispersed projects• Writing the UI specification• Defining the maturity of the UI design process.The following sections summarize the results of the workshop activities for each of these topics.},
journal = {SIGCHI Bull.},
month = {jan},
pages = {17–21},
numpages = {5}
}

@article{10.1145/272263.272273,
author = {Carreira, Jo\~{a}o and Silva, Jo\~{a}o Gabriel},
title = {Why Do Some (Weird) People Inject Faults?},
year = {1998},
issue_date = {January 1998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {1},
issn = {0163-5948},
url = {https://doi.org/10.1145/272263.272273},
doi = {10.1145/272263.272273},
journal = {SIGSOFT Softw. Eng. Notes},
month = {jan},
pages = {42–43},
numpages = {2}
}

@article{10.1145/508366.508369,
author = {Balci, Osman},
title = {A Methodology for Certification of Modeling and Simulation Applications},
year = {2001},
issue_date = {October 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {11},
number = {4},
issn = {1049-3301},
url = {https://doi.org/10.1145/508366.508369},
doi = {10.1145/508366.508369},
abstract = {Certification of modeling and simulation (M&amp;S) applications poses significant technical challenges for M&amp;S program managers, engineers, and practitioners. Certification is becoming increasingly more important as M&amp;S applications are used more and more for military training, complex system design evaluation, M&amp;S-based acquisition, problem solving, and critical decision making. Certification, a very complex process, involves the measurement and evaluation of hundreds of qualitative and quantitative elements, mandates subject matter expert evaluation, and requires the integration of different evaluations. Planning and managing such measurements and evaluations requires a unifying methodology and should not be performed in an ad hoc manner. This paper presents such a methodology. The methodology consists of the following body of methods, rules, and postulates: (a) employment of subject matter experts, (b) construction of a hierarchy of indicators, (c) relative criticality weighting of indicators using the analytic hierarchy process, (d) using a rule-based expert knowledge base with an object-oriented specification language, (e) assignment of crisp, fuzzy, and nominal scores for the indicators, (f) aggregation of indicator scores, (g) graphical representation of the indicator scores and weights, (h) hypertext certification report, and (i) interpretation of the results. The methodology can be used for certification of any kind of M&amp;S application either throughout the M&amp;S development life cycle or after the development is completed.},
journal = {ACM Trans. Model. Comput. Simul.},
month = {oct},
pages = {352–377},
numpages = {26},
keywords = {verification, evaluation, quality assessment, certification, credibility assessment, accreditation, validation}
}

@article{10.1145/859576.859577,
author = {Aslam, Javaid},
title = {Methodology for Designing a Computer Architecture},
year = {1984},
issue_date = {December 1984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {5},
issn = {0163-5964},
url = {https://doi.org/10.1145/859576.859577},
doi = {10.1145/859576.859577},
abstract = {To design a computer architecture for a class of computations (algorithms), systematically and in a top-down fashion, a general and uniform methodology should be developed. For a given class, there exists an information structure of the architecture such that efficient performance can be achieved for the given class. The methodology is used to find such an information structure and then, to define the control structure of the architecture at functional level. The control structure itself can be treated as another architecture (with a different computing environment), and therefore, again, its Information Structure and then Control Structure (at a lower level) could be found using the same methodology. This recursive application of the methodology to define and design Information Structures and Control Structures terminates when the Control Structure can be trivially 'hard-wired'. Power of the methodology will lie in its generality, i.e. it could be used to design an architecture for practically any arbitrary computing environment.},
journal = {SIGARCH Comput. Archit. News},
month = {dec},
pages = {4–11},
numpages = {8}
}

@article{10.1145/3203094.3203112,
author = {Singh, Paramvir and Farooq, Sheikh Umar and Tiwari, Saurabh and Sureka, Ashish},
title = {An Experience Report on Workshop on Emerging Software Engineering Education},
year = {2018},
issue_date = {April 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {43},
number = {2},
issn = {0163-5948},
url = {https://doi.org/10.1145/3203094.3203112},
doi = {10.1145/3203094.3203112},
journal = {SIGSOFT Softw. Eng. Notes},
month = {may},
pages = {12–23},
numpages = {12}
}

@inproceedings{10.1145/3461598.3461600,
author = {Wang, Jing and Zhao, Weidong},
title = {Automatic Test Case Generation Method Based on Improved Whale Optimization Algorithm},
year = {2021},
isbn = {9781450389679},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461598.3461600},
doi = {10.1145/3461598.3461600},
booktitle = {2021 5th International Conference on Intelligent Systems, Metaheuristics &amp; Swarm Intelligence},
pages = {7–16},
numpages = {10},
location = {Victoria, Seychelles},
series = {ISMSI 2021}
}

@article{10.1145/3485275,
author = {Watson, Cody and Cooper, Nathan and Palacio, David Nader and Moran, Kevin and Poshyvanyk, Denys},
title = {A Systematic Literature Review on the Use of Deep Learning in Software Engineering Research},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3485275},
doi = {10.1145/3485275},
abstract = {An increasingly popular set of techniques adopted by software engineering (SE) researchers to automate development tasks are those rooted in the concept of Deep Learning (DL). The popularity of such techniques largely stems from their automated feature engineering capabilities, which aid in modeling software artifacts. However, due to the rapid pace at which DL techniques have been adopted, it is difficult to distill the current successes, failures, and opportunities of the current research landscape. In an effort to bring clarity to this cross-cutting area of work, from its modern inception to the present, this article presents a systematic literature review of research at the intersection of SE &amp; DL. The review canvasses work appearing in the most prominent SE and DL conferences and journals and spans 128 papers across 23&nbsp;unique SE tasks. We center our analysis around the components of learning, a set of principles that governs the application of machine learning techniques (ML) to a given problem domain, discussing several aspects of the surveyed work at a granular level. The end result of our analysis is a research roadmap that both delineates the foundations of DL techniques applied to SE research and highlights likely areas of fertile exploration for the future.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {32},
numpages = {58},
keywords = {Deep learning, machine learning, software engineering, literature review, neural networks}
}

@inproceedings{10.5555/3103196.3103209,
author = {Font\~{a}o, Awdren and Dias-Neto, Arilo and Viana, Davi},
title = {Investigating Factors That Influence Developers' Experience in Mobile Software Ecosystems},
year = {2017},
isbn = {9781538627990},
publisher = {IEEE Press},
abstract = {Software organizations (keystones) that maintain a Mobile Software Ecosystem (MSECO) must provide and manage mechanisms to attract, engage and retain mobile application developers. In this scenario, there is the involvement of expectations, perceptions and feelings of the developer in his/her interaction with various artifacts and other developers, named, Developer Experience (DX). Studying the factors that influence DX in the context of ecosystems is important for keystones that need mechanisms to keep developers accountable for productivity, robustness, and niche creation. In this paper, we applied the Snowballing methodology and thematic analysis to an initial identification of DX influence factors in MSECO. Eleven papers were analyzed from the viewpoint of Software Ecosystems. Initially, we identified 20 influence factors related to DX. Such factors can help to understand the DX in MSECO.},
booktitle = {Proceedings of the Joint 5th International Workshop on Software Engineering for Systems-of-Systems and 11th Workshop on Distributed Software Development, Software Ecosystems and Systems-of-Systems},
pages = {55–58},
numpages = {4},
keywords = {mobile software ecosystem, developer experience, influence factors, component},
location = {Buenos Aires, Argentina},
series = {JSOS '17}
}

@inproceedings{10.1145/2600821.2600845,
author = {Rong, Guoping and Liu, Tianyu and Xie, Mingjuan and Chen, Jieyu and Ma, Cong and Shao, Dong},
title = {Processes for Embedded Systems Development: Preliminary Results from a Systematic Review},
year = {2014},
isbn = {9781450327541},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2600821.2600845},
doi = {10.1145/2600821.2600845},
abstract = { With the proliferation of embedded ubiquitous systems in all aspects of human life, the development of embedded systems has been facing more and more challenges (e.g., quality, time to market, etc.). Meanwhile, lots of software processes have been reported to be applied in Embedded Systems Development (ESD) with various advantages and disadvantages. Therefore, it’s important to portrait a big picture of the state-of-the-practice of the adoption of the software processes in ESD, which may benefit both practitioners and researchers in this area. This paper presents our investigation on this topic using systematic review that is intended to: 1) identify typical challenging factors and how software processes and practices address them; and 2) discover improvement opportunities from both academic and industrial perspectives. },
booktitle = {Proceedings of the 2014 International Conference on Software and System Process},
pages = {94–98},
numpages = {5},
keywords = {Embedded System Development, Software Process, Systematic Review},
location = {Nanjing, China},
series = {ICSSP 2014}
}

@inproceedings{10.1145/800066.801331,
author = {Collofello, James S. and Woodfield, Scott N.},
title = {A Project-Unified Software Engineering Course Sequence},
year = {1982},
isbn = {0897910672},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800066.801331},
doi = {10.1145/800066.801331},
abstract = {In this paper a sequence of software engineering courses based upon the software life cycle and integrated by a single, medium-size project will be described in detail. The courses will be presented from an educational point of view, emphasizing the topics covered as well as the logistics of teaching the courses. A comparison of these courses to other software engineering courses existing in university curricula will also be presented. The potential advantages for faculty, students, and the research community of this type of course sequence will also be enumerated.},
booktitle = {Proceedings of the Thirteenth SIGCSE Technical Symposium on Computer Science Education},
pages = {13–19},
numpages = {7},
location = {Indianapolis, Indiana, USA},
series = {SIGCSE '82}
}

@article{10.1145/953051.801331,
author = {Collofello, James S. and Woodfield, Scott N.},
title = {A Project-Unified Software Engineering Course Sequence},
year = {1982},
issue_date = {February 1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {14},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/953051.801331},
doi = {10.1145/953051.801331},
abstract = {In this paper a sequence of software engineering courses based upon the software life cycle and integrated by a single, medium-size project will be described in detail. The courses will be presented from an educational point of view, emphasizing the topics covered as well as the logistics of teaching the courses. A comparison of these courses to other software engineering courses existing in university curricula will also be presented. The potential advantages for faculty, students, and the research community of this type of course sequence will also be enumerated.},
journal = {SIGCSE Bull.},
month = {feb},
pages = {13–19},
numpages = {7}
}

@article{10.1145/1057533.1057535,
author = {Cody, W. J.},
title = {Software Basics for Computational Mathematics},
year = {1980},
issue_date = {June 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {2},
issn = {0163-5778},
url = {https://doi.org/10.1145/1057533.1057535},
doi = {10.1145/1057533.1057535},
abstract = {This article discusses problems at the software design and implementation level that transcend any particular subfield of computational mathematics, but which are important to all subfields. The discussion includes desirable attributes of numerical software that are independent of the underlying algorithms, ways in which software with these attributes exploit arithmetic characteristics of the host computer, advantages to the gathering of numerical software into thematic packages and the problems involved in such work, and challenges in testing numerical software. A nontechnical overview of the subject is followed by a technical discussion which includes suggestions for research activities within DOE.},
journal = {SIGNUM Newsl.},
month = {jun},
pages = {18–29},
numpages = {12}
}

@inproceedings{10.1109/ICSE-C.2017.117,
author = {Nakagawa, Hiroyuki and Matsui, Shori and Tsuchiya, Tatsuhiro},
title = {A Visualization of Specification Coverage Based on Document Similarity},
year = {2017},
isbn = {9781538615898},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-C.2017.117},
doi = {10.1109/ICSE-C.2017.117},
abstract = {Code coverage is a metric used to represent how much code is tested when particular test cases are executed. As is code coverage, specification coverage is expected to help us to comprehend how much specification to be implemented is tested. In this study, we propose a visualization process for specification coverage. This process finds traceability links between specifications and test cases using a similarity metric and constructs two views for visualization. We develop a prototype tool for automatically executing the process and evaluate the process in a preliminary experiment on a web application development in industry. This extended abstract explains the overview of our study and the preliminary results.},
booktitle = {Proceedings of the 39th International Conference on Software Engineering Companion},
pages = {136–138},
numpages = {3},
keywords = {traceability, testing, specification coverage, visualization},
location = {Buenos Aires, Argentina},
series = {ICSE-C '17}
}

@book{10.1145/3453538,
author = {ACM Data Science Task Force},
title = {Computing Competencies for Undergraduate Data Science Curricula},
year = {2021},
isbn = {9781450390606},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA}
}

