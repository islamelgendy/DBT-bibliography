@inproceedings{10.1145/2901790.2901851,
author = {Dong, Tao and Churchill, Elizabeth F. and Nichols, Jeffrey},
title = {Understanding the Challenges of Designing and Developing Multi-Device Experiences},
year = {2016},
isbn = {9781450340311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2901790.2901851},
doi = {10.1145/2901790.2901851},
abstract = {As the number of computing devices available to users continues to grow, personal computing increasingly involves using multiple devices together. However, support for multi-device interactions has fallen behind users' desire to leverage the diverse capabilities of the devices that surround them. In this paper, we report on an interview study of 29 designers and developers in which we investigate the barriers to creating useful, usable, and delightful multi-device experiences. We uncovered three key challenges: 1) the difficulty in designing the interactions between devices, 2) the complexity of adapting interfaces to different platform UI standards, and 3) the lack of tools and methods for testing multi-device user experiences. We discuss the technological and business factors behind these challenges and potential ways to lower the barriers they impose.},
booktitle = {Proceedings of the 2016 ACM Conference on Designing Interactive Systems},
pages = {62–72},
numpages = {11},
keywords = {cross-device interactions, multi-device experiences, developer experience, multichanneled services, interviews, design issues, crossmedia services},
location = {Brisbane, QLD, Australia},
series = {DIS '16}
}

@inproceedings{10.1145/3109453.3109474,
author = {Sakkaff, Zahmeeth and Catlett, Jennie L. and Cashman, Mikaela and Pierobon, Massimiliano and Buan, Nicole R. and Cohen, Myra B. and Kelley, Christine A.},
title = {End-to-End Molecular Communication Channels in Cell Metabolism: An Information Theoretic Study},
year = {2017},
isbn = {9781450349314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109453.3109474},
doi = {10.1145/3109453.3109474},
abstract = {The opportunity to control and fine-tune the behavior of biological cells is a fascinating possibility for many diverse disciplines, ranging from medicine and ecology, to chemical industry and space exploration. While synthetic biology is providing novel tools to reprogram cell behavior from their genetic code, many challenges need to be solved before it can become a true engineering discipline, such as reliability, safety assurance, reproducibility and stability. This paper aims to understand the limits in the controllability of the behavior of a natural (non-engineered) biological cell. In particular, the focus is on cell metabolism, and its natural regulation mechanisms, and their ability to react and change according to the chemical characteristics of the external environment. To understand the aforementioned limits of this ability, molecular communication is used to abstract biological cells into a series of channels that propagate information on the chemical composition of the extracellular environment to the cell's behavior in terms of uptake and consumption of chemical compounds, and growth rate. This provides an information-theoretic framework to analyze the upper bound limit to the capacity of these channels to propagate information, which is based on a well-known and computationally efficient metabolic simulation technique. A numerical study is performed on two human gut microbes, where the upper bound is estimated for different environmental compounds, showing there is a potential for future practical applications.},
booktitle = {Proceedings of the 4th ACM International Conference on Nanoscale Computing and Communication},
articleno = {21},
numpages = {6},
keywords = {information theory, molecular communication, cell metabolism},
location = {Washington, D.C.},
series = {NanoCom '17}
}

@inproceedings{10.1109/ICSE-SEET.2017.18,
author = {Petri, Giani and von Wangenheim, Christiane Gresse and Borgatto, Adriano Ferreti},
title = {Quality of Games for Teaching Software Engineering: An Analysis of Empirical Evidences of Digital and Non-Digital Games},
year = {2017},
isbn = {9781538626719},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-SEET.2017.18},
doi = {10.1109/ICSE-SEET.2017.18},
abstract = {Educational games have been used as an innovative instructional strategy in order to achieve learning more effectively in Software Engineering (SE) education. However, it is essential to systematically evaluate such games in order to obtain sound evidence on their benefits. And, although, several SE games have been evaluated adopting diverse research designs and measurements, so far no larger scale study across different games has been conducted. In this respect, this article presents a comprehensive analysis in order to summarize empirical evidence on the benefits of digital and non-digital games used for SE education. The analysis is based on data collected from 43 case studies that use MEEGA, the most commonly used model for educational game evaluation, evaluating 20 different SE games, involving a total population of 723 students. Our analysis indicate evidence that digital and non-digital games can yield a positive effect on the learning of SE, providing a pleasant and engaging experience to the students and motivate them. Our analysis also points out that non-digital games more easily seem to promote a more positive experience, principally in terms of fun and social interaction than the digital ones used for teaching SE. These results may guide SE instructors in the selection of educational games as instructional methods and guide game creators with respect to the development of new games.},
booktitle = {Proceedings of the 39th International Conference on Software Engineering: Software Engineering and Education Track},
pages = {150–159},
numpages = {10},
keywords = {SE game, empirical evidence, evaluation},
location = {Buenos Aires, Argentina},
series = {ICSE-SEET '17}
}

@inproceedings{10.1145/158011.158259,
author = {Ramiller, Neil C.},
title = {Computer-Aided Software Engineering: Perceptions of Technology, Work, and Management among I.S. Personnel},
year = {1993},
isbn = {0897915720},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/158011.158259},
doi = {10.1145/158011.158259},
abstract = {This paper describes a study of how users and prospective users of computer-aided software engineering technology (CASE) perceive CASE as an innovation in their work. The study focused on how information systems personnel view the interaction of the technology with their established base of knowledge and skill, their goals and aspirations in work, and the managerial and organizational environment. Five major areas of concern among I.S. personnel were identified, including:  The efficacy of CASE technology.The learning challenge posed by the new technology, and the implications of this challenge for personal control in the work situation.The potential effects of CASE on the individual's experience of work and sense of professionalismThe impact of CASE on existing policies and procedures, and management's understanding and flexibility in adapting these to fit the new conditions.The adequacy of available resources, such as training and consulting, to support the personal transition to a CASE environment.Survey respondents generally viewed the adoption of CASE in a positive light, and were especially positive on the issue of knowledge and personal control. However, respondents expressed pessimism concering policy impacts and management adaptability. Cluster analysis based on responses in the five areas of concern exposed four major groups of respondents. These arrayed themselves from “fans” or enthusiasts, who were strongly positive in their responses on all dimensions, to the “pessimists,” who on balance responded negatively on most issues. In between these expremes lay two groups, including “moderates” who gave intermediate responses on all issues, and “ management skeptics,” who expressed strongly positive views of the technology itself, their ability to learn and adapt to it, and its implications for professional outcomes, but strongly negative views on management adaptability and the organization's capability to provide transitional support. The four groups varied significantly in age, CASE experience, change agent contact, and level of internal communication; further, external orientation, as measured by exposure to trade media and by participation in professional associations, set the management skeptics apart from the other groups. The findings of the study indicate that I.S. personnel tend to hold complex and varied views of CASE, its implications for work, and the implementation process. This serves to remind managers not to think of I.S. personnel as a homogeneous group but rather as a diverse and potentially sophisticated community calling for advance leadership strategies. The study's findings suggest, further, that where resistance or dissatisfaction arises during the implementation of CASE, the problem may well rest in management competence, policies, and actions, rather than in an inherent unwillingness of the I.S. personnel to learn new practices and adopt new work routines. The association of selected antecedents with positive perceptions of CASE suggests possiblities for favorably managing the conditions of implementation.},
booktitle = {Proceedings of the 1993 Conference on Computer Personnel Research},
pages = {436–449},
numpages = {14},
location = {St Louis, Missouri, USA},
series = {SIGCPR '93}
}

@inbook{10.1145/3341105.3374004,
author = {Girardon, Gustavo and Costa, Victor and Machado, Rodrigo and Bernardino, Maicon and Legramante, Guilherme and Basso, F\'{a}bio Paulo and de Macedo Rodrigues, Elder and Neto, Anibal},
title = {Testing as a Service (TaaS): A Systematic Literature Map},
year = {2020},
isbn = {9781450368667},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341105.3374004},
abstract = {Background: The knowledge and application of tools to automate testing is essential to ensure software reliability and therefore its quality. Due to the increasing demand for quality in software projects executed in short time-scales, Testing as a Service (TaaS) appeared in the literature as contributions for cost reduction and productivity of automated tests. Aims: Once quality attributes from these contributions are not deeply discussed by the literature of the area, our goal is to investigate and identify these attributes from the TaaS platforms and providers commonly reported in the literature. Method: A protocol was formulated and executed according to the guidelines for performing systematic literature map in Software Engineering. Results: The TaaS providers and platform proposals found were classified according to the number of mentions in the literature, highlighting the most commonly mentioned and widespread. As well as the propagation and explanation of the main advantages and disadvantages reported in the literature on Testing as a Service. Conclusions: TaaS provides means for cost reduction and increase in productivity in comparison to traditional test approaches. This is a reality observed in 76 options for Test as a Service cloud platforms distributed over 52 papers. In addition, as their quality attributes, we also found eight groups of disadvantages and 21 of advantages. Thus, this systematic mapping is a valuable contribution for decision making on performance testing strategies.},
booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
pages = {1989–1996},
numpages = {8}
}

@inproceedings{10.1145/3293881.3295782,
author = {Frezza, Stephen and Daniels, Mats and Pears, Arnold and Cajander, \r{A}sa and Kann, Viggo and Kapoor, Amanpreet and McDermott, Roger and Peters, Anne-Kathrin and Sabin, Mihaela and Wallace, Charles},
title = {Modelling Competencies for Computing Education beyond 2020: A Research Based Approach to Defining Competencies in the Computing Disciplines},
year = {2018},
isbn = {9781450362238},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3293881.3295782},
doi = {10.1145/3293881.3295782},
abstract = {How might the content and outcomes of tertiary education programmes be described and analysed in order to understand how they are structured and function? To address this question we develop a framework for modelling graduate competencies linked to tertiary degree programmes in the computing disciplines. While the focus of our work is computing the framework is applicable to education more broadly.  The work presented here draws upon the pioneering curricular document for information technology (IT2017), curricular competency frameworks, other related documents such as the software engineering competency model (SWECOM), the Skills Framework for the Information Age (SFIA), current research in competency models, and elicitation workshop results from recent computing conferences.  The aim is to inform the ongoing Computing Curricula (CC2020) project, an endeavour supported by the Association for Computing Machinery (ACM) and the IEEE Computer Society. We develop the Competency Learning Framework (CoLeaF), providing an internationally relevant tool for describing competencies. We argue that this competency based approach is well suited for constructing learning environments and assists degree programme architects in dealing with the challenge of developing, describing and including competencies relevant to computer and IT professionals.  In this paper we demonstrate how the CoLeaF competency framework can be applied in practice, and though a series of case studies demonstrate its effectiveness and analytical power as a tool for describing and comparing degree programmes in the international higher education landscape.},
booktitle = {Proceedings Companion of the 23rd Annual ACM Conference on Innovation and Technology in Computer Science Education},
pages = {148–174},
numpages = {27},
keywords = {CC2020, curriculum guidelines, Computing competencies, Professional competencies},
location = {Larnaca, Cyprus},
series = {ITiCSE 2018 Companion}
}

@inproceedings{10.1145/3321707.3321831,
author = {Gabor, Thomas and Sedlmeier, Andreas and Kiermeier, Marie and Phan, Thomy and Henrich, Marcel and Pichlmair, Monika and Kempter, Bernhard and Klein, Cornel and Sauer, Horst and AG, Reiner SchmidSiemens and Wieghardt, Jan},
title = {Scenario Co-Evolution for Reinforcement Learning on a Grid World Smart Factory Domain},
year = {2019},
isbn = {9781450361118},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3321707.3321831},
doi = {10.1145/3321707.3321831},
abstract = {Adversarial learning has been established as a successful paradigm in reinforcement learning. We propose a hybrid adversarial learner where a reinforcement learning agent tries to solve a problem while an evolutionary algorithm tries to find problem instances that are hard to solve for the current expertise of the agent, causing the intelligent agent to co-evolve with a set of test instances or scenarios. We apply this setup, called scenario co-evolution, to a simulated smart factory problem that combines task scheduling with navigation of a grid world. We show that the so trained agent outperforms conventional reinforcement learning. We also show that the scenarios evolved this way can provide useful test cases for the evaluation of any (however trained) agent.},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference},
pages = {898–906},
numpages = {9},
keywords = {coevolution, adversarial learning, evolutionary algorithms, automatic test generation, reinforcement learning},
location = {Prague, Czech Republic},
series = {GECCO '19}
}

@inproceedings{10.1145/2660252.2662142,
author = {Abadi, Aharon and Dig, Danny and Tilevich, Eli},
title = {MobileDeli'14 Workshop: Welcome Message of the Chairs},
year = {2014},
isbn = {9781450332088},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2660252.2662142},
doi = {10.1145/2660252.2662142},
abstract = {Mobile application usage and development is experiencing exponential growth. According to Gartner, by 2016 more than 300 billion applications will be downloaded annually. The mobile domain presents new challenges to software engineering. Mobile platforms are rapidly changing, including diverse capabilities as GPS, sensors, and input modes. Applications must be omni-channel and work on all platforms. Activated on mobile platforms, modern applications must be elastic and scale on demand according to the hardware abilities. Applications often need to support and use third-party services. Therefore, during development, security and authorization processes for the dataflow must be applied. Bring your own device (BYOD) policies bring new security data leaks challenges. Developing such applications requires suitable practices and tools e.g., architecture techniques that relate to the complexity at hand; improved refactoring tools for hybrid applications using dynamic languages and polyglot development and applications; and testing techniques for applications that run on different devices. This workshop aims at establishing a community of researchers and practitioners to share their work and lead further research in the mobile software engineering. The workshop has several goals. First, we want to develop relationships to create a vibrant research community in the area of mobile software development. Second, we want to identify the most important research problems for mobile software development.},
booktitle = {Proceedings of the Companion Publication of the 2014 ACM SIGPLAN Conference on Systems, Programming, and Applications: Software for Humanity},
pages = {79–80},
numpages = {2},
keywords = {mobile applications, mobile applications management, mobile development},
location = {Portland, Oregon, USA},
series = {SPLASH '14}
}

@inproceedings{10.1145/2351676.2351678,
author = {Harman, Mark and Langdon, William B. and Jia, Yue and White, David R. and Arcuri, Andrea and Clark, John A.},
title = {The GISMOE Challenge: Constructing the Pareto Program Surface Using Genetic Programming to Find Better Programs (Keynote Paper)},
year = {2012},
isbn = {9781450312042},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2351676.2351678},
doi = {10.1145/2351676.2351678},
abstract = { Optimising programs for non-functional properties such as speed, size, throughput, power consumption and bandwidth can be demanding; pity the poor programmer who is asked to cater for them all at once! We set out an alternate vision for a new kind of software development environment inspired by recent results from Search Based Software Engineering (SBSE). Given an input program that satisfies the functional requirements, the proposed programming environment will automatically generate a set of candidate program implementations, all of which share functionality, but each of which differ in their non-functional trade offs. The software designer navigates this diverse Pareto surface of candidate implementations, gaining insight into the trade offs and selecting solutions for different platforms and environments, thereby stretching beyond the reach of current compiler technologies. Rather than having to focus on the details required to manage complex, inter-related and conflicting, non-functional trade offs, the designer is thus freed to explore, to understand, to control and to decide rather than to construct. },
booktitle = {Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1–14},
numpages = {14},
keywords = {Compilation, Non-functional Properties, SBSE, Pareto Surface, Genetic Programming, Search Based Optimization},
location = {Essen, Germany},
series = {ASE 2012}
}

@article{10.1145/3502771.3502778,
author = {P\'{e}raire, C\'{e}cile and Krusche, Stephan},
title = {Software Engineering Education for the Next Generation SEENG 2021 Workshop Report},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {1},
issn = {0163-5948},
url = {https://doi.org/10.1145/3502771.3502778},
doi = {10.1145/3502771.3502778},
abstract = {The 3rd International Workshop on Software Engineering Education for the Next Generation was held remotely on May 24, 2021. The workshop was an integral component of the Joint Track on Software Engineering Education and Training at the 43rd International Conference on Software Engineering. It specifically supported the general theme of "Educating the Next Generation of Software Engineers". Building on its predecessors, the workshop used a highly interactive format, structured around eight short paper presentations to generate discussion topics, an activity to select the most interesting topics, and structured breakout sessions to allow participants to discuss those topics in detail. Participants presented the results of the breakout sessions using mind maps.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {jan},
pages = {18–21},
numpages = {4}
}

@inproceedings{10.1145/2889160.2889231,
author = {Barik, Titus and DeLine, Robert and Drucker, Steven and Fisher, Danyel},
title = {The Bones of the System: A Case Study of Logging and Telemetry at Microsoft},
year = {2016},
isbn = {9781450342056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2889160.2889231},
doi = {10.1145/2889160.2889231},
abstract = {Large software organizations are transitioning to event data platforms as they culturally shift to better support data-driven decision making. This paper offers a case study at Microsoft during such a transition. Through qualitative interviews of 28 participants, and a quantitative survey of 1,823 respondents, we catalog a diverse set of activities that leverage event data sources, identify challenges in conducting these activities, and describe tensions that emerge in data-driven cultures as event data flow through these activities within the organization. We find that the use of event data span every job role in our interviews and survey, that different perspectives on event data create tensions between roles or teams, and that professionals report social and technical challenges across activities.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering Companion},
pages = {92–101},
numpages = {10},
keywords = {telemetry, boundary object, collaboration, developer tools, logging, practices},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{10.1145/3205455.3205513,
author = {Chen, Tao and Li, Miqing and Yao, Xin},
title = {On the Effects of Seeding Strategies: A Case for Search-Based Multi-Objective Service Composition},
year = {2018},
isbn = {9781450356183},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3205455.3205513},
doi = {10.1145/3205455.3205513},
abstract = {Service composition aims to search a composition plan of candidate services that produces the optimal results with respect to multiple and possibly conflicting Quality-of-Service (QoS) attributes, e.g., latency, throughput and cost. This leads to a multi-objective optimization problem for which evolutionary algorithm is a promising solution. In this paper, we investigate different ways of injecting knowledge about the problem into the Multi-Objective Evolutionary Algorithm (MOEA) by seeding. Specifically, we propose four alternative seeding strategies to strengthen the quality of the initial population for the MOEA to start working with. By using the real-world WS-DREAM dataset, we conduced experimental evaluations based on 9 different workflows of service composition problems and several metrics. The results confirm the effectiveness and efficiency of those seeding strategies. We also observed that, unlike the discoveries for other problem domains, the implication of the number of seeds on the service composition problems is minimal, for which we investigated and discussed the possible reasons.},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference},
pages = {1419–1426},
numpages = {8},
keywords = {search-based software engineering, multi-objective optimization, service composition, seeding strategy, evolutionary algorithm},
location = {Kyoto, Japan},
series = {GECCO '18}
}

@article{10.1145/3479559,
author = {Wang, April Yi and Chen, Yan and Chung, John Joon Young and Brooks, Christopher and Oney, Steve},
title = {PuzzleMe: Leveraging Peer Assessment for In-Class Programming Exercises},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {CSCW2},
url = {https://doi.org/10.1145/3479559},
doi = {10.1145/3479559},
abstract = {Peer assessment, as a form of collaborative learning, can engage students in active learning and improve their learning gains. However, current teaching platforms and programming environments provide little support to integrate peer assessment for in-class programming exercises. We identified challenges in conducting such exercises and adopting peer assessment through formative interviews with instructors of introductory programming courses. To address these challenges, we introduce PuzzleMe, a tool to help Computer Science instructors to conduct engaging in-class programming exercises. PuzzleMe leverages peer assessment to support a collaboration model where students provide timely feedback on their peers' work. We propose two assessment techniques tailored to in-class programming exercises: live peer testing and live peer code review. Live peer testing can improve students' code robustness by allowing them to create and share lightweight tests with peers. Live peer code review can improve code understanding by intelligently grouping students to maximize meaningful code reviews. A two-week deployment study revealed that PuzzleMe encourages students to write useful test cases, identify code problems, correct misunderstandings, and learn a diverse set of problem-solving approaches from peers.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = {oct},
articleno = {415},
numpages = {24},
keywords = {synchronous code sharing, peer assessment, live programming}
}

@article{10.1145/986710.986712,
author = {ACM SIGSOFT Software Engineering Notes staff},
title = {Backmatter (Abstracts and Calendar)},
year = {2004},
issue_date = {May 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/986710.986712},
doi = {10.1145/986710.986712},
journal = {SIGSOFT Softw. Eng. Notes},
month = {may},
pages = {31–37},
numpages = {7}
}

@proceedings{10.1145/2688412,
title = {MobileDeLi '14: Proceedings of the 2nd International Workshop on Mobile Development Lifecycle},
year = {2014},
isbn = {9781450321907},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {It is our great pleasure to welcome you to the proceedings of the workshop held as part of SPLASH 2014! This year's Workshop continues the tradition of allowing both graduate and undergraduate students to present their ongoing work and get productive feedback on their latest results.Workshop Overview Mobile application usage and development is experiencing exponential growth. According to Gartner, by 2016 more than 300 billion applications will be downloaded annually. The mobile domain presents new challenges to software engineering. Mobile platforms are rapidly changing, including diverse capabilities as GPS, sensors, and input modes. Applications must be omni-channel and work on all platforms. Activated on mobile platforms, modern applications must be elastic and scale on demand according to the hardware abilities. Applications often need to support and use third-party services. Therefore, during development, security and authorization processes for the dataflow must be applied. Bring your own device (BYOD) policies bring new security data leaks challenges. Developing such applications requires suitable practices and tools e.g., architecture techniques that relate to the complexity at hand; improved refactoring tools for hybrid applications using dynamic languages and polyglot development and applications; and testing techniques for applications that run on different devices.This workshop aims at establishing a community of researchers and practitioners to share their work and lead further research in the mobile software engineering. The workshop has several goals. First, we want to develop relationships to create a vibrant research community in the area of mobile software development. Second, we want to identify the most important research problems for mobile software development.Our program includes: Distinguished keynote by Dr. Daniel M. Yellin the Vice President, IBM Mobile Platform Development, and an IBM Distinguished EngineerInvited talksMarco Pistoia and Omer Trip Integrating Security, Analytics and Application Management into the Mobile Development LifecycleNikolai Tillmann Rapidly Prototyping Apps for Mobile Cloud-Connected DevicesLucas Brutschy, Pietro Ferrara and Mueller Peter. Static Analysis for Independent App DevelopersPanel: "How Mobile Affects Business Processes? : The Research Perspective"Activity: "Killer Apps for Mobile Opportunity and ChallengesResearch papersMobile software engineering presents new challenges and directions. Among others, we observe the following five areas of interest: Management of the mobile applications. This refers to the technical capabilities to create, deploy, and manage a suite of applications for multiple heterogeneous devices (e.g., iOS, Android, BlackBerry, Windows) that connect securely to enterprise back-end servers.Hybrid applications versus native applications. A native application is an application designed to run in a specific environment written in a specific language. A hybrid mobile application, however, is developed using web technologies such as HTML, CSS, and JavaScript activated by a native wrapper. Building native applications requires comprehensive knowledge in the specific environment, such as Objective C (iOS), Java (Android), and C# (Windows mobile and BlackBerry). However, hybrid applications based on web technologies require more common knowledge.User experience. Applications must be developed that provide different user experiences depending on the target environment. For example, an iOS application provides a different user experience than an Android application, even though the functionality of the application must be the same.Battery life. How can developers write software that uses up as little battery life as possible?Migrations to mobile. As more users access and use mobile-based tools, developers need to enable and support migration from legacy software such as web applications to mobile.Mobile security. Mobile devices have strong networking capabilities. Hence security of ersonal information and businesses data become very important. Employees use their smartphones to access sensitive information. The operating system of those devices collects sensitive data that may be visible to third-party applications. Hence vulnerabilities from both the web browser and operating system must be considered.Moreover, the development of mobile applications includes the following aspects that extend existing software engineering practices: Software characteristics. 1) Software is distributed on several platforms that link between them over the network. For example, one part of an application could be on mobile phones browsers, another part might be on the cloud, and both of them are reading data from some legacy systems. 2) Mobile applications need to be elastic and scale on demand according to their environments' abilities. Functionalities need to be easily removed, added, or moved to or from the cloud. 3) Many hardware platforms exist for an application and the platforms are rapidly changing, including flexible capabilities such as GPS, sensors, and input modes. Development, however, should be for all platforms.Architecture. Mobile application development also includes several architectural challenges, such as how to support omni-channel communications and how to support new application data updates from the server, e.g., notifications about new mail or software updates. Applications must be able to easily communicate with new systems. Traditional solutions enable software to be easily designed and modified to communicate with new environments. However, the environments with which applications need to communicate are rapidly changing. As a result, traditional solutions do not fit modern software and we cannot modify applications using traditional architectural approaches to support all channels.Testing. Another aspect of mobile application development concerns software testing. How can applications be tested on arbitrary and unknown hardware? And how can we develop test-driven software without being able to run the test itself?},
location = {Portland, Oregon, USA}
}

@article{10.1145/3430905.3430912,
author = {Miller, Jeffrey},
title = {Member Spotlight},
year = {2020},
issue_date = {October 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {4},
issn = {0097-8418},
url = {https://doi.org/10.1145/3430905.3430912},
doi = {10.1145/3430905.3430912},
abstract = {In this feature of the Bulletin, we highlight members of the SIGCSE community. In this issue, Bulletin co-editor Jeffrey Miller interviewed Dr. Valerie Barr.},
journal = {SIGCSE Bull.},
month = {oct},
pages = {9–11},
numpages = {3}
}

@inproceedings{10.1145/800194.805838,
author = {Boyle, James M. and Cody, William J. and Cowell, Wayne R. and Garbow, Burton S. and Ikebe, Yasuhiko and Moler, Cleve B. and Smith, Brian T.},
title = {NATS a Collaborative Effort to Certify and Disseminate Mathematical Software},
year = {1972},
isbn = {9781450374927},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800194.805838},
doi = {10.1145/800194.805838},
abstract = {Argonne National Laboratory, Stanford University and The University of Texas at Austin, in cooperation with various field test sites, have carried out a collaborative effort to certify and disseminate mathematical software. This is a prototype venture whose purpose is to develop ways of supplying the scientific computing community with highly reliable subroutines. Selected software is tested, first at the three principal institutions and then at field test sites. Routines of proven quality are certified and distributed from the Argonne Code Center. A collaborative testing methodology is emerging from the project.Software selected for testing and distribution includes a collection of routines for calculating certain special functions of mathematical physics and a Fortran package of eigensystem routines based on Algol originals of Wilkinson, Reinsch, and their colleagues.},
booktitle = {Proceedings of the ACM Annual Conference - Volume 2},
pages = {630–635},
numpages = {6},
keywords = {Software certification, Software distribution, Mathematical software},
location = {Boston, Massachusetts, USA},
series = {ACM '72}
}

@inproceedings{10.5555/2486788.2486933,
author = {Santos, Simone C. dos and Soares, Felipe S. F.},
title = {Authentic Assessment in Software Engineering Education Based on PBL Principles: A Case Study in the Telecom Market},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = { The continuous growth of the use of Information and Communication Technology in different sectors of the market calls out for software professionals with the qualifications needed to solve complex and diverse problems. Innovative teaching methodologies, such as the "Software Internship" model and PBL teaching approaches that are learner-centered and focus on bringing market reality to the learning environment, have been developed and implemented with a view to meeting this demand. However, the effectiveness of these methods cannot always be satisfactorily proved. Prompted by this, this paper proposes a model for assessing students based on real market practices while preserving the authenticity of the learning environment. To evaluate this model, a case study on skills training for software specialists for the Telecom market is discussed, and presents important results that show the applicability of the proposed model for teaching Software Engineering. },
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {1055–1062},
numpages = {8},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@article{10.1145/3361564,
author = {Andersen, David G.},
title = {Technical Perspective: A Whitebox Solution for Blackbox-like Behaviors},
year = {2019},
issue_date = {November 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {62},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/3361564},
doi = {10.1145/3361564},
journal = {Commun. ACM},
month = {oct},
pages = {136},
numpages = {1}
}

@inproceedings{10.1145/3209087.3209097,
author = {Reuter, Rebecca and Jahn, Sabrina and Figas, Paula and Bartel, Alexander and Mottok, J\"{u}rgen and Hagel, Georg},
title = {Learning Tasks for Software Engineering Education: An Exemplary Development of Learning Tasks for Software Engineering Based on Didactic Function and Knowledge Type},
year = {2018},
isbn = {9781450363839},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3209087.3209097},
doi = {10.1145/3209087.3209097},
abstract = {Learning tasks play an important role in education and especially in higher education. However, there is a significant lack in research regarding these in higher education. A learning task shows several characteristics, whereas the didactic function of a task is mostly considered. Two characteristics of learning tasks are focused in this paper: The didactic function and the type knowledge. Existing types of learning tasks are presented as well as a proposal for learning tasks in software engineering education that considers didactic functions, like elaboration, training or application and types of knowledge, i.e. factual, conceptual, procedural and metacognitive knowledge. This paper aims to serve as a guidance for lecturers who have the purpose to create learning tasks that address both characteristics -- the didactic function and the type of knowledge.},
booktitle = {Proceedings of the 3rd European Conference of Software Engineering Education},
pages = {1–7},
numpages = {7},
keywords = {Learning Tasks, Knowledge Types, Didactic Function, Software Engineering},
location = {Seeon/ Bavaria, Germany},
series = {ECSEE'18}
}

