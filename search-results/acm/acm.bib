@inproceedings{10.1145/3092703.3098241,
author = {Oliveira, Carlos},
title = {Mapping Hardness of Automated Software Testing},
year = {2017},
isbn = {9781450350761},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3092703.3098241},
doi = {10.1145/3092703.3098241},
abstract = { Automated Test Case Generation (ATCG) is an important topic in Software Testing, with a wide range of techniques and tools being used in academia and industry. While their usefulness is widely recognized, due to the labor-intensive nature of the task, the effectiveness of the different techniques in automatically generating test cases for different software systems is not thoroughly understood. Despite many studies introducing various ATCG techniques, much remains to be learned, however, about what makes a particular technique work well (or not) for a specific software system. Therefore, we propose a new methodology to evaluate and select the most effective ATCG technique using structure-based complexity measures. Empirical tests are going to be performed using two different techniques: Search-based Software Testing (SBST) and Random Testing (RT). },
booktitle = {Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {440–443},
numpages = {4},
keywords = {SBST, RT, Automated Software Testing, META Framework},
location = {Santa Barbara, CA, USA},
series = {ISSTA 2017}
}

@inbook{10.1145/3486607.3486772,
author = {Groce, Alex},
title = {Let a Thousand Flowers Bloom: On the Uses of Diversity in Software Testing},
year = {2021},
isbn = {9781450391108},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486607.3486772},
abstract = {Software testing is hard, and a testing problem is composed of many sub-problems with different, often conflicting, solutions. Like many real-world problems, it admits no single optimal solution, but requires dexterity, and the opportunistic combination of many partial solutions. Exploration and experiment, even by practitioners, are important in real-world critical testing efforts. An important set of research results in the field endorse and codify the value of diversity in test generation. However, our current approaches to evaluating research results arguably cut against this fundamental reality: while effective testing may need true diversity, combining many partial answers, the iron logic of the research results section often imposes a totalizing vision where authors must at least pretend to present a monolithic, unitary solution, a new “king of the hill.”},
booktitle = {Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {136–144},
numpages = {9}
}

@inproceedings{10.1145/3356317.3356326,
author = {Cort\'{e}s, Mariela and Saraiva, Raphael and Souza, Marcia and Mello, Patricia and Soares, Pamella},
title = {Adoption of Software Testing in Internet of Things: A Systematic Literature Mapping},
year = {2019},
isbn = {9781450376488},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3356317.3356326},
doi = {10.1145/3356317.3356326},
abstract = {The Internet of Things (IoT) is a paradigm based on the interaction between intelligent devices (things) and physical and/or virtual resources through the Internet. Thus, applications in this domain may become more prone to failures. In this scenario, evaluating the quality of applications through software testing can be considered critical and challenging. The focus of this work is to obtain a comprehensive understanding of the adoption of Software Testing in the context of IoT, identifying gaps in existing approaches, and providing new directions for research in the area. To achieve this goal, a systematic mapping covering research papers published in journals and conferences was carried out, accessing four relevant electronic databases. As a result, a total of 79 studies were selected and analyzed in order to evaluate quantitatively and qualitatively, the effective adoption of software testing in the projects.},
booktitle = {Proceedings of the IV Brazilian Symposium on Systematic and Automated Software Testing},
pages = {3–11},
numpages = {9},
keywords = {Systematic Mapping, Quality Assessment, Software Engineering, Software Testing, Internet of Things},
location = {Salvador, Brazil},
series = {SAST 2019}
}

@inproceedings{10.1145/3425174.3425216,
author = {Lopes, Vinicius Carvalho and Norberto, Marcus and R. S., Douglas Winston and Kassab, Mohamad and da Silva Soares, Anderson and Oliveira, Roberto and Neto, Valdemar Vicente Graciano},
title = {A Systematic Mapping Study on Software Testing for Systems-of-Systems},
year = {2020},
isbn = {9781450387552},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3425174.3425216},
doi = {10.1145/3425174.3425216},
abstract = {Context: Smart Cities and other Systems-of-Systems (SoS) have attracted attention due to their potential for innovation in the services provided to the society. SoS are composed of several independent systems and often support critical domains. As such, failures can cause serious damage or even financial losses that can be avoided by performing quality assurance (QA). Among QA techniques, software testing is an essential activity that checks software behaviors against a subset of parameters. However, testing SoS can be even more complex since several other factors further elevate the complexity of the test, such as interoperability links and multiple independent systems. Goal: Our goal in this paper is to analyze the current state of research on software testing for SoS domain. Method: A protocol was formulated and executed according to the guidelines for performing systematic literature mappings in Software Engineering. Results: This study identified the tools, approaches, methods and processes that the literature has addressed to test SoS. Conclusions: Software Testing for SoS still faces several problems and presents many questions to be answered, particularly in the definition of processes and metrics.},
booktitle = {Proceedings of the 5th Brazilian Symposium on Systematic and Automated Software Testing},
pages = {88–97},
numpages = {10},
keywords = {System of Systems, validation, verification, software testing},
location = {Natal, Brazil},
series = {SAST 20}
}

@inproceedings{10.1145/2593882.2593885,
author = {Orso, Alessandro and Rothermel, Gregg},
title = {Software Testing: A Research Travelogue (2000–2014)},
year = {2014},
isbn = {9781450328654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593882.2593885},
doi = {10.1145/2593882.2593885},
abstract = { Despite decades of work by researchers and practitioners on numerous software quality assurance techniques, testing remains one of the most widely practiced and studied approaches for assessing and improving software quality. Our goal, in this paper, is to provide an accounting of some of the most successful research performed in software testing since the year 2000, and to present what appear to be some of the most significant challenges and opportunities in this area. To be more inclusive in this effort, and to go beyond our own personal opinions and biases, we began by contacting over 50 of our colleagues who are active in the testing research area, and asked them what they believed were (1) the most significant contributions to software testing since 2000 and (2) the greatest open challenges and opportunities for future research in this area. While our colleagues’ input (consisting of about 30 responses) helped guide our choice of topics to cover and ultimately the writing of this paper, we by no means claim that our paper represents all the relevant and noteworthy research performed in the area of software testing in the time period considered—a task that would require far more space and time than we have available. Nevertheless, we hope that the approach we followed helps this paper better reflect not only our views, but also those of the software testing community in general. },
booktitle = {Future of Software Engineering Proceedings},
pages = {117–132},
numpages = {16},
keywords = {Software testing},
location = {Hyderabad, India},
series = {FOSE 2014}
}

@inproceedings{10.1145/1882362.1882433,
author = {Namin, Akbar Siami and Sridharan, Mohan},
title = {Bayesian Reasoning for Software Testing},
year = {2010},
isbn = {9781450304276},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1882362.1882433},
doi = {10.1145/1882362.1882433},
abstract = {Despite significant advances in software testing research, the ability to produce reliable software products for a variety of critical applications remains an open problem. The key challenge has been the fact that each program or software product is unique, and existing methods are predominantly not capable of adapting to the observations made during program analysis. This paper makes the following claim: Bayesian reasoning methods provide an ideal research paradigm for achieving reliable and efficient software testing and program analysis. A brief overview of some popular Bayesian reasoning methods is provided, along with a justification of why they are applicable to software testing. Furthermore, some practical challenges to the widespread use of Bayesian methods are discussed, along with possible solutions to these challenges.},
booktitle = {Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research},
pages = {349–354},
numpages = {6},
keywords = {software testing, stochastic methods, probabilistic reasoning, program analysis, bayesian data analysis},
location = {Santa Fe, New Mexico, USA},
series = {FoSER '10}
}

@inproceedings{10.1145/1159733.1159773,
author = {Taipale, Ossi and Smolander, Kari},
title = {Improving Software Testing by Observing Practice},
year = {2006},
isbn = {1595932186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1159733.1159773},
doi = {10.1145/1159733.1159773},
abstract = {The objective of this qualitative study was to understand the complex practice of software testing, and based on this knowledge, to develop process improvement propositions that could concurrently reduce development and testing costs and improve software quality. First, a survey of testing practices was onducted and 26 organizational units (OUs) were interviewed. From this sample, five OUs were further selected for an in-depth case study. The study used grounded theory as its research method and the data was collected from 41 theme-based interviews. The analysis yielded improvement propositions that included enhanced testability of software components, efficient communication and interaction between development and testing, early involvement of testing, and risk-based testing. The connective and central improvement proposition was that testing ought to adapt to the business orientation of the OU. Other propositions were integrated around this central proposition. The results of this study can be used in improving development and testing processes.},
booktitle = {Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering},
pages = {262–271},
numpages = {10},
keywords = {software testing, process improvement, grounded theory},
location = {Rio de Janeiro, Brazil},
series = {ISESE '06}
}

@inproceedings{10.1145/3352700.3352724,
author = {Jahan, Muhammad Shah and Riaz, Muhammad Talha and Kashif and Abbas, Muhammad},
title = {Software Testing Practices in IT Industry of Pakistan},
year = {2019},
isbn = {9781450376365},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3352700.3352724},
doi = {10.1145/3352700.3352724},
abstract = {A software must do what it intends to do. The quality is core factor in IT Industry and in software products. The quality of the product is main concern of the producer and the main requirement of a customer. Software testing is the core activity of quality assurance and very important phase of software development life cycle. Quality of any system is known by testing that product. With the advancement of IT industry many new verification and validation technique are introduced over a time. New trends are well adopted in developed countries like USA, UK etc. But not as well in IT of developing countries like Pakistan. The need of this paper is due to a large number of outsourced projects and also multinational IT companies in Pakistan. Due to high demand of outsourced projects the software testing become an integral part of IT Industry of Pakistan. Our team has collected data about testing in IT Industry of Pakistan which will be benefit for the testers in IT Industry not just in Pakistan but worldwide. These results could be use by researchers to identify the strengths and weakness of testing in IT industry.},
booktitle = {Proceedings of the 6th Conference on the Engineering of Computer Based Systems},
articleno = {24},
numpages = {10},
keywords = {Software Testing in Pakistan, Software testing, Software testing in developing country, Software testing practices},
location = {Bucharest, Romania},
series = {ECBS '19}
}

@article{10.1145/1022494.1022540,
author = {Bertolino, Antonia},
title = {The (Im)Maturity Level of Software Testing},
year = {2004},
issue_date = {September 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {5},
issn = {0163-5948},
url = {https://doi.org/10.1145/1022494.1022540},
doi = {10.1145/1022494.1022540},
abstract = {A large gap exists between the state-of-the-art in software testing literature, and the state of software testing practice. Empirical research should (and could) play a first class role for bridging this gap. Empirical studies in software testing have focused mainly on the evaluation of techniques for test case selection. But effective selection of test cases by itself is not sufficient to warrant successful testing: we need also empirical studies to start collecting proven patterns that test practitioners can use to predictably solve software testing problems.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {sep},
pages = {1–4},
numpages = {4},
keywords = {comparisons of test techniques, test patterns, software testing maturity}
}

@inproceedings{10.1145/3319008.3319018,
author = {Raulamo-Jurvanen, P\"{a}ivi and Hosio, Simo and M\"{a}ntyl\"{a}, Mika V.},
title = {Practitioner Evaluations on Software Testing Tools},
year = {2019},
isbn = {9781450371452},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3319008.3319018},
doi = {10.1145/3319008.3319018},
abstract = {In software engineering practice, evaluating and selecting the software testing tools that best fit the project at hand is an important and challenging task. In scientific studies of software engineering, practitioner evaluations and beliefs have recently gained interest, and some studies suggest that practitioners find beliefs of peers more credible than empirical evidence. To study how software practitioners evaluate testing tools, we applied online opinion surveys (n=89). We analyzed the reliability of the opinions utilizing Krippendorff's alpha, intra-class correlation coefficient (ICC), and coefficients of variation (CV). Negative binomial regression was used to evaluate the effect of demographics. We find that opinions towards a specific tool can be conflicting. We show how increasing the number of respondents improves the reliability of the estimates measured with ICC. Our results indicate that on average, opinions from seven experts provide a moderate level of reliability. From demographics, we find that technical seniority leads to more negative evaluations. To improve the understanding, robustness, and impact of the findings, we need to conduct further studies by utilizing diverse sources and complementary methods.},
booktitle = {Proceedings of the Evaluation and Assessment on Software Engineering},
pages = {57–66},
numpages = {10},
keywords = {software testing tool, opinion survey, reliability, tool evaluation},
location = {Copenhagen, Denmark},
series = {EASE '19}
}

@article{10.1145/1218776.1218787,
author = {Fraser, Gordon and Wotawa, Franz},
title = {Property Relevant Software Testing with Model-Checkers},
year = {2006},
issue_date = {November 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {6},
issn = {0163-5948},
url = {https://doi.org/10.1145/1218776.1218787},
doi = {10.1145/1218776.1218787},
abstract = {Verification is applied to software as a proof method with respect to its requirements. Software testing is necessary due to the fact that verification is often infeasible. Automation is desirable since the complexity and the effort involved are significant. However, automated software testing is commonly used to ensure confidence in the conformance of an implementation to an abstract model, not to its requirement properties. In this paper, we introduce the notion of property relevance of test-cases. Property relevant test-cases can be used to determine property violations. It is shown how to detect the properties relevant to a test-case. New coverage criteria based on property relevance are introduced. Automated generation of test-suites satisfying these criteria is also presented. Finally, feasibility is illustrated with an empirical evaluation.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {nov},
pages = {1–10},
numpages = {10},
keywords = {requirements traceability, model-checker based testing, property relevance, software testing, test-suite analysis}
}

@inproceedings{10.1145/3350768.3353903,
author = {de Andrade, Stev\~{a}o Alves and de Oliveira Neves, V\^{a}nia and Delamaro, M\'{a}rcio Eduardo},
title = {Software Testing Education: Dreams and Challenges When Bringing Academia and Industry Closer Together},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3350768.3353903},
doi = {10.1145/3350768.3353903},
abstract = {Software systems are present in people's lives and they are increasing to the same extent as their complexity and their criticality. Therefore, we must ensure that these systems maintain high quality in order to behave as expected. To develop high quality software, it is essential to have qualified people who are knowledgeable about Validation and Verification (V&amp;V) techniques, especially software testing. This paper reports on the teaching process in two undergraduate courses in two different contexts: Computer Science students, who can dedicate more time during the day to studying, and Information Systems students, who can only study during the evenings. To engage and motivate the students in the context of software testing learning, we studied ways to bring real industry problems to the classroom in order to adopt the Problem-based Learning (PBL) approach. We chose two real open source projects which, considering the feedback from students and professors, was a good decision. However, the approach requires students to take extra classes rather than teacher-centered approaches. Extra classes may hinder the approach when the class consists of students who work during the day, thus developing a balance between student-centered and teacher-centered can be a good solution in such contexts.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {47–56},
numpages = {10},
keywords = {education, PBL, industry, Software testing, problem-based learning},
location = {Salvador, Brazil},
series = {SBES 2019}
}

@inproceedings{10.1145/3195570.3195582,
author = {J\'{a}sz, Judit and Besz\'{e}des, \'{A}rp\'{a}d},
title = {Software Testing Conferences and Women},
year = {2018},
isbn = {9781450357388},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3195570.3195582},
doi = {10.1145/3195570.3195582},
abstract = {The question of gender equality is an increasing concern in all aspects of life these days. ICT has its peculiarities in this respect, as it is often regarded as a "male" discipline. Among the many different subfields of ICT, in this work we concentrate on software testing, an area in which a significant portion of all ICT professionals is engaged. Testing is an interesting field because according to certain views more women work in this area compared to other ICT fields. Since testing itself still covers a large topic involving education, research and industry, we further limit our analysis to software testing conferences and the rate of women participation in important roles at these venues. We looked at keynote speakers and chairs in different roles and program committees, but not the participants themselves as reliable data was available only for the former. We investigated if gender distribution was similar to or different from the reported data for ICT as a whole. We also compared the different types of conferences, academic and industrial, from this aspect. We have found, among other things, that gender ratio at software testing conferences is similar to other fields, but in more important roles such as keynotes, equality is more significantly maintained.},
booktitle = {Proceedings of the 1st International Workshop on Gender Equality in Software Engineering},
pages = {17–20},
numpages = {4},
keywords = {gender equality, women in testing, software testing conferences, academia-industry collaboration, women in ICT},
location = {Gothenburg, Sweden},
series = {GE '18}
}

@inproceedings{10.1145/3422392.3422458,
author = {Santos, Italo and Coutinho, Emanuel F. and Souza, Simone R. S.},
title = {Software Testing Ecosystems Insights and Research Opportunities},
year = {2020},
isbn = {9781450387538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3422392.3422458},
doi = {10.1145/3422392.3422458},
abstract = {[Context] Software testing research is a robust field of study with a lot of research that aims to improve testing activities. There are several related elements in the testing activity that can be further investigated through the concepts defined in the software ecosystem (SECO) research. The study of testing and joint SECO addresses challenges and opportunities that go forward application development in a project, through an entire development network from suppliers to stakeholders. [Objective] In this paper, we propose a definition of software testing ecosystem (STECO) and report research opportunities, to bring close these two different research fields fostering the conduction of new research at the intersection of these two topics to investigate the elements of testing activity that constitute an ecosystem and how it can be tested to improve software quality. [Method] The concept of STECO is defined and we perform a literature search. Hence, to illustrate the idea of a STECO, we designed a model to describe the elements involved around the JUnit SECO and describe some research opportunities considering the knowledge of the testing and SECO fields. [Results and Conclusions] The following research opportunities are highlighted to foster new research works: (i) the conduction of functional and nonfunctional requirements testing, as well as the challenges imposed from this activity; (ii) the need for testing products developed separated from the central SECO platform; (iii) conduction of studies on testing automation on SECO platforms; (iv) testing between the different technologies that composed a SECO; and (v) testing the mobile software ecosystem (MSECO) environment, that has been presenting a fast growth in the number of applications.},
booktitle = {Proceedings of the 34th Brazilian Symposium on Software Engineering},
pages = {421–426},
numpages = {6},
keywords = {software ecosystems, Software testing, research opportunities},
location = {Natal, Brazil},
series = {SBES '20}
}

@article{10.1145/2518106,
author = {Smidts, Carol and Mutha, Chetan and Rodr\'{\i}guez, Manuel and Gerber, Matthew J.},
title = {Software Testing with an Operational Profile: OP Definition},
year = {2014},
issue_date = {January 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {46},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/2518106},
doi = {10.1145/2518106},
abstract = {This article is devoted to the survey, analysis, and classification of operational profiles (OP) that characterize the type and frequency of software inputs and are used in software testing techniques. The survey follows a mixed method based on systematic maps and qualitative analysis. This article is articulated around a main dimension, that is, OP classes, which are a characterization of the OP model and the basis for generating test cases. The classes are organized as a taxonomy composed of common OP features (e.g., profiles, structure, and scenarios), software boundaries (which define the scope of the OP), OP dependencies (such as those of the code or in the field of interest), and OP development (which specifies when and how an OP is developed). To facilitate understanding of the relationships between OP classes and their elements, a meta-model was developed that can be used to support OP standardization. Many open research questions related to OP definition and development are identified based on the survey and classification.},
journal = {ACM Comput. Surv.},
month = {feb},
articleno = {39},
numpages = {39},
keywords = {software reliability, Software testing, usage models, taxonomy, operational profile}
}

@inproceedings{10.1145/3287324.3287384,
author = {Scatalon, Lilian Passos and Carver, Jeffrey C. and Garcia, Rog\'{e}rio Eduardo and Barbosa, Ellen Francine},
title = {Software Testing in Introductory Programming Courses: A Systematic Mapping Study},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287384},
doi = {10.1145/3287324.3287384},
abstract = {Traditionally, students learn about software testing during intermediate or advanced computing courses. However, it is widely advocated that testing should be addressed beginning in introductory programming courses. In this context, testing practices can help students think more critically while working on programming assignments. At the same time, students can develop testing skills throughout the computing curriculum. Considering this scenario, we conducted a systematic mapping of the literature about software testing in introductory programming courses, resulting in 293 selected papers. We mapped the papers to categories with respect to their investigated topic (curriculum, teaching methods, programming assignments, programming process, tools, program/test quality, concept understanding, and students' perceptions and behaviors) and evaluation method (literature review, exploratory study, descriptive/persuasive study, survey, qualitative study, experimental and experience report). We also identified the benefits and drawbacks of this teaching approach, as pointed out in the selected papers. The goal is to provide an overview of research performed in the area, highlighting gaps that should be further investigated.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {421–427},
numpages = {7},
keywords = {introductory programming courses, software testing, systematic mapping},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@article{10.1145/62959.62965,
author = {Gelperin, D. and Hetzel, B.},
title = {The Growth of Software Testing},
year = {1988},
issue_date = {June 1988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {6},
issn = {0001-0782},
url = {https://doi.org/10.1145/62959.62965},
doi = {10.1145/62959.62965},
abstract = {We can trace the evolution of software test engineering by examining changes in the testing process model and the level of professionalism over the years. The current definition of a good software testing practice involves some preventive methodology.},
journal = {Commun. ACM},
month = {jun},
pages = {687–695},
numpages = {9}
}

@inproceedings{10.1145/1984642.1984660,
author = {Sharma, Vibhu Saujanya and Kaulgud, Vikrant},
title = {Studying Team Evolution during Software Testing},
year = {2011},
isbn = {9781450305761},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1984642.1984660},
doi = {10.1145/1984642.1984660},
abstract = {Software development teams are one of the most dynamic entities of any software development project. While the individuals are assigned planned roles at the start of any project, during the course of the project, the team constitution, structure, relationships and roles change. Such changes are often spontaneous and constitute the evolution of the team along different phases of the software development lifecycle. As software development is a team effort, these dynamics may have a significant effect on the development lifecycle itself. This work is aimed at studying the evolution of project teams and gathering insights that can be correlated with project health and outcomes. In this study we apply social network analysis techniques to investigate team evolution in a project in its testing phase. While the questions and insights that we investigate in this paper are valid and useful for all phases of the software development lifecycle, we have focused on software testing phase as it one of the most critical phases in the lifecycle. Our work aims to provide insights in the changes in team interactions and individual roles as the testing process continues and can help find if the same is aligned to the planned and desired project behavior.},
booktitle = {Proceedings of the 4th International Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {72–75},
numpages = {4},
keywords = {software testing, team evolution, team analysis, social network analysis},
location = {Waikiki, Honolulu, HI, USA},
series = {CHASE '11}
}

@inproceedings{10.1145/2851613.2851783,
author = {Patrick, Matthew and Elderfield, James and Stutt, Richard O. J. H. and Rice, Andrew and Gilligan, Christopher A.},
title = {Software Testing in a Scientific Research Group},
year = {2016},
isbn = {9781450337397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2851613.2851783},
doi = {10.1145/2851613.2851783},
abstract = {Scientific software is more difficult to test than many other software products, but scientists are not usually trained in software engineering techniques. Considering how often software is used to produce scientific results, how can we be sure the predictions made from these results are correct? Software engineering techniques should be useful for computational scientists. The problem is they find it difficult to know how to apply domain-independent techniques to the specific problems they face in their work. Nevertheless, we have discovered scientists use their own intuition to reinvent techniques surprisingly similar to those in software engineering. This seems like a good place to start our training.},
booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
pages = {1454–1459},
numpages = {6},
keywords = {scientific software, training and education, software testing},
location = {Pisa, Italy},
series = {SAC '16}
}

@article{10.1145/1968587.1968601,
author = {Baride, Srikanth and Dutta, Kamlesh},
title = {A Cloud Based Software Testing Paradigm for Mobile Applications},
year = {2011},
issue_date = {May 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/1968587.1968601},
doi = {10.1145/1968587.1968601},
abstract = {The testing of applications for mobile computing devices is cumbersome due to the bounded computational resources that these devices have and diversity in mobile environments. There are many different types of emulators that have been proposed and used nowadays for this purpose. But these emulators typically cannot emulate: actual network speed and availability, actual device specific content-rendering speed, memory limitation, cache size, CPU speed, and stack size. These emulators are designed for specific platforms, which lack testing of applications on heterogeneous mobile platforms. Cloud Computing has a potential to overcome these challenges by taking up contemporary progress in parallel and distributed systems, virtualization, and software services. Cloud computing empowers us to have adaptable and on-demand network access to a common group of configurable computing resources. In this article, we introduce a cloudbased model that provides solutions to aforesaid challenges. Our model sets up a mobile environment, actual device and platform on the cloud resources for a given system configuration. It also provides software testing services to execute numerous tests automatically according to a given application.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {may},
pages = {1–4},
numpages = {4},
keywords = {cloud computing, software testing, cloud services, mobile applications, emulator}
}

