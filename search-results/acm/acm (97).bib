@article{10.1145/979743.979745,
author = {ACM SIGSOFT Software Engineering Notes staff},
title = {Back Matter (Abstracts and Calendar)},
year = {2004},
issue_date = {March 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {2},
issn = {0163-5948},
url = {https://doi.org/10.1145/979743.979745},
doi = {10.1145/979743.979745},
journal = {SIGSOFT Softw. Eng. Notes},
month = {mar},
pages = {27–62},
numpages = {36}
}

@inproceedings{10.1145/1866835.1866847,
author = {Wang, Shiyuan and Agrawal, Divyakant and El Abbadi, Amr},
title = {HengHa: Data Harvesting Detection on Hidden Databases},
year = {2010},
isbn = {9781450300896},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1866835.1866847},
doi = {10.1145/1866835.1866847},
abstract = {The back-end databases of web-based applications are a major data security concern to enterprises. The problem becomes more critical with the proliferation of enterprise hosted web applications in the cloud. While prior work has concentrated on malicious attacks that try to break into the database using vulnerabilities of web applications, little work has focused on the threat of data harvesting through web form interfaces, in which large collections of the underlying data can be harvested and sensitive information can be learnt by iteratively submitting legitimate queries and analyzing the returned results for designing new queries. To defend against data harvesting without compromising usability, we consider a detection approach. We summarize the characteristics of data harvesting, and propose the notions of query correlation and result coverage for data harvesting detection. We design a detection system called HengHa, in which Heng examines the correlation among queries in a session, and Ha evaluates the data coverage of the results of queries in the same session. The experimental results verify the effectiveness and efficiency of HengHa for data harvesting detection.},
booktitle = {Proceedings of the 2010 ACM Workshop on Cloud Computing Security Workshop},
pages = {59–64},
numpages = {6},
keywords = {query correlation, crawling, data harvesting detection, sampling, result coverage},
location = {Chicago, Illinois, USA},
series = {CCSW '10}
}

@inproceedings{10.1109/ICSE.2019.00096,
author = {Hao, Rui and Feng, Yang and Jones, James A. and Li, Yuying and Chen, Zhenyu},
title = {CTRAS: Crowdsourced Test Report Aggregation and Summarization},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE.2019.00096},
doi = {10.1109/ICSE.2019.00096},
abstract = {Crowdsourced testing has been widely adopted to improve the quality of various software products. Crowdsourced workers typically perform testing tasks and report their experiences through test reports. While the crowdsourced test reports provide feedbacks from real usage scenarios, inspecting such a large number of reports becomes a time-consuming yet inevitable task. To improve the efficiency of this task, existing widely used issue-tracking systems, such as JIRA, Bugzilla, and Mantis, have provided keyword-search-based methods to assist users in identifying duplicate test reports. However, on mobile devices (such as mobile phones), where the crowdsourced test reports often contain insufficient text descriptions but instead rich screenshots, these text-analysis-based methods become less effective because the data has fundamentally changed.In this paper, instead of focusing on only detecting duplicates based on textual descriptions, we present CTRAS: a novel approach to leveraging duplicates to enrich the content of bug descriptions and improve the efficiency of inspecting these reports. CTRAS is capable of automatically aggregating duplicates based on both textual information and screenshots, and further summarizes the duplicate test reports into a comprehensive and comprehensible report. To validate CTRAS, we conducted quantitative studies using more than 5000 test reports, collected from 12 industrial crowdsourced projects. The experimental results reveal that CTRAS can reach an accuracy of 0.87, on average, regarding automatically detecting duplicate reports, and it outperforms the classic Max-Coverage-based and MMR summarization methods under Jensen Shannon divergence metric. Moreover, we conducted a task-based user study with 30 participants, whose result indicates that CTRAS can save nearly 30% time cost on average without loss of correctness.},
booktitle = {Proceedings of the 41st International Conference on Software Engineering},
pages = {900–910},
numpages = {11},
location = {Montreal, Quebec, Canada},
series = {ICSE '19}
}

@inproceedings{10.1145/2884781.2884828,
author = {Lu, Xuan and Liu, Xuanzhe and Li, Huoran and Xie, Tao and Mei, Qiaozhu and Hao, Dan and Huang, Gang and Feng, Feng},
title = {PRADA: Prioritizing Android Devices for Apps by Mining Large-Scale Usage Data},
year = {2016},
isbn = {9781450339001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2884781.2884828},
doi = {10.1145/2884781.2884828},
abstract = {Selecting and prioritizing major device models are critical for mobile app developers to select testbeds and optimize resources such as marketing and quality-assurance resources. The heavily fragmented distribution of Android devices makes it challenging to select a few major device models out of thousands of models available on the market. Currently app developers usually rely on some reported or estimated general market share of device models. However, these estimates can be quite inaccurate, and more problematically, can be irrelevant to the particular app under consideration. To address this issue, we propose PRADA, the first approach to prioritizing Android device models for individual apps, based on mining large-scale usage data. PRADA adapts the concept of operational profiling (popularly used in software reliability engineering) for mobile apps -- the usage of an app on a specific device model reflects the importance of that device model for the app. PRADA includes a collaborative filtering technique to predict the usage of an app on different device models, even if the app is entirely new (without its actual usage in the market yet), based on the usage data of a large collection of apps. We empirically demonstrate the effectiveness of PRADA over two popular app categories, i.e., Game and Media, covering over 3.86 million users and 14,000 device models collected through a leading Android management app in China.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering},
pages = {3–13},
numpages = {11},
keywords = {prioritization, android fragmentation, usage data, mobile apps},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{10.1145/2670518.2673880,
author = {Chandrasekaran, Balakrishnan and Benson, Theophilus},
title = {Tolerating SDN Application Failures with LegoSDN},
year = {2014},
isbn = {9781450332569},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2670518.2673880},
doi = {10.1145/2670518.2673880},
abstract = {Despite Software Defined Network's (SDN) proven benefits, there remains significant reluctance in adopting it. Among the issues that hamper SDN's adoption two stand out: reliability and fault tolerance. At the heart of these issues is a set of fate-sharing relationships: The first between the SDN-Apps and controllers, where-in the crash of the former induces a crash of the latter, and thereby affecting availability; and, the second between the SDN-App and the network, where-in a byzantine failure e.g., black-holes and network-loops, induces a failure in the network, and thereby affecting network availability. The principal position of this paper is that availability is of utmost concern -- second only to security. To this end, we present a re-design of the controller architecture centering around a set of abstractions to eliminate these fate-sharing relationships, and make the controllers and network resilient to SDN-App failures. We illustrate how these abstractions can be used to improve the reliability of an SDN environment, thus eliminating one of the barriers to SDN's adoption.},
booktitle = {Proceedings of the 13th ACM Workshop on Hot Topics in Networks},
pages = {1–7},
numpages = {7},
keywords = {Fault Tolerance, Software-Defined Networking},
location = {Los Angeles, CA, USA},
series = {HotNets-XIII}
}

@inproceedings{10.1145/3350768.3353815,
author = {Silva, Fernanda Gomes and Brito, Moara Sousa and Tavares, Jenifer Vieira Toledo and Chavez, Christina von Flach G.},
title = {FLOSS in Software Engineering Education: Supporting the Instructor in the Quest for Providing Real Experience for Students},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3350768.3353815},
doi = {10.1145/3350768.3353815},
abstract = {Software engineering courses play an important role in computer science programs and are expected to provide the required basic knowledge and skills for professional practice in software industry. However, teaching software engineering principles, concepts and practices, and relating them to real-world scenarios are challenging tasks. The adoption of open source software projects may address such challenges. In this paper we report on an experience of the teaching object-oriented modeling with Unified Modeling Language (UML) Class Diagrams using open source projects. We conducted a case study with students of the software engineering discipline of the Computer Science course. We supported the instructor in some activities related to syllabus planning, including the selection of a Free/Libre/Open Source Software (FLOSS) projects and the creation of examples to be used in the classroom. The instructor selected and used a small FLOSS project to support the modeling activities. Then, the instructor applied an evaluation activity and a perception questionnaire about the methodology used. After the end of the classes, we conducted an interview with the instructor to present a brief report of his experience in the classroom. In the perception of students, the experience with FLOSS projects enhanced their ability to handle real projects and third-party code, and to deal with the job market. They also reported developing skills such as proactivity and communication. From the instructor's perspective, the group was enthusiastic and dynamic, and interacted more during practical activities.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {234–243},
numpages = {10},
keywords = {Class Diagram, Experience report, Free/Libre/Open Source Software, FLOSS},
location = {Salvador, Brazil},
series = {SBES 2019}
}

@inproceedings{10.1109/CSI-SE.2017.2,
author = {Winkler, Dietmar and Sabou, Marta and Petrovic, Sanja and Carneiro, Gisele and Kalinowski, Marcos and Biffl, Stefan},
title = {Improving Model Inspection with Crowdsourcing},
year = {2017},
isbn = {9781538640418},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CSI-SE.2017.2},
doi = {10.1109/CSI-SE.2017.2},
abstract = {Traditional Software Inspection is a well-established approach to identify defects in software artifacts and models early and efficiently. However, insufficient method and tool support hinder efficient defect detection in large software models. Recent Human Computation and Crowdsourcing processes may help to overcome this limitation by splitting complex inspection artifacts into smaller parts including a better control over defect detection tasks and increasing the scalability of inspection tasks. Therefore, we introduce a Crowdsourcing-Based Inspection (CSI) process with tool support with focus on inspection teams and the quality of defect detection. We evaluate the CSI process in a feasibility study involving 63 inspectors using the CSI process and 12 inspectors using a traditional best-practice inspection process. The CSI process was found useful by the participants. Although the preliminary results of the study were promising, the CSI process should be further investigated with typical large software engineering models.},
booktitle = {Proceedings of the 4th International Workshop on CrowdSourcing in Software Engineering},
pages = {30–34},
numpages = {5},
keywords = {model inspection, defect detection, feasibility study, crowdsourcing},
location = {Buenos Aires, Argentina},
series = {CSI-SE '17}
}

@article{10.1145/3449282,
author = {Das, Maitraye and Tang, John and Ringland, Kathryn E. and Piper, Anne Marie},
title = {Towards Accessible Remote Work: Understanding Work-from-Home Practices of Neurodivergent Professionals},
year = {2021},
issue_date = {April 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {CSCW1},
url = {https://doi.org/10.1145/3449282},
doi = {10.1145/3449282},
abstract = {Working from home has become a mainstream work practice in many organizations during the COVID-19 pandemic. While remote work has received much scholarly and public attention over the years, we still know little about how people with disabilities engage in remote work from their homes and what access means in this context. To understand and rethink accessibility in remote work, the present paper studies work-from-home practices of neurodivergent professionals who have Autism Spectrum Disorder, Attention Deficit Hyperactivity Disorder, learning disabilities (e.g., dyslexia) and psychosocial disabilities (e.g., anxiety, depression). We report on interviews with 36 US-based neurodivergent professionals who have been working from home during the pandemic. Our findings reveal that while working from home, neurodivergent professionals create accessible physical and digital workspaces, negotiate accessible communication practices, and reconcile tensions between productivity and wellbeing. Our analysis reconsiders what access means in remote work for neurodivergent professionals and offers practical insights for inclusive work practices and accessibility improvements in remote collaboration tools.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = {apr},
articleno = {183},
numpages = {30},
keywords = {work from home, dyslexia, accessibility, pandemic, autism, neurodivergence, adhd, remote work, covid-19, psychosocial disability}
}

@inbook{10.1145/3368089.3409727,
author = {Chen, Qingrong and Wang, Teng and Legunsen, Owolabi and Li, Shanshan and Xu, Tianyin},
title = {Understanding and Discovering Software Configuration Dependencies in Cloud and Datacenter Systems},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3409727},
abstract = {A large percentage of real-world software configuration issues, such as misconfigurations, involve multiple interdependent configuration parameters. However, existing techniques and tools either do not consider dependencies among configuration parameters— termed configuration dependencies—or rely on one or two dependency types and code patterns as input. Without rigorous understanding of configuration dependencies, it is hard to deal with many resulting configuration issues.  This paper presents our study of software configuration dependencies in 16 widely-used cloud and datacenter systems, including dependencies within and across software components. To understand types of configuration dependencies, we conduct an exhaustive search of descriptions in structured configuration metadata and unstructured user manuals. We find and manually analyze 521 configuration dependencies. We define five types of configuration dependencies and identify their common code patterns. We report on consequences of not satisfying these dependencies and current software engineering practices for handling the consequences.  We mechanize the knowledge gained from our study in a tool, cDep, which detects configuration dependencies. cDep automatically discovers five types of configuration dependencies from bytecode using static program analysis. We apply cDep to the eight Java and Scala software systems in our study. cDep finds 87.9% (275/313) of the related subset of dependencies from our study. cDep also finds 448 previously undocumented dependencies, with a 6.0% average false positive rate. Overall, our results show that configuration dependencies are more prevalent and diverse than previously reported and should henceforth be considered a first-class issue in software configuration engineering.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {362–374},
numpages = {13}
}

@inproceedings{10.1145/2791060.2791067,
author = {Yue, Tao and Ali, Shaukat and Selic, Bran},
title = {Cyber-Physical System Product Line Engineering: Comprehensive Domain Analysis and Experience Report},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791067},
doi = {10.1145/2791060.2791067},
abstract = {Cyber-Physical Systems (CPSs) are the future generation of highly connected embedded systems having applications in diverse domains including Oil and Gas. Employing Product Line Engineering (PLE) is believed to bring potential benefits with respect to reduced cost, higher productivity, higher quality, and faster time-to-market. However, relatively few industrial field studies are reported regarding the application of PLE to develop large-scale systems, and more specifically CPSs. In this paper, we report about our experiences and insights gained from investigating the application of model-based PLE at a large international organization developing subsea production systems (typical CPSs) to manage the exploitation of oil and gas production fields. We report in this paper 1) how two systematic domain analyses (on requirements engineering and product configuration/derivation) were conducted to elicit CPS PLE requirements and challenges, 2) key results of the domain analysis (commonly observed in other domains), and 3) our initial experience of developing and applying two Model Based System Engineering (MBSE) PLE solution to address some of the requirements and challenges elicited during the domain analyses.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {338–347},
numpages = {10},
keywords = {product line engineering (PLE), requirements engineering, cyber physical system (CPS), domain analysis, model based system engineering},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3382025.3414953,
author = {Abbas, Muhammad and Jongeling, Robbert and Lindskog, Claes and Enoiu, Eduard Paul and Saadatmand, Mehrdad and Sundmark, Daniel},
title = {Product Line Adoption in Industry: An Experience Report from the Railway Domain},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414953},
doi = {10.1145/3382025.3414953},
abstract = {The software system controlling a train is typically deployed on various hardware architectures and must process various signals across those deployments. The increase of such customization scenarios and the needed adherence of the software to various safety standards in different application domains has led to the adoption of product line engineering within the railway domain. This paper explores the current state-of-practice of software product line development within a team developing industrial embedded software for a train propulsion control system. Evidence is collected using a focus group session with several engineers and through inspection of archival data. We report several benefits and challenges experienced during product line adoption and deployment. Furthermore, we identify and discuss improvement opportunities, focusing mainly on product line evolution and test automation.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {3},
numpages = {11},
keywords = {software product-line engineering, overloaded assets, challenges and opportunities},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@article{10.1145/3392509,
author = {Shein, Esther},
title = {Hiring from the Autism Spectrum},
year = {2020},
issue_date = {June 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {63},
number = {6},
issn = {0001-0782},
url = {https://doi.org/10.1145/3392509},
doi = {10.1145/3392509},
abstract = {Companies increasingly are looking to hire people who are on the autism spectrum to fill IT roles.},
journal = {Commun. ACM},
month = {may},
pages = {17–19},
numpages = {3}
}

@inproceedings{10.1145/3530019.3530022,
author = {Graf-Vlachy, Lorenz and Graziotin, Daniel and Wagner, Stefan},
title = {Text and Team: What Article Metadata Characteristics Drive Citations in Software Engineering?},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3530022},
doi = {10.1145/3530019.3530022},
abstract = {Context: Citations are a key measure of scientific performance in most fields, including software engineering. However, there is limited research that studies which characteristics of articles’ metadata (title, abstract, keywords, and author list) are driving citations in this field. Objective: In this study, we propose a simple theoretical model for how citations come to be with respect to article metadata, we hypothesize theoretical linkages between metadata characteristics and citations of articles, and we empirically test these hypotheses. Method: We use multiple regression analyses to examine a data set comprising the titles, abstracts, keywords, and authors of 16,131 software engineering articles published between 1990 and 2020 in 20 highly influential software engineering venues. Results: We find that number of authors, number of keywords, number of question marks and dividers in the title, number of acronyms, abstract length, abstract propositional idea density, and corresponding authors in the core Anglosphere are significantly related to citations. Conclusion: Various characteristics of articles’ metadata are linked to the frequency with which the corresponding articles are cited. These results partially confirm and partially go counter to prior findings in software engineering and other disciplines.},
booktitle = {The International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {20–29},
numpages = {10},
keywords = {author, citations, title, keyword, abstract, metadata},
location = {Gothenburg, Sweden},
series = {EASE 2022}
}

@inproceedings{10.1145/268084.268123,
author = {McFall, Ryan and Stegink, Gordon},
title = {Introductory Computer Science for General Education: Laboratories, Textbooks, and the Internet},
year = {1997},
isbn = {0897918894},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/268084.268123},
doi = {10.1145/268084.268123},
abstract = {Many colleges and universities are experiencing the need to offer an introductory computer science course that meets some but perhaps not all the guidelines suggested for a CS 1 course. This course frequently meets institutional general education requirements and must be more than a literacy course.We discuss the implementation of such a course at Hope College. We outline the goals of the course and some novel features of the implementation, including an emphasis on graphics. We give examples of our approach to laboratories. Finally we show how we utilize the World Wide Web as a substitute for a textbook and for course administration.},
booktitle = {Proceedings of the Twenty-Eighth SIGCSE Technical Symposium on Computer Science Education},
pages = {96–100},
numpages = {5},
location = {San Jose, California, USA},
series = {SIGCSE '97}
}

@article{10.1145/268085.268123,
author = {McFall, Ryan and Stegink, Gordon},
title = {Introductory Computer Science for General Education: Laboratories, Textbooks, and the Internet},
year = {1997},
issue_date = {March 1997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/268085.268123},
doi = {10.1145/268085.268123},
abstract = {Many colleges and universities are experiencing the need to offer an introductory computer science course that meets some but perhaps not all the guidelines suggested for a CS 1 course. This course frequently meets institutional general education requirements and must be more than a literacy course.We discuss the implementation of such a course at Hope College. We outline the goals of the course and some novel features of the implementation, including an emphasis on graphics. We give examples of our approach to laboratories. Finally we show how we utilize the World Wide Web as a substitute for a textbook and for course administration.},
journal = {SIGCSE Bull.},
month = {mar},
pages = {96–100},
numpages = {5}
}

@article{10.1145/3428334,
author = {Hazimeh, Ahmad and Herrera, Adrian and Payer, Mathias},
title = {Magma: A Ground-Truth Fuzzing Benchmark},
year = {2020},
issue_date = {December 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {3},
url = {https://doi.org/10.1145/3428334},
doi = {10.1145/3428334},
abstract = {High scalability and low running costs have made fuzz testing the de facto standard for discovering software bugs. Fuzzing techniques are constantly being improved in a race to build the ultimate bug-finding tool. However, while fuzzing excels at finding bugs in the wild, evaluating and comparing fuzzer performance is challenging due to the lack of metrics and benchmarks. For example, crash count---perhaps the most commonly-used performance metric---is inaccurate due to imperfections in deduplication techniques. Additionally, the lack of a unified set of targets results in ad hoc evaluations that hinder fair comparison. We tackle these problems by developing Magma, a ground-truth fuzzing benchmark that enables uniform fuzzer evaluation and comparison. By introducing real bugs into real software, Magma allows for the realistic evaluation of fuzzers against a broad set of targets. By instrumenting these bugs, Magma also enables the collection of bug-centric performance metrics independent of the fuzzer. Magma is an open benchmark consisting of seven targets that perform a variety of input manipulations and complex computations, presenting a challenge to state-of-the-art fuzzers. We evaluate seven widely-used mutation-based fuzzers (AFL, AFLFast, AFL++, FairFuzz, MOpt-AFL, honggfuzz, and SymCC-AFL) against Magma over 200,000 CPU-hours. Based on the number of bugs reached, triggered, and detected, we draw conclusions about the fuzzers' exploration and detection capabilities. This provides insight into fuzzer performance evaluation, highlighting the importance of ground truth in performing more accurate and meaningful evaluations.},
journal = {Proc. ACM Meas. Anal. Comput. Syst.},
month = {nov},
articleno = {49},
numpages = {29},
keywords = {fuzzing, software security, benchmark, performance evaluation}
}

@article{10.1145/3494519,
author = {Marijan, Dusica and Sen, Sagar},
title = {Industry–Academia Research Collaboration and Knowledge Co-Creation: Patterns and Anti-Patterns},
year = {2022},
issue_date = {July 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {3},
issn = {1049-331X},
url = {https://doi.org/10.1145/3494519},
doi = {10.1145/3494519},
abstract = {Increasing the impact of software engineering research in the software industry and the society at large has long been a concern of high priority for the software engineering community. The problem of two cultures, research conducted in a vacuum (disconnected from the real world), or misaligned time horizons are just some of the many complex challenges standing in the way of successful industry–academia collaborations. This article reports on the experience of research collaboration and knowledge co-creation between industry and academia in software engineering as a way to bridge the research–practice collaboration gap. Our experience spans 14 years of collaboration between researchers in software engineering and the European and Norwegian software and IT industry. Using the participant observation and interview methods, we have collected and afterwards analyzed an extensive record of qualitative data. Drawing upon the findings made and the experience gained, we provide a set of 14 patterns and 14 anti-patterns for industry–academia collaborations, aimed to support other researchers and practitioners in establishing and running research collaboration projects in software engineering.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {45},
numpages = {52},
keywords = {patterns, collaboration model, software engineering, anti-patterns, knowledge transfer, technology transfer, Industry-academia collaboration, collaboration gap, research co-creation, research collaboration}
}

@inproceedings{10.1145/3395032.3395327,
author = {Ghit, Bogdan and Poggi, Nicolas and Rosen, Josh and Xin, Reynold and Boncz, Peter},
title = {SparkFuzz: Searching Correctness Regressions in Modern Query Engines},
year = {2020},
isbn = {9781450380010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3395032.3395327},
doi = {10.1145/3395032.3395327},
abstract = {With more than 1200 contributors, Apache Spark is one of the most actively developed open source projects. At this scale and pace of development, mistakes are bound to happen. In this paper we present SparkFuzz, a toolkit we developed at Databricks for uncovering correctness errors in the Spark SQL engine. To guard the system against correctness errors, SparkFuzz takes a fuzzing approach to testing by generating random data and queries. Spark-Fuzz executes the generated queries on a reference database system such as PostgreSQL which is then used as a test oracle to verify the results returned by Spark SQL. We explain the approach we take to data and query generation and we analyze the coverage of SparkFuzz. We show that SparkFuzz achieves its current maximum coverage relatively fast by generating a small number of queries.},
booktitle = {Proceedings of the Workshop on Testing Database Systems},
articleno = {1},
numpages = {6},
location = {Portland, Oregon},
series = {DBTest '20}
}

@inproceedings{10.1145/3533406.3533410,
author = {Alvarez de la Vega, Juan Carlos and Cecchinato, Marta E. and Rooksby, John},
title = {Design Opportunities for Freelancing Platforms: Online Freelancers’ Views on a Worker-Centred Design Fiction},
year = {2022},
isbn = {9781450396554},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3533406.3533410},
doi = {10.1145/3533406.3533410},
abstract = { Freelancing platforms, such as Upwork and Fiverr, have become a viable source of work for millions of freelancers worldwide. However, these gig economy systems are not typically designed in ways that centre workers’ preferences and wellbeing. In this paper, we describe the development and evaluation of ‘Freelance Grow,’ a design fiction portraying a freelancing platform that prioritises freelancers’ professional development and peer support. The design fiction was informed by a systematic literature assessment, using recommendations from twenty-six sources for improving online freelancers’ experiences. We then used the design fiction in focus groups with 23 online freelancers to investigate their views on the ideas suggested in our design fiction. Based upon a thematic analysis of the focus group transcripts, we present three opportunities and considerations for designing systems that further enable freelancers’ work autonomy, entrepreneurial development, and peer support. Ultimately, we contribute an expanded understanding of design approaches to support online freelancers in the gig economy.},
booktitle = {2022 Symposium on Human-Computer Interaction for Work},
articleno = {12},
numpages = {19},
keywords = {Online Freelancing Platforms, Worker-Centered Design, Gig Economy, Upwork, Design Fiction},
location = {Durham, NH, USA},
series = {CHIWORK 2022}
}

@article{10.1145/232069.232088,
author = {Ramachandran, Muthu},
title = {Requirements-Driven Software Test: A Process-Oriented Approach},
year = {1996},
issue_date = {July 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {4},
issn = {0163-5948},
url = {https://doi.org/10.1145/232069.232088},
doi = {10.1145/232069.232088},
abstract = {Testing is essential for proving the quality of all products. It is expensive and hard to test interactive multimedia systems. This paper proposes a model for the test process, and investigates the possibility of deriving test cases from system models and requirement analysis techniques such as requirements definition and specification. We believe this will allow early detection of errors thereby reducing the cost for testing. These test cases can also be used as guidelines on design for testability. Effectiveness of the test tools depends on the careful selection of test cases.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {jul},
pages = {66–70},
numpages = {5}
}

@inproceedings{10.1145/3059009.3059019,
author = {Buffardi, Kevin},
title = {Comparing Remote and Co-Located Interaction in Free and Open Source Software Engineering Projects},
year = {2017},
isbn = {9781450347044},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3059009.3059019},
doi = {10.1145/3059009.3059019},
abstract = {By working on open source software projects, software engineering students can benefit from working on more realistic products than traditional, educational programming assignments. However, careers in software engineering demand learning how to work within a professional environment and how to follow software development processes. We studied the impact of students' interactions with external collaborators on open source projects and found many similar outcomes between those who communicated remotely and those who communicated face-to-face. However, we also discovered that face-to-face interactions with local software professionals following the Localized Free and Open Source (LFOSS) model had particular advantages in teaching Agile methods, holding students accountable, and introducing professional networking opportunities.},
booktitle = {Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {22–27},
numpages = {6},
keywords = {communication, interaction, localized free and open source software (lfoss), remote, software engineering, agile, co-located},
location = {Bologna, Italy},
series = {ITiCSE '17}
}

