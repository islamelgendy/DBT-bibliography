@inproceedings{10.1145/2745802.2745816,
author = {Liu, Gaoxuan and Rong, Guoping and Zhang, He and Shan, Qi},
title = {The Adoption of Capture-Recapture in Software Engineering: A Systematic Literature Review},
year = {2015},
isbn = {9781450333504},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2745802.2745816},
doi = {10.1145/2745802.2745816},
abstract = {Context: Capture-recapture method has long been adopted in software engineering as a relatively objective way for defect estimation. While many relevant studies have been carried out to evaluate various capture-recapture models and estimators, there still lacks common understanding on the adoption status of the method in software engineering. It is necessary to systematically collect empirical evidence of Capture-recapture adoption hence form necessary understanding on the method.Objective: This study aims to synthesize relevant primary studies on the adoption of capture-recapture method in software engineering, and try to identify possible gaps between the state-of-practice and the state-of-art so as to provide clues for future research.Method: By following the guidelines of Kitchenham, we conducted a Systematic Literature Review(SLR) on studies of the adoption of capture-recapture method in software engineering.Results: From 5 common digital libraries, we retrieved 506 published articles, among them 44 were identified as relevant primary studies. We identified 18 capture-recapture estimators under 4 basic models. Types of the currently existing studies as well as the relevant influencing factors to adoption of the capture-recapture method are also discussed.Conclusion: Results show that there are no conclusive decisions on the best capture-recapture models and estimators. Besides, the number of inspectors and their capability to detect defects as well as the difficulty to detect defects are most critical influencing factors. In addition, lacking of industrial application may be the major issue of current adoption status of capture-recapture method in software engineering.},
booktitle = {Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering},
articleno = {15},
numpages = {13},
keywords = {capture-recapture method, defect estimation, systematic literature review, software inspection},
location = {Nanjing, China},
series = {EASE '15}
}

@article{10.1145/1218776.1218777,
author = {ACM SIGSOFT Software Engineering Notes staff},
title = {Frontmatter (TOC, Miscellaneous Material)},
year = {2006},
issue_date = {November 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {6},
issn = {0163-5948},
url = {https://doi.org/10.1145/1218776.1218777},
doi = {10.1145/1218776.1218777},
journal = {SIGSOFT Softw. Eng. Notes},
month = {nov},
pages = {0},
numpages = {36}
}

@inproceedings{10.1109/SE4Science.2019.00010,
author = {Vogel, Thomas and Druskat, Stephan and Scheidgen, Markus and Draxl, Claudia and Grunske, Lars},
title = {Challenges for Verifying and Validating Scientific Software in Computational Materials Science},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/SE4Science.2019.00010},
doi = {10.1109/SE4Science.2019.00010},
abstract = {Many fields of science rely on software systems to answer different research questions. For valid results researchers need to trust the results scientific software produces, and consequently quality assurance is of utmost importance. In this paper we are investigating the impact of quality assurance in the domain of computational materials science (CMS). Based on our experience in this domain we formulate challenges for validation and verification of scientific software and their results. Furthermore, we describe directions for future research that can potentially help dealing with these challenges.},
booktitle = {Proceedings of the 14th International Workshop on Software Engineering for Science},
pages = {25–32},
numpages = {8},
keywords = {computational materials science, scientific software, verification and validation},
location = {Montreal, Quebec, Canada},
series = {SE4Science '19}
}

@inproceedings{10.1109/ICSE.2019.00108,
author = {Kim, Jinhan and Feldt, Robert and Yoo, Shin},
title = {Guiding Deep Learning System Testing Using Surprise Adequacy},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE.2019.00108},
doi = {10.1109/ICSE.2019.00108},
abstract = {Deep Learning (DL) systems are rapidly being adopted in safety and security critical domains, urgently calling for ways to test their correctness and robustness. Testing of DL systems has traditionally relied on manual collection and labelling of data. Recently, a number of coverage criteria based on neuron activation values have been proposed. These criteria essentially count the number of neurons whose activation during the execution of a DL system satisfied certain properties, such as being above predefined thresholds. However, existing coverage criteria are not sufficiently fine grained to capture subtle behaviours exhibited by DL systems. Moreover, evaluations have focused on showing correlation between adversarial examples and proposed criteria rather than evaluating and guiding their use for actual testing of DL systems. We propose a novel test adequacy criterion for testing of DL systems, called Surprise Adequacy for Deep Learning Systems (SADL), which is based on the behaviour of DL systems with respect to their training data. We measure the surprise of an input as the difference in DL system's behaviour between the input and the training data (i.e., what was learnt during training), and subsequently develop this as an adequacy criterion: a good test input should be sufficiently but not overtly surprising compared to training data. Empirical evaluation using a range of DL systems from simple image classifiers to autonomous driving car platforms shows that systematic sampling of inputs based on their surprise can improve classification accuracy of DL systems against adversarial examples by up to 77.5% via retraining.},
booktitle = {Proceedings of the 41st International Conference on Software Engineering},
pages = {1039–1049},
numpages = {11},
keywords = {deep learning systems, test adequacy},
location = {Montreal, Quebec, Canada},
series = {ICSE '19}
}

@article{10.1145/3204459,
author = {Chen, Tao and Li, Ke and Bahsoon, Rami and Yao, Xin},
title = {FEMOSAA: Feature-Guided and Knee-Driven Multi-Objective Optimization for Self-Adaptive Software},
year = {2018},
issue_date = {April 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3204459},
doi = {10.1145/3204459},
abstract = {Self-Adaptive Software (SAS) can reconfigure itself to adapt to the changing environment at runtime, aiming to continually optimize conflicted nonfunctional objectives (e.g., response time, energy consumption, throughput, cost, etc.). In this article, we present Feature-guided and knEe-driven Multi-Objective optimization for Self-Adaptive softwAre (FEMOSAA), a novel framework that automatically synergizes the feature model and Multi-Objective Evolutionary Algorithm (MOEA) to optimize SAS at runtime. FEMOSAA operates in two phases: at design time, FEMOSAA automatically transposes the engineers’ design of SAS, expressed as a feature model, to fit the MOEA, creating new chromosome representation and reproduction operators. At runtime, FEMOSAA utilizes the feature model as domain knowledge to guide the search and further extend the MOEA, providing a larger chance for finding better solutions. In addition, we have designed a new method to search for the knee solutions, which can achieve a balanced tradeoff. We comprehensively evaluated FEMOSAA on two running SAS: One is a highly complex SAS with various adaptable real-world software under the realistic workload trace; another is a service-oriented SAS that can be dynamically composed from services. In particular, we compared the effectiveness and overhead of FEMOSAA against four of its variants and three other search-based frameworks for SAS under various scenarios, including three commonly applied MOEAs, two workload patterns, and diverse conflicting quality objectives. The results reveal the effectiveness of FEMOSAA and its superiority over the others with high statistical significance and nontrivial effect sizes.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {jun},
articleno = {5},
numpages = {50},
keywords = {multi-objective optimization, Feature model, performance engineering, self-adaptive system, search-based software engineering, multi-objective evolutionary algorithm}
}

@article{10.1145/235969.235983,
author = {Zucconi, Lin and Reed, Karl},
title = {Building Testable Software},
year = {1996},
issue_date = {Sept. 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {5},
issn = {0163-5948},
url = {https://doi.org/10.1145/235969.235983},
doi = {10.1145/235969.235983},
abstract = {This paper examines a connection between well known specification, design, implementation methodologies and test-design which appears not to have been previously well-formulated. We refer to the fact that the use of finite state machines (FSMs) in each development phase (specification, design, implementation and testing) is well known and documented. However, despite the fact that much of this work is more than twenty years old, there appears to be no detailed proposal for a consistent FSM-based approach be used across all development phases for other than very specific application types. We suggest that the adoption of a systematic FSM-based approach across all phases, including implementation, may allow a number of major problems in software development to be either eliminated or simplified. In this way, testable, highly dependable systems can be produced. In such systems, behaviour is explicitly defined, built, and tested using both functional and structural methods. Undesired behaviours can be found and eliminated, and abnormal or unexpected input explicitly handled. We discuss the issues we consider to be involved, and the benefits which we expect may be gained. We also identify those areas where further work appears to be required.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {sep},
pages = {51–55},
numpages = {5}
}

@article{10.1145/2994205.2994214,
author = {Sharma, Richa and Sureka, Ashish},
title = {A Nine Year Story of the India Software Engineering Conference from 2008 to 2016},
year = {2016},
issue_date = {September 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {5},
issn = {0163-5948},
url = {https://doi.org/10.1145/2994205.2994214},
doi = {10.1145/2994205.2994214},
abstract = {The India Software Engineering Conference (ISEC) is an annual conference in the field of Software Engineering (SE) in India. ISEC started in the year 2008 and completed 9 years in 2016. The ISEC conference has evolved into a high-quality academic event for SE researchers from universities and industry in India with considerable international participation. Assessment and evaluation of ISEC conference quality, status and evolution is important for the national SE scientific community, ISEC steering committee, sponsors and science and technology-related government bodies. In this paper, we conduct scientific paper publication mining and scientometric and bibliometric analysis of 9 years of ISEC publications and programs. We conduct an in-depth multi-dimensional analysis of the conference across various aspects such as a summary of 9 years of ISEC programs (paper submission data, tutorials, workshops, keynotes, invited talks, geographical location, program and general chairs), author-affiliation-based geographical contribution (analysis at the international and national levels), topic analysis, university and industry collaborations, contributions across university types in India, prolific and new authors, gender equality and imbalance, program committee characteristics, open-source or closed-source datasets and citation-based impact. We also present our recommendations for future editions of the ISEC based on our comprehensive analysis study presented in this paper.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {nov},
pages = {31–44},
numpages = {14},
keywords = {Conference Citation and Impact, Bibliometric Analysis, Software Engineering, Scientific Paper Publication Mining, Research Assessment, Conference Review, University and Industry Collaboration}
}

@inproceedings{10.1145/2598394.2609849,
author = {Shackelford, Mark R.N. and Simons, Christopher L.},
title = {Metaheuristic Design Pattern: Interactive Solution Presentation},
year = {2014},
isbn = {9781450328814},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2598394.2609849},
doi = {10.1145/2598394.2609849},
booktitle = {Proceedings of the Companion Publication of the 2014 Annual Conference on Genetic and Evolutionary Computation},
pages = {1431–1434},
numpages = {4},
keywords = {interactive search},
location = {Vancouver, BC, Canada},
series = {GECCO Comp '14}
}

@article{10.1145/3430905.3430911,
author = {Miller, Jeffrey and Davis, Karen C. and White, Shana V. and Parke, Robert},
title = {As a CS Educator, How Do You Think We Can Address Inequity Issues That Exist in the Field?},
year = {2020},
issue_date = {October 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {4},
issn = {0097-8418},
url = {https://doi.org/10.1145/3430905.3430911},
doi = {10.1145/3430905.3430911},
abstract = {We asked several CS education researchers to offer brief remarks (about 200 words) to spark discussion and provide ideas for actions we can all take to address inequity issues. Two responses are included below.},
journal = {SIGCSE Bull.},
month = {oct},
pages = {8–9},
numpages = {2}
}

@inproceedings{10.1145/3290621.3290835,
author = {Mozgovoy, Maxim and Pyshkin, Evgeny},
title = {A Comprehensive Approach to Quality Assurance in a Mobile Game Project},
year = {2018},
isbn = {9781450361767},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290621.3290835},
doi = {10.1145/3290621.3290835},
abstract = {Quality assurance is an integral part of software development process. Game projects possess own distinctive traits that affect all stages of work. In this paper, we share the lessons learned during a three year-long mobile game development project. We discuss the conceptual architecture for mobile game quality assurance through the perspective of techniques that turned out to be most efficient for us, including manual testing, automated and manual runtime bug reporting, Crashlytics-supported crash analysis, automated smoke testing, and playtesting. We analyze how these activities address typical game-specific mobile development and testing issues, and why they can be recommended for game projects, as well as for wider range of mobile applications.},
booktitle = {Proceedings of the 14th Central and Eastern European Software Engineering Conference Russia},
articleno = {12},
numpages = {8},
keywords = {usability, Software development, automated testing, continuous integration, mobile game, quality assurance},
location = {Moscow, Russian Federation},
series = {CEE-SECR '18}
}

@article{10.1145/3448992.3448996,
author = {Bainomugisha, Engineer and Hebig, Regina and R. V. Chaudron, Michel},
title = {Emerging Software Engineering Research Networks in (East) Africa},
year = {2021},
issue_date = {April 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {46},
number = {2},
issn = {0163-5948},
url = {https://doi.org/10.1145/3448992.3448996},
doi = {10.1145/3448992.3448996},
abstract = {Software engineering (SE) researchers and research networks from emerging communities are often not visible in already established Software Engineering venues for a multitude of reasons. This limits the opportunities and mutual bene ts that can arise from collaborations between global and emerging Software Engineer- ing networks. This article focuses on a rst attempt to provide a map of the African software engineering research community with focus on the networks of two big East African Universities. We hope that this very initial mapping e ort will help to raise aware- ness in the international community about the variety of software engineering research in Africa. We formulate some suggestions for making our academic Software Engineering community more inclusive.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {apr},
pages = {18–22},
numpages = {5}
}

@article{10.5555/2382887.2382902,
author = {Hall, Morgan and Laughter, Keri and Brown, Jessica and Day, Chelynn and Thatcher, Christopher and Bryce, Renee},
title = {An Empirical Study of Programming Bugs in CS1, CS2, and CS3 Homework Submissions},
year = {2012},
issue_date = {December 2012},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {28},
number = {2},
issn = {1937-4771},
abstract = {In this work, we use the IEEE Standard for Software Anomalies to classify the types of bugs that CS1, CS2, and CS3 students submit on programming assignments over the course of one semester. We also classify the types of bugs that students bring to a Computer Science Tutor Lab so that we can compare the types of bugs that students seek help for in comparison to those in their homework submissions. Using nine high level categories, Logic problems are the most common type of problem brought to the tutor lab (58% of tutor visits) and also the most frequent as observed on homework submissions (30%). However, the frequency of Logic problems brought to the tutor lab was quite higher than those in homework submissions. Computational and Data problems accounted for much of this difference. These results are being used in our ongoing work that strives to help students to avoid the most common bugs that are brought to our tutor lab and submitted on assignments.},
journal = {J. Comput. Sci. Coll.},
month = {dec},
pages = {87–94},
numpages = {8}
}

@inproceedings{10.1109/SE4Science.2019.00014,
author = {Lin, Xuanyi and Simon, Michelle and Niu, Nan},
title = {Releasing Scientific Software in GitHub: A Case Study on SWMM2PEST},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/SE4Science.2019.00014},
doi = {10.1109/SE4Science.2019.00014},
abstract = {Release engineering involves code development, integration, testing, and software delivery. It has been widely applied to deliver high-quality software to users. While release engineering is a widespread practice in the software industry, there have been very few studies on the release engineering pipeline of scientific software. To shorten this gap, we present a case study in this paper to show a GitHub-driven release workflow on SWMM2PEST, a software system automating parameter calibration for the U.S. EPA's Storm Water Management Model (SWMM). Moreover, we analyze software version updates and requirements changes to develop strategies for improving the ongoing releases. The feasibility of improvement strategies is demonstrated by our consecutively released versions of SWMM2PEST. The results offered insights into the continuous release of scientific software.},
booktitle = {Proceedings of the 14th International Workshop on Software Engineering for Science},
pages = {47–50},
numpages = {4},
keywords = {software engineering, release engineering, release scientific software, SWMM2PEST, SWMM, GitHub},
location = {Montreal, Quebec, Canada},
series = {SE4Science '19}
}

@inproceedings{10.1145/3460120.3484787,
author = {Nagy, Stefan and Nguyen-Tuong, Anh and Hiser, Jason D. and Davidson, Jack W. and Hicks, Matthew},
title = {Same Coverage, Less Bloat: Accelerating Binary-Only Fuzzing with Coverage-Preserving Coverage-Guided Tracing},
year = {2021},
isbn = {9781450384544},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460120.3484787},
doi = {10.1145/3460120.3484787},
abstract = {Coverage-guided fuzzing's aggressive, high-volume testing has helped reveal tens of thousands of software security flaws. While executing billions of test cases mandates fast code coverage tracing, the nature of binary-only targets leads to reduced tracing performance. A recent advancement in binary fuzzing performance is Coverage-guided Tracing (CGT), which brings orders-of-magnitude gains in throughput by restricting the expense of coverage tracing to only when new coverage is guaranteed. Unfortunately, CGT suits only a basic block coverage granularity---yet most fuzzers require finer-grain coverage metrics: edge coverage and hit counts. It is this limitation which prohibits nearly all of today's state-of-the-art fuzzers from attaining the performance benefits of CGT.This paper tackles the challenges of adapting CGT to fuzzing's most ubiquitous coverage metrics. We introduce and implement a suite of enhancements that expand CGT's introspection to fuzzing's most common code coverage metrics, while maintaining its orders-of-magnitude speedup over conventional always-on coverage tracing. We evaluate their trade-offs with respect to fuzzing performance and effectiveness across 12 diverse real-world binaries (8 open- and 4 closed-source). On average, our coverage-preserving CGT attains near-identical speed to the present block-coverage-only CGT, UnTracer; and outperforms leading binary- and source-level coverage tracers QEMU, Dyninst, RetroWrite, and AFL-Clang by 2--24x, finding more bugs in less time.},
booktitle = {Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
pages = {351–365},
numpages = {15},
keywords = {code coverage, binaries, fuzzing},
location = {Virtual Event, Republic of Korea},
series = {CCS '21}
}

@article{10.1145/352595.352596,
author = {Anderson, Kenneth M. and Taylor, Richard N. and Whitehead, E. James},
title = {Chimera: Hypermedia for Heterogeneous Software Development Enviroments},
year = {2000},
issue_date = {July 2000},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3},
issn = {1046-8188},
url = {https://doi.org/10.1145/352595.352596},
doi = {10.1145/352595.352596},
abstract = {Emerging software development environments are characterized by heterogeneity: they are composed of diverse object stores, user interfaces, and tools. This paper presents an approach for providing hypermedia services in this heterogeneous setting. Central notions of the approach include the following: anchors are established with respect to interactive views of objects, rather than the objects themselves; composable, n-ary links can be established between anchors on different views of objects which may be stored in distinct object bases; viewers may be implemented in different programming languages; and, hypermedia services are provided to multiple, concurrently active, viewers. The paper describes the approach, supporting architecture, and lessons  learned. Related work in the areas of supporing heterogeneity and hypermedia data modeling is discussed. The system has been employed in a variety of contexts including research, development, and education.},
journal = {ACM Trans. Inf. Syst.},
month = {jul},
pages = {211–245},
numpages = {35},
keywords = {hypermedia system architectures, open hypermedia systems, heterogeneous hypermedia, link servers, software development environments}
}

@inproceedings{10.1145/1558607.1558680,
author = {Ma, Zhanshan (Sam) and Krings, Axel W. and Millar, Richard C.},
title = {Introduction of First Passage Time (FPT) Analysis for Software Reliability and Network Security},
year = {2009},
isbn = {9781605585185},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1558607.1558680},
doi = {10.1145/1558607.1558680},
abstract = {The study of the First Passage Time (FPT) problem (also known as first passage problem, FPP) started more than a century ago, but its diverse applications in science and engineering mostly emerged in the last two to three decades. Assuming that X(t) is a one-dimensional stochastic process, the First Passage Time is defined as the time (T) when X(t) first crosses a threshold. Engineering reliability is obviously a suitable application domain, and indeed applications such as optimal dam design in hydrology and analysis of structural failure in civil and mechanical engineering are typical examples. Although we envision that the FPT problem has great potential in network and software reliability, it should be more useful for network security and survivability because the approaches developed for the FPT problem are mostly analytical. The assumption for this inference is that in reliability analysis, experimental or historical data are often more readily available, which makes statistical approaches such as survival analysis more convenient and likely more realistic. In contrast, data is generally more difficult to obtain in security and survivability analyses, and analytical approaches can be leveraged to play more important roles. Furthermore, security and survivability often have to deal with malicious actions that may be driven by sophisticated cognition and behavioral processes, which are highly variable over time and very difficult to detect with short term data. If the behavior of an intruder can be characterized with some stochastic process such as Brownian motion, then the FPT approach may be applied to find the closed-form solution of the probability density function (PDF) of the first passage time, which can be the time when the system breaks down or when the hacker is successful in compromising a network. In addition, the solutions to FPT depend on boundary and initial conditions of the corresponding partial differential equations, and they also describe the evolution of PDF over time. This may suggest that it is possible to model the behavior changes of an intruder over time and circumstances. Another advantage of FPT analysis is that it may help solve some non-Markov stochastic process problems in reliability analysis and survival analysis. In this article, we first briefly introduce the FPT problem with Brownian motion as an example, and then suggest its potential applications in software reliability and network security.},
booktitle = {Proceedings of the 5th Annual Workshop on Cyber Security and Information Intelligence Research: Cyber Security and Information Intelligence Challenges and Strategies},
articleno = {63},
numpages = {6},
keywords = {intrusion detection, software reliability, network security, first passage time (FPT), network survivability, Fokker-Planck equation, mean first passage time (MFPT)},
location = {Oak Ridge, Tennessee, USA},
series = {CSIIRW '09}
}

@inproceedings{10.1145/3032970.3032972,
author = {Zhang, Li Lyna and Liang, Chieh-Jan Mike and Zhang, Wei and Chen, Enhong},
title = {Towards A Contextual and Scalable Automated-Testing Service for Mobile Apps},
year = {2017},
isbn = {9781450349079},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3032970.3032972},
doi = {10.1145/3032970.3032972},
abstract = {As app quality is a deciding factor for user base growth, many automated testing services are available to reduce app developers' burden. However, we argue that these existing services do not sufficiently bring real-world contexts into app testing, which reduces the visibility into how an unreleased app would perform in the wild. In fact, this is a challenging problem that current emulator-based or device-based testing services cannot properly or scalably address. This paper envisions a split-execution model for building automated and contextual testing services for mobile apps. This model allows the service to evolve over time, by adopting new algorithms and recruiting new physical devices. Finally, preliminary results from a prototype demonstrate the potential and feasibility of our proposed architecture.},
booktitle = {Proceedings of the 18th International Workshop on Mobile Computing Systems and Applications},
pages = {97–102},
numpages = {6},
keywords = {Contextual Fuzzing, Device labs, App testing, Split Execution},
location = {Sonoma, CA, USA},
series = {HotMobile '17}
}

@inproceedings{10.1145/3495018.3495135,
author = {Feng, Xianbin and Ding, Rui and Chai, Baojie and Huo, Tingting},
title = {Multi-Objective Heuristic Information Optimization Algorithm for Path Coverage-Oriented Test Data Generation},
year = {2021},
isbn = {9781450385046},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3495018.3495135},
doi = {10.1145/3495018.3495135},
booktitle = {2021 3rd International Conference on Artificial Intelligence and Advanced Manufacture},
pages = {650–654},
numpages = {5},
location = {Manchester, United Kingdom},
series = {AIAM2021}
}

@inproceedings{10.1145/3219104.3229290,
author = {Wang, Yige and Huang, Ruizhu and Xu, Weijia},
title = {Authentication with User Driven Web Application for Accessing Remote Resources},
year = {2018},
isbn = {9781450364461},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3219104.3229290},
doi = {10.1145/3219104.3229290},
abstract = {With the emerging of data-driven analysis and data science, the needs of high-performance computing resources and cyberinfrastructure (CI) have been widely spread across almost all domain fields in academia. While CI providers have continued success with the infrastructure-as-a-service model (IaaS), there are increasing demands to offer more service models for diverse users and use cases. We have proposed a web application framework, which empowers users running their own analytic workflows as a web service that is accessible by other users authenticated with existing credentials. Through this framework, ad-hoc analysis routines can be described and wrapped in a workflow model that is shareable and re-useable. While the framework offers a new way for any user with valid credential to access and utilize remote resources, there are cases where more flexible authentication methods can further lower the access barrier of HPC resources. In this paper, we detail credential management of this framework and report our preliminary works on enabling temporary access to the remote resources including using dynamic generated credentials and social logins.},
booktitle = {Proceedings of the Practice and Experience on Advanced Research Computing},
articleno = {2},
numpages = {7},
keywords = {Cyberinfrastructure, User driven web application, authentication},
location = {Pittsburgh, PA, USA},
series = {PEARC '18}
}

@inproceedings{10.1145/3266237.3266252,
author = {Paiva, Sofia Costa and Carvalho, D\'{a}rlinton Barbosa Feres},
title = {Software Creation Workshop: A Capstone Course for Business-Oriented Software Engineering Teaching},
year = {2018},
isbn = {9781450365031},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3266237.3266252},
doi = {10.1145/3266237.3266252},
abstract = {Context: The teaching of software development in computer science courses is distributed over several subjects such as Software Engineering (SE), Human-Computer Interaction (HCI), Database, etc. However, several studies indicate a deficiency in student training regarding the practical application of concepts and techniques required to develop and evolve of software with quality. Objective: This article presents an approach to teaching software creation as a capstone course to provide a practical and business-oriented experience for students in computer science programs. Method: Based on literature review, a theoretical basis is used to establish the proposed approach. This approach brings together concepts from diverse subjects such as SE, HCI, and entrepreneurship. From a brief introduction, the students, working in a group, employ the concepts of structuring software development projects, using the SCRUM agile development process, user-centered design (personas) and software evaluation in the development of a hands-on project. The project result will be submitted to an entrepreneurship competition. Questionnaires were used to verify students' perceptions regarding the proposed course and their experience. Results: The proposed approach is detailed with its techniques and operation for a course with an estimated hour load of 72h over a semester. From its application in two classes, it was possible to verify that it presents challenges considered significant for the students and allowed them to practice concepts that they believe to be very important about software development. The use of entrepreneurship competition was relevant regarding motivation and development of business-oriented soft skills. Conclusion: The results has shown that the proposed approach can be a successful and desirable educational practice for a computer science course. It allows both to integrate and practice technical skills as well as to develop other desirable soft skills.},
booktitle = {Proceedings of the XXXII Brazilian Symposium on Software Engineering},
pages = {280–288},
numpages = {9},
keywords = {software engineering, capstone projects, entrepreneurship, capstone course, teaching, business-oriented soft skills},
location = {Sao Carlos, Brazil},
series = {SBES '18}
}

