"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Hashing Fuzzing: Introducing Input Diversity to Improve Crash Detection","H. D. Menendez; D. Clark","Computer Science Department, Middlesex University London, London, U.K.; Computer Science Department, University College London, London, U.K.",IEEE Transactions on Software Engineering,"16 Sep 2022","2022","48","9","3540","3553","The utility of a test set of program inputs is strongly influenced by its diversity and its size. Syntax coverage has become a standard proxy for diversity. Although more sophisticated measures exist, such as proximity of a sample to a uniform distribution, methods to use them tend to be type dependent. We use r-wise hash functions to create a novel, semantics preserving, testability transformation for C programs that we call HashFuzz. Use of HashFuzz improves the diversity of test sets produced by instrumentation-based fuzzers. We evaluate the effect of the HashFuzz transformation on eight programs from the Google Fuzzer Test Suite using four state-of-the-art fuzzers that have been widely used in previous research. We demonstrate pronounced improvements in the performance of the test sets for the transformed programs across all the fuzzers that we used. These include strong improvements in diversity in every case, maintenance or small improvement in branch coverage – up to 4.8 perent improvement in the best case, and significant improvement in unique crash detection numbers – between 28 to 97 perent increases compared to test sets for untransformed programs.","1939-3520","","10.1109/TSE.2021.3100858","Nvidia; Engineering and Physical Sciences Research Council(grant numbers:InfoTestSS EP/P005888/1); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9502543","System testing;fuzz testing;HashFuzz;universal hashing","Instruments;Hash functions;Testing;Software;System testing;Fuzzing;Generators","","5","","60","IEEE","30 Jul 2021","","","IEEE","IEEE Journals"
"Inferring Relations Among Test Programs in Microservices Applications","E. De Angelis; G. De Angelis; A. Pellegrini; M. Proietti","IASI-CNR, Rome, Italy; IASI-CNR, Rome, Italy; IASI-CNR, Rome, Italy; IASI-CNR, Rome, Italy",2021 IEEE International Conference on Service-Oriented System Engineering (SOSE),"15 Oct 2021","2021","","","114","123","The emergence of the microservices-oriented architectural style calls for novel methodologies and technological frameworks that support the design, development, and main-tainance of applications structured according to this new style. In this paper, we consider the issue of designing suitable strategies for the governance and the automation of testing activities within the microservices paradigm. We focus on the problem of discovering relations between test programs that help avoiding to re-run all the available test suites each time one of its constituents evolves. We propose an analysis technique, based on symbolic execution of test programs, which is able to collect information about the invocations of local and remote APIs performed when running such programs. Symbolic execution enables the analysis of sets of executions corresponding to different input data, and hence it is also suitable for parametric test programs. The information extracted by symbolic execution is processed by a rule-based automated reasoning engine, which infers dependencies and similarities among test programs. In particular, test programs are considered similar if they involve the same microservice instance, or they connect to the same remote API, or they locally activate overlapping APIs, or they raise similar kinds of errors. We show the viability of our approach by presenting a case study within the context of a real-world microservice application that implements an open-source educational platform.","2642-6587","978-1-6654-3477-5","10.1109/SOSE52839.2021.00018","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9564098","software testing;microservices architecture;test program similarity;symbolic execution;automated reasoning","Automation;Service-oriented systems engineering;Conferences;Cognition;Data mining;Open source software;Engines","","2","","41","IEEE","15 Oct 2021","","","IEEE","IEEE Conferences"
"Structural Coverage of LTL Requirements for Learning-based Testing","H. A. Quddus; M. A. Sindhu","Department of Computer Sciences, Quaid-i-Azam University, Islamabad, Pakistan; Department of Computer Sciences, Quaid-i-Azam University, Islamabad, Pakistan",2022 International Conference on IT and Industrial Technologies (ICIT),"30 Dec 2022","2022","","","1","6","Learning-based testing (LBT) is an innovative variant of black-box testing in which test cases are derived by making use of automaton learning and model checking algorithms along with providing Linear Temporal Logic (LTL) requirements of the System Under Test (SUT). There is a scarcity of test coverage metrics for black-box testing in general and LBT in particular. Structural coverage of an LTL requirement is a mechanism that gauges how well a test suite has exercised the structure of the LTL formula. In contrast to the code-driven or model-driven coverage metrics, this coverage provides implementation-independent coverage corresponding to an LTL requirement. This has been defined and used in the literature for black-box testing; however, not for LBT. This paper analyzes and implements the structural coverage criteria for the LTL requirements for evaluating the LBT-generated test suite. We evaluate the structural coverage metrics using the Cruise Control System (CCS) and the ATM systems. The results show that the LBT test suite provides complete structural coverage of the safety LTL requirements in terms of Requirement Coverage (RC), Antecedent Coverage (AC), and Unique First Cause Coverage (UFCC). In the case of liveness LTL requirements, relatively less structural coverage is achieved by the LBT tests, possibly because of the involvement of loops in tests.","","978-1-6654-8945-4","10.1109/ICIT56493.2022.9989218","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9989218","LBT (Learning-based Testing);LTL (Linear Temporal Logic) requirements;RC (Requirement Coverage);AC (Antecedent Coverage);UFCC (Unique First Cause Coverage)","Measurement;Learning automata;Closed box;Model checking;Safety;Testing;Cruise control","","","","22","IEEE","30 Dec 2022","","","IEEE","IEEE Conferences"
"Weaving Context Sensitivity into Test Suite Construction","H. Wang; W. K. Chan","Department of Computer Science, University of Hong Kong, Hong Kong, China; Department of Computer Science, City University of Hong Kong, Hong Kong, China",2009 IEEE/ACM International Conference on Automated Software Engineering,"18 Mar 2010","2009","","","610","614","Context-aware applications capture environmental changes as contexts and self-adapt their behaviors dynamically. Existing testing research has not explored context evolutions or their patterns inherent to individual test cases when constructing test suites. We propose the notation of context diversity as a metric to measure how many changes in contextual values of individual test cases. In this paper, we discuss how this notion can be incorporated in a test case generation process by pairing it with coverage-based test data selection criteria.","1938-4300","978-1-4244-5259-0","10.1109/ASE.2009.79","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5431725","context diversity;software testing;context-aware programe","Weaving;Software testing;Computer science;Application software;Software engineering;Automatic testing;Middleware;Physics computing;Working environment noise;Programming profession","","12","","15","IEEE","18 Mar 2010","","","IEEE","IEEE Conferences"
"Optimal Synchronizable Test Sequence from Test Segments","J. Chen; L. Duan","School of Computer Science, University of Windsor, Windsor, ONT, Canada; School of Computer Science, University of Windsor, Windsor, ONT, Canada",2006 Sixth International Conference on Quality Software (QSIC'06),"19 Dec 2006","2006","","","266","273","Finite-state-machine-based conformance testing has been extensively studied in the literature in the context of centralized test architecture. With a distributed test architecture which involves multiple remote testers, the application of a test sequence may encounter controllability problems. One of the possible solutions to overcome this problem is to carefully select a suitable test sequence so that its application to the implementation under test will not involve controllability problems. A common problem in doing so is to generate a test sequence, avoiding controllability problems during its application in the test procedure, so that all given test segments have been contained in the test sequence. In this paper, we present an optimal solution to this problem, taking into account possible overlaps among the test segments","2332-662X","0-7695-2718-3","10.1109/QSIC.2006.46","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4032294","conformance testing;finite state machine;test sequence;distributed testing;unique input/output sequence.","System testing;Controllability;Observability;Circuit testing;Computer architecture;Automata;Automatic testing;Software testing;Computer science;Application software","","1","","25","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Diversity of interaction in a quality assurance course","M. Ardis; C. Dugas","Department of Computer Science and Software Engineering, Rose Hulman Institute of Technology, USA; Department of Curriculum Instruction and Media Technology, Indiana State University, USA",Proceedings Frontiers in Education 35th Annual Conference,"3 Apr 2006","2005","","","F1G","13","All software engineering courses face a daunting task: how to recreate within the classroom the environment of software engineering as it is practiced. There are three major difficulties to overcome: providing the cultural environment of professional software engineering, providing opportunities for learning by observation and imitation, and providing opportunities for constructive feedback from teammates. Each of these difficulties can be addressed, but some creativity may be required to solve them within the traditional classroom setting","2377-634X","0-7803-9077-6","10.1109/FIE.2005.1612028","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1612028","Quality assurance;situated learning;software engineering;usability testing;Vygotsky","Quality assurance;Software engineering;Software quality;Application software;Software testing;Automatic testing;System testing;Computer science;Software design;Software performance","","","","5","IEEE","3 Apr 2006","","","IEEE","IEEE Conferences"
"PODS — A project on diverse software","P. G. Bishop; D. G. Esp; M. Barnes; P. Humphreys; G. Dahll; J. Lahti","Central Electricity Research Laboratories, UK Central Electricity Generating Board, Surrey, UK; Central Electricity Research Laboratories, UK Central Electricity Generating Board, Surrey, UK; UK Atomic Energy Authority, UK; UK Atomic Energy Authority, UK; Institute for Energy, USA; Technical Research Centre of Finland (VTT), Finland",IEEE Transactions on Software Engineering,"26 Sep 2012","1986","SE-12","9","929","940","A review of the Project on Diverse Software (PODS), a collaborative software reliability research project, is presented. The purpose of the project was to determine the effect of a number of different software development techniques on software reliability. The main objectives were to evaluate the merits of using diverse software, evaluate the specification language X-SPEX, and compare the productivity and reliability associated with high-level and low-level languages. A secondary objective was to monitor the software development process, with particular reference to the creation and detection of software faults. To achieve these objectives, an experiment was performed which simulated a normal software development process to produce three diverse programs to the same requirement. The requirement was for a reactor over-power protection (trip) system. After careful independent development and testing, the three programs were tested against each other in a special test harness to locate residual faults. The conclusions drawn from this project are discussed.","1939-3520","","10.1109/TSE.1986.6313048","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6313048","Fault classification;n-version programming;PODS;programming languages;reactor protection;software diversity;software faults;software reliability;specification languages;X","Software;Testing;Inductors;Specification languages;Software reliability;Documentation;Quality assurance","","64","","","IEEE","26 Sep 2012","","","IEEE","IEEE Journals"
"Including Everyone, Everywhere: Understanding Opportunities and Challenges of Geographic Gender-Inclusion in OSS","G. A. A. Prana; D. Ford; A. Rastogi; D. Lo; R. Purandare; N. Nagappan","School of Computing and Information Systems, Singapore Management University, Singapore, Singapore; Software Analysis and Intelligence, Microsoft Research, Redmond, WA, USA; Faculty of Science and Engineering, University of Groningen, Groningen, The Netherlands; School of Computing and Information Systems, Singapore Management University, Singapore, Singapore; Computer Science and Engineering, Indraprastha Institute of Information Technology, New Delhi, Delhi, India; Testing, Verification and Measurement Research, Microsoft Research, Redmond, WA, USA",IEEE Transactions on Software Engineering,"16 Sep 2022","2022","48","9","3394","3409","The gender gap is a significant concern facing the software industry as the development becomes more geographically distributed. Widely shared reports indicate that gender differences may be specific to each region. However, how complete can these reports be with little to no research reflective of the Open Source Software (OSS) process and communities software is now commonly developed in? Our study presents a multi-region geographical analysis of gender inclusion on GitHub. This mixed-methods approach includes quantitatively investigating differences in gender inclusion in projects across geographic regions and investigate these trends over time using data from contributions to 21,456 project repositories. We also qualitatively understand the unique experiences of developers contributing to these projects through a survey that is strategically targeted to developers in various regions worldwide. Our findings indicate that gender diversity is low across all parts of the world, with no substantial difference across regions. However, there has been statistically significant improvement in diversity worldwide since 2014, with certain regions such as Africa improving at faster pace. We also find that most motivations and barriers to contributions (e.g., lack of resources to contribute and poor working environment) were shared across regions, however, some insightful differences, such as how to make projects more inclusive, did arise. From these findings, we derive and present implications for tools that can foster inclusion in open source software communities and empower contributions from everyone, everywhere.","1939-3520","","10.1109/TSE.2021.3092813","Research Lab for Intelligent Software Engineering; School of Computing and Information Systems; Singapore Management University; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9466393","Inclusion;OSS;software engineering;empirical studies;GitHub;diversity;gender;geographic regions","Gender issues;Software development management;Open source software;Software engineering;Europe;Toy manufacturing industry;Industries","","19","","81","IEEE","28 Jun 2021","","","IEEE","IEEE Journals"
"Unique features of electronic device testing using NI-technologies","V. Butin; A. Butina; F. Chubrukov","FSUE VNIIA, All-Russia Research Institute of Automatics, Moscow, Russia; FSUE VNIIA, All-Russia Research Institute of Automatics, Moscow, Russia; FSUE VNIIA, All-Russia Research Institute of Automatics, Moscow, Russia",2015 International Siberian Conference on Control and Communications (SIBCON),"2 Jul 2015","2015","","","1","4","The paper describes methodological problems of functional check and parametric testing of electronic devices by using modular NI PXI-devices in various environmental conditions.The operation algorithm of developed automated test system can analyze the time measurement of various parameters; it synchronizes time between measurements, creates experimental data back-ups and minimizes measurement time. The log-file allows detecting the sequence of errors during the functional check of electronic device. The interface module controls the data exchange by multiplex channel and it is integrated in automated test system. The application-dependent software provides the remote parameters measurement and research control. The control program realizes the switching of the device power supply to external power source in case of the control parameters exceeding the limits. The developed test system has been approbated at modeling and simulation facilities of ROSATOM companies such as FSUE VNIIA (Moscow, Russia), FSUE RISI (Lytkarino, Russia) and SSC RF - IPPE (Obninsk, Russia).","","978-1-4799-7103-9","10.1109/SIBCON.2015.7147314","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7147314","PXI;testing algorithm;electronic device;multiplex channel","Testing;Power supplies;Couplings;Nickel;Software;Microcontrollers;Resistance","","","","8","IEEE","2 Jul 2015","","","IEEE","IEEE Conferences"
"Software Reliability Modeling and Analysis via Kernel-Based Approach","K. Okumura; H. Okamura; T. Dohi","Department of Information Engineering, Hiroshima University, Higashi-Hiroshima, Japan; Department of Information Engineering, Hiroshima University, Higashi-Hiroshima, Japan; Department of Information Engineering, Hiroshima University, Higashi-Hiroshima, Japan",2017 22nd International Conference on Engineering of Complex Computer Systems (ICECCS),"15 Feb 2018","2017","","","154","157","Traditional software reliability analysis utilizes only the fault count data observed in testing phase, and is done independently of the source code itself. Recently, it is known that utilization of software metrics in software reliability modeling and analysis can lead to more accurate reliability estimation and fault prediction through many empirical studies. However, such a metrics-based modeling also requires a careful selection of software metrics and their measurement, which are often troublesome and cost-consuming in practice. In this paper, we propose a kernel-based approach to estimate the quantitative software reliability, where two cases are considered; multiple software metrics are used and not. In the former case, we combine the kernel regression with the well-known non-homogeneous Poisson process-based software reliability growth model (SRGM), and propose a new metrics-based SRGM. In the latter case, we perform a similarity-based analysis through a source code transformation algorithm and try to estimate the quantitative software reliability from the source code directly without measuring multiple software metrics. Numerical examples with real application programs are presented to validate our kernel-based approach in the above two cases.","","978-1-5386-2431-9","10.1109/ICECCS.2017.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8292815","software reliability;software reliability growth model;kernel method;non-homogeneous Poisson process;similarity analysis;static source code analysis;statistical estimation;regularization;fault-free probability","Kernel;Software reliability;Software metrics;Estimation","","","","7","IEEE","15 Feb 2018","","","IEEE","IEEE Conferences"
"On the role of diversity measures for multi-objective test case selection","A. De Lucia; M. Di Penta; R. Oliveto; A. Panichella","University of Salerno, Fisciano, Salerno, Italy; University of Sannio, Benevento, Italy; University of Molise, Pesche, Italy; University of Salerno, Fisciano, Salerno, Italy",2012 7th International Workshop on Automation of Software Test (AST),"2 Jul 2012","2012","","","145","151","Test case selection has been recently formulated as multi-objective optimization problem trying to satisfy conflicting goals, such as code coverage and computational cost. This paper introduces the concept of asymmetric distance preserving, useful to improve the diversity of non-dominated solutions produced by multi-objective Pareto efficient genetic algorithms, and proposes two techniques to achieve this objective. Results of an empirical study conducted over four programs from the SIR benchmark show how the proposed technique (i) obtains non-dominated solutions having a higher diversity than the previously proposed multi-objective Pareto genetic algorithms; and (ii) improves the convergence speed of the genetic algorithms.","","978-1-4673-1822-8","10.1109/IWAST.2012.6228983","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6228983","Search-based Software Testing;Test Case Selection;Niched Genetic Algorithms;Empirical Studies","Genetic algorithms;Optimization;Minimization;Testing;Convergence;Measurement;Search problems","","17","","20","IEEE","2 Jul 2012","","","IEEE","IEEE Conferences"
"Exploring Test Suite Diversification and Code Coverage in Multi-Objective Test Case Selection","D. Mondal; H. Hemmati; S. Durocher","University of Manitoba College of Medicine, Winnipeg, MB, CA; University of Manitoba College of Medicine, Winnipeg, MB, CA; University of Manitoba College of Medicine, Winnipeg, MB, CA","2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)","7 May 2015","2015","","","1","10","Test case selection is a classic testing technique to choose a subset of existing test cases for execution, due to the limited budget and tight deadlines. While `code coverage' is the state of practice among test case selection heuristics, recent literature has shown that `test case diversity' is also a very promising approach. In this paper, we first compare these two heuristics for test case selection in several real-world case studies (Apache Ant, Derby, JBoss, NanoXML and Math). The results show that neither of the two techniques completely dominates the other, but they can potentially be complementary. Therefore, we next propose a novel approach that maximizes both code coverage and diversity among the selected test cases using NSGA-II multi- objective optimization, and the results show a significant improvement in fault detection rate. Specifically, sometimes this novel approach detects up to 16\%(Ant), 10\%(JBoss), and 14\% (Math) more faults compared to either of coverage or diversity-based approaches, when the testing budget is less than 20\% of the entire test suite execution cost.","2159-4848","978-1-4799-7125-1","10.1109/ICST.2015.7102588","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7102588","","Optimization;Testing;Fault detection;Linear programming;Shape;Diversity reception;Hamming distance","","47","","29","IEEE","7 May 2015","","","IEEE","IEEE Conferences"
"The DevOps Lab Platform for Managing Diversified Projects in Educating Agile Software Engineering","X. Bai; D. Pei; M. Li; S. Li","Department of Computer Science and Technology, Tsinghua University, Beijing, China; Department of Computer Science and Technology, Tsinghua University, Beijing, China; Department of Computer Science and Technology, Tsinghua University, Beijing, China; Department of Computer Science and Technology, Tsinghua University, Beijing, China",2018 IEEE Frontiers in Education Conference (FIE),"7 Mar 2019","2018","","","1","5","This Research Work-in-Progress paper presents the design of a Software Engineering (SE) course to support project-based practical training. Group projects, especially projects from industry partners, are deemed to be necessary for students to gain hands-on experiences. With projects from the real world, students learn not only practical engineering solutions, but also the context, constraints, and social aspects of SE. For a course having over 100 students with different interests and experiences, it is desired to provide diversified choices of projects to stimulate enthusiasm for learning. However, management and evaluation of diversified projects are challenging. Following the Agile principles, we need to continuously track progress and activities of each group, to provide quick feedback of deliveries, and to periodically evaluate students' performance. Therefore, we built a DevOps platform based on GitLab version control and continuous integration framework. Commits to GitLab code repositories automatically trigger build, testing, and analysis functions (which provide both qualitative and quantitative feedback to the students). This system has been in operations since 2014 for an undergraduate SE course, with over 500 students participating in over 130 project teams in total. The preliminary research showed promising results in improving SE education.","2377-634X","978-1-5386-1174-6","10.1109/FIE.2018.8658817","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8658817","","Software;Tools;Task analysis;Industries;Testing;Education;Collaboration","","9","","13","IEEE","7 Mar 2019","","","IEEE","IEEE Conferences"
"$\mathcal k$-branching uio sequences for partially specified observable non-deterministic fsms","K. El-Fakih; R. M. Hierons; U. C. Türker","Computer Science and Engineering, American University of Sharjah, Sharjah, United Arab Emirates; Computer Science, The University of Sheffield, Sheffield, United Kingdom; Computer Engineering, Gebze Technical University, Kocaeli, Turkey",IEEE Transactions on Software Engineering,"13 May 2021","2021","47","5","1029","1040","In black-box testing, test sequences may be constructed from systems modelled as deterministic finite-state machines (DFSMs) or, more generally, observable non-deterministic finite state machines (ONFSMs). Test sequences usually contain state identification sequences, with unique input output sequences (UIOs) often being used with DFSMs. This paper extends the notion of UIOs to ONFSMs. One challenge is that, as a result of non-determinism, the application of an input sequence can lead to exponentially many expected output sequences. To address this scalability problem, we introduce ${\mathcal K}$K-UIOs: UIOs that lead to at most ${\mathcal K}$K output sequences from states of $M$M. We show that checking ${\mathcal K}$K-UIO existence is PSPACE-Complete if the problem is suitably bounded; otherwise it is in EXPSPACE and PSPACE-Hard. We provide a massively parallel algorithm for constructing ${\mathcal K}$K-UIOs and the results of experiments on randomly generated and real FSM specifications. The proposed algorithm was able to construct UIOs in cases where the existing UIO generation algorithm could not and was able to construct UIOs from FSMs with 38K states and 400K transitions.","1939-3520","","10.1109/TSE.2019.2911076","AUS(grant numbers:eFRG18-SET-CEN-49); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8691615","Software engineering/software/program verification;software engineering/testing and debugging;software engineering/test design;finite state machine;unique input output sequence generation;general purpose graphics processing units","Testing;Object oriented modeling;Software algorithms;Software;Integrated circuit modeling;Scalability;Parallel algorithms","","7","","47","IEEE","14 Apr 2019","","","IEEE","IEEE Journals"
"Similarity Calculation of Executable Using Intel Pin Instrumentation Framework","M. Bhowmik; M. Nara; B. R. Mohan","Department of Information Technology, National Institute of Technology, Karnataka, India; Department of Information Technology, National Institute of Technology, Karnataka, India; Department of Information Technology, National Institute of Technology, Karnataka, India",2020 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW),"4 Jan 2021","2020","","","169","170","With the increase in the number of open-source and commercial code in the market, copyright and license infringement cases are on the rise. The lack of availability of source code makes identification a difficult task as existing techniques heavily rely on the source code. We propose two similarity measurement methods using the instruction log and the call-trace of each executable using Intel Pin tool. A Software Plagiarism Detector(SPD) was developed using the Intel Pin instrumentation tool and we have tested this approach on different small executable single-threaded and multi-threaded files. The results portray the validity of this method. We also talk about the possibility to expand this method for bigger software.","","978-1-7281-7735-9","10.1109/ISSREW51248.2020.00066","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9307639","software similarity;software plagiarism;software piracy;executable;instrumentation","Tools;Software;Instruments;Plagiarism;Pins;Software measurement;Instruction sets","","","","7","IEEE","4 Jan 2021","","","IEEE","IEEE Conferences"
"Covering arrays: Evaluating coverage and diversity in the presence of disallowed combinations","J. Morgan; R. Lekivetz; T. Donnelly","JMP Division, SAS Institute Incorporated, Cary, NC, USA; JMP Division, SAS Institute Incorporated, Cary, NC, USA; JMP Division, SAS Institute Incorporated, Cary, NC, USA",2017 IEEE 28th Annual Software Technology Conference (STC),"25 Dec 2017","2017","","","1","4","Test engineers are often faced with the challenge of selecting test cases that maximize the chance of discovering faults while working with a limited budget. Combinatorial testing is an effective test case selection strategy to address this challenge. The basic idea is to select test cases that ensure that all possible combinations of settings from two (or more) inputs are accounted for, regardless of which subset of two (or more) inputs are selected. Currently, combinatorial testing usually implies a covering array as the underlying mathematical construct. Yet, despite their demonstrated utility, practitioners sometimes encounter challenges that impede their use. For example, given a covering array with constraints on allowed combinations of settings for some subset of inputs, it is often unclear how to assess the coverage and diversity [2] properties of the resulting covering array.","","978-1-5386-1088-6","10.1109/STC.2017.8234455","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8234455","covering array;software testing;systems testing;disallowed combinations;forbidden configurations","Measurement;Synthetic aperture sonar;Software testing;System testing;Control systems;Face","","1","","5","IEEE","25 Dec 2017","","","IEEE","IEEE Conferences"
"STICCER: Fast and Effective Database Test Suite Reduction Through Merging of Similar Test Cases","A. Alsharif; G. M. Kapfhammer; P. McMinn",University of Sheffield; Allegheny College; University of Sheffield,"2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)","5 Aug 2020","2020","","","220","230","Since relational databases support many software applications, industry professionals recommend testing both database queries and the underlying database schema that contains complex integrity constraints. These constraints, which include primary and foreign keys, NOT NULL, and arbitrary CHECK constraints, are important because they protect the consistency and coherency of data in the relational database. Since testing integrity constraints is potentially an arduous task, human testers can use new tools to automatically generate test suites that effectively find schema faults. However, these tool-generated test suites often contain many lengthy tests that may both increase the time overhead of regression testing and limit the ability of human testers to understand them. Aiming to reduce the size of automatically generated test suites for database schemas, this paper introduces STICCER, a technique that finds overlaps between test cases, merging database interactions from similar tests and removing others. By systematically discarding and merging redundant tests, STICCER creates a reduced test suite that is guaranteed to have the same coverage as the original one. Using thirty-four relational database schemas, we experimentally compared STICCER to two greedy test suite reduction techniques and a random method. The results show that, compared to the greedy and random methods, STICCER is the most effective at reducing the number of test cases and database interactions while maintaining test effectiveness as measured by the mutation score.","2159-4848","978-1-7281-5778-8","10.1109/ICST46399.2020.00031","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9159082","","Relational databases;Testing;Merging;Software;Industries;Generators","","4","","55","IEEE","5 Aug 2020","","","IEEE","IEEE Conferences"
"Test4Deep: an Effective White-Box Testing for Deep Neural Networks","J. Yu; Y. Fu; Y. Zheng; Z. Wang; X. Ye","School of Software, Tsinghua University, BeiJing, China; School of Computer Science, Beijing Information Science & Technology University, BeiJing, China; School of Software, Tsinghua University, BeiJing, China; School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, BeiJing, China",2019 IEEE International Conference on Computational Science and Engineering (CSE) and IEEE International Conference on Embedded and Ubiquitous Computing (EUC),"5 Dec 2019","2019","","","16","23","Current testing for Deep Neural Networks (DNNs) focuses on quantity of test cases but ignores diversity. To the best of our knowledge, DeepXplore is the first white-box framework for Deep Learning testing by triggering differential behaviors between multiple DNNs and increasing neuron coverage to improve diversity. Since it is based on multiple DNNs facing problems that (1) the framework is not friendly to a single DNN, (2) if incorrect predictions made by all DNNs simultaneously, DeepXplore cannot generate test cases. This paper presents Test4Deep, a white-box testing framework based on a single DNN. Test4Deep avoids mistakes of multiple DNNs by inducing inconsistencies between predicted labels of original inputs and that of generated test inputs. Meanwhile, Test4Deep improves neuron coverage to capture more diversity by attempting to activate more inactivated neurons. The proposed method was evaluated on three popular datasets with nine DNNs. Compared to DeepXplore, Test4Deep produced average 4.59% (maximum 10.49%) more test cases that all found errors and faults of DNNs. These test cases got 19.57% more diversity increment and 25.88% increment of neuron coverage. Test4Deep can further be used to improve the accuracy of DNNs by average up to 5.72% (maximum 7.0%).","","978-1-7281-1664-8","10.1109/CSE/EUC.2019.00013","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8919545","white box testing;DNNs;neuron coverage;diversity;test cases","Neurons;Testing;Optimization;Prediction algorithms;Biological neural networks;Software;Machine learning","","5","","32","IEEE","5 Dec 2019","","","IEEE","IEEE Conferences"
"Evaluating the Trade-offs of Text-based Diversity in Test Prioritisation","R. Khojah; C. H. Chao; F. G. de Oliveira Neto","Department of Computer Science and Engineering, Chalmers | University of Gothenburg, Gothenburg, Sweden; Department of Computer Science and Engineering, Chalmers | University of Gothenburg, Gothenburg, Sweden; Department of Computer Science and Engineering, Chalmers | University of Gothenburg, Gothenburg, Sweden",2023 IEEE/ACM International Conference on Automation of Software Test (AST),"12 Jul 2023","2023","","","168","178","Diversity-based techniques (DBT) have been cost-effective by prioritizing the most dissimilar test cases to detect faults at earlier stages of test execution. Diversity is measured on test specifications to convey how different test cases are from one another. However, there is little research on the trade-off of diversity measures based on different types of text-based specification (lexicographical or semantics). Particularly because the text content in test scripts vary widely from unit (e.g., code) to system-level (e.g., natural language). This paper compares and evaluates the cost-effectiveness in coverage and failures of different text-based diversity measures for different levels of tests. We perform an experiment on the test suites of 7 open source projects on the unit level, and 2 industry projects on the integration and system level. Our results show that test suites prioritised using semantic-based diversity measures causes a small improvement in requirements coverage, as opposed to lexical diversity that showed less coverage than random for system-level artefacts. In contrast, using lexical-based measures such as Jaccard or Levenshtein to prioritise code artefacts yield better failure coverage across all levels of tests. We summarise our findings into a list of recommendations for using semantic or lexical diversity on different levels of testing.","2833-9061","979-8-3503-2402-0","10.1109/AST58925.2023.00021","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174012","Diversity-based testing;Natural Language Processing (NLP);Test Case Prioritisation","Industries;Codes;Automation;Atmospheric measurements;Semantics;Particle measurements;Natural language processing","","","","32","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"Automated Test Suite Generation for Time-Continuous Simulink Models","R. Matinnejad; S. Nejati; L. C. Briand; T. Bruckmann","SnT Centre, University of Luxembourg, Luxembourg; SnT Centre, University of Luxembourg, Luxembourg; SnT Centre, University of Luxembourg, Luxembourg; Delphi Automotive Systems, Luxembourg",2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE),"3 Apr 2017","2016","","","595","606","All engineering disciplines are founded and rely on models, although they may differ on purposes and usages of modeling. Interdisciplinary domains such as Cyber Physical Systems (CPSs) seek approaches that incorporate different modeling needs and usages. Specifically, the Simulink modeling platform greatly appeals to CPS engineers due to its seamless support for simulation and code generation. In this paper, we propose a test generation approach that is applicable to Simulink models built for both purposes of simulation and code generation. We define test inputs and outputs as signals that capture evolution of values over time. Our test generation approach is implemented as a meta-heuristic search algorithm and is guided to produce test outputs with diverse shapes according to our proposed notion of diversity. Our evaluation, performed on industrial and public domain models, demonstrates that: (1) In contrast to the existing tools for testing Simulink models that are only applicable to a subset of code generation models, our approach is applicable to both code generation and simulation Simulink models. (2) Our new notion of diversity for output signals outperforms random baseline testing and an existing notion of signal diversity in revealing faults in Simulink models. (3) The fault revealing ability of our test generation approach outperforms that of the Simulink Design Verifier, the only testing toolbox for Simulink.","1558-1225","978-1-4503-3900-1","10.1145/2884781.2884797","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7886937","Simulink models;Software testing;Time-continuous behaviors;Search-based software testing;Output diversity;Signal features;Structural coverage;Simulink Design Verifier (SLDV)","Software packages;Computational modeling;Fuels;Testing;Mathematical model;Shape","","27","","61","","3 Apr 2017","","","IEEE","IEEE Conferences"
"Delta-Oriented Product Prioritization for Similarity-Based Product-Line Testing","M. Al-Hajjaji; S. Lity; R. Lachmann; T. Thüm; I. Schaefer; G. Saake","Otto von Guericke Universitat Magdeburg, Magdeburg, Sachsen-Anhalt, DE; TU Braunschweig, Germany; TU Braunschweig, Germany; TU Braunschweig, Germany; TU Braunschweig, Germany; University of Magdeburg, Germany",2017 IEEE/ACM 2nd International Workshop on Variability and Complexity in Software Design (VACE),"7 Jul 2017","2017","","","34","40","Testing every product of a software product line (SPL) is often not feasible due to the exponential number of products in the number of features. Thus, the order in which products are tested matters, because it can increase the early rate of fault detection. Several approaches have been proposed to prioritize products based on configuration similarity. However, current approaches are oblivious to solution-space differences among products, because they consider only problem-space information. With delta modeling, we incorporate solution-space information in product prioritization to improve the effectiveness of SPL testing. Deltas capture the differences between products facilitating the reasoning about product similarity. As a result, we select the most dissimilar product to the previously tested ones, in terms of deltas, to be tested next. We evaluate the effectiveness of our approach using an SPL from the automotive domain showing an improvement in the effectiveness of SPL testing.","","978-1-5386-2803-4","10.1109/VACE.2017.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7968061","Software product line;Model-based testing;Product prioritization;Delta-oriented","Testing;Computer architecture;Fault detection;Software systems;Computational modeling","","10","","28","IEEE","7 Jul 2017","","","IEEE","IEEE Conferences"
"Essay Test Based E-Testing Using Cosine Similarity Vector Space Model","Wahyudi; R. Akbar; T. N. Suharsono; A. S. Indrapriyatna","Faculty of Information Technology, University of Andalas, Padang, Indonesia; Faculty of Information Technology, University of Andalas, Padang, Indonesia; Faculty of Engineering, Universitas Sangga Buana, Bandung, Indonesia; Department of Industrial Engineering, Faculty of Information Technology, University of Andalas, Padang, Indonesia",2022 International Symposium on Information Technology and Digital Innovation (ISITDI),"17 Nov 2022","2022","","","80","85","The covid-19 pandemic has been pushing the development of online learning systems in Indonesia. In online learning, computer-based essay tests and assessments have an essential role. Essay test systems are designed to mimic the concept of essay tests without being computer-based. The answer from the lecturer is compared to the response from the student. The TF-IDF (Term Frequency -Inverse Document Frequency) cosine similarity is used. It is one of the methods of information re-gathering systems. The process in this model consists of two types: 1) creating a corpus/ inverted file, and the second is cosine similarity (CS) for calculating the similarity of the user's answers with the lecturer's. Creating a corpus/inverted file involves several stages like data collection, parsing sentences into terms, stoplist, weighting with IDF, and term weighting using TF-IDF. The cosine similarity process consists of parsing users' answers, weighting users' answers using TF-IDF, and finding cosine similarity values of users' answers with lecturers' answers using the vector space model. The highest cosine similarity value is taken to give the user's answer points. Testing the Essay Test system produces excellent grades. The tests were done Mean Squared Error (MSE) values resulted in an average MSE value of 3.28 from three students.","","978-1-6654-6116-0","10.1109/ISITDI55734.2022.9944506","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9944506","Covid-19;online learning;essay test;cosine similarity;vector space model","COVID-19;Learning systems;Technological innovation;Pandemics;Computational modeling;Data collection;Information technology","","1","","15","IEEE","17 Nov 2022","","","IEEE","IEEE Conferences"
"A Fault Localization Method Based on Similarity Weighting with Unlabeled Test Cases","X. Yang; B. Liu; D. An; W. Xie; W. Wu","School of Reliability and Systems Engineering, Beihang University, Beijing, China; School of Reliability and Systems Engineering, Beihang University, Beijing, China; School of Reliability and Systems Engineering, Beihang University, Beijing, China; Information Center of China North Industries Group Corporation, Beijing, China; Information Center of China North Industries Group Corporation, Beijing, China","2022 IEEE 22nd International Conference on Software Quality, Reliability, and Security Companion (QRS-C)","30 Mar 2023","2022","","","368","374","In software fault localization problems, existing fault localization algorithms usually rely heavily on the perfection of test oracle. But in practice, there are a large number of test cases that lack accurate execution results. In order to utilize on unlabeled test cases, many test prediction and use case filter methods have been proposed. However, these methods ignore the similarity between test cases, which has been proven effective in fault localization studies using labeled test cases. Therefore, this paper proposes a fault localization method based on similarity weighting with unlabeled test cases. It uses the similarity of unlabeled test cases filtered by information entropy and labeled failed test cases as weights, and weights the suspicion calculation coefficients to enhance the importance of use cases similar to the failed cases. The experimental results show that similarity weighting effectively improves fault localization efficiency on all three program sets and all three localization algorithms. It can be seen that similarity of use case information also has an important role in the use of unlabeled test cases.","2693-9371","979-8-3503-1991-0","10.1109/QRS-C57518.2022.00061","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10077013","Fault localization;Test oracle;Unlabeled test cases;Filter;Similarity weighting","Location awareness;Weight measurement;Uncertainty;Software algorithms;Transforms;Software quality;Filtering algorithms","","1","","15","IEEE","30 Mar 2023","","","IEEE","IEEE Conferences"
"Evaluation of diverse compiling for software-fault detection","A. Höller; N. Kajtazovic; T. Rauter; K. Römer; C. Kreiner","Institute for Technical Informatics, Graz University of Technology; Institute for Technical Informatics, Graz University of Technology; Institute for Technical Informatics, Graz University of Technology; Institute for Technical Informatics, Graz University of Technology; Institute for Technical Informatics, Graz University of Technology","2015 Design, Automation & Test in Europe Conference & Exhibition (DATE)","23 Apr 2015","2015","","","531","536","Although software fault prevention techniques improve continually, faults remain in every complex software system. Thus safety-critical embedded systems need mechanisms to tolerate software faults. Typically, these systems use static redundancy to detect hardware faults during operation. However, the reliability of a redundant system not only depends on the reliability of each version, but also on the dissimilarity between them. Thus, researchers have investigated ways to automatically add cost-efficient diversity to software to increase the efficiency of redundancy strategies. One of these automated software diversification methods is diverse compiling, which exploits the diversity introduced by different compilers and different optimization flags. Today, diverse compiling is used to improve the hardware fault tolerance and to avoid common defects from compilers. However, in this paper we show that diverse compiling also enhances the software fault tolerance by increasing the chance of finding defects in the source code of the executed software during runtime. More precisely, the memory is organized differently, when using different compilers and compiler flags. This enhances the chance of detecting memory-related software bugs, such as missing memory initialization, during runtime. Here we experimentally quantify the efficiency of diverse compiling for software fault tolerance and we show that diverse compiling can help to detect up to about 70% of memory-related software bugs.","1558-1101","978-3-9815-3705-5","10.7873/DATE.2015.0118","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7092445","","Software;Fault tolerance;Fault tolerant systems;Hardware;Optimization;Computer bugs;Benchmark testing","","4","","25","","23 Apr 2015","","","IEEE","IEEE Conferences"
"On the Uniqueness and Sensitivity of Nanoindentation Testing for Determining Elastic and Plastic Material Properties of Electroplating Copper Filled in Through-Silicon-Via (TSV)","M. El Barbary; L. Chen; Y. Liu; F. Qin; X. Fan","Department of Mechanical Engineering, Lamar University, Beaumont, TX, USA; On Semiconductor South, Portland, ME, USA; Beijing University of Technology, Beijing, China; Beijing Univ. of Technol., Beijing, China; Department of Mechanical Engineering, Lamar University, Beaumont, TX, USA",2018 IEEE 68th Electronic Components and Technology Conference (ECTC),"9 Aug 2018","2018","","","1023","1029","Through-Silicon-Vias (TSV) for 3D integration are susceptible to mechanical failures such as TSV extrusion, chip cracking, and carrier mobility change, mainly due to significant thermal mismatch between electroplating copper and silicon wafer. Assessing TSV reliability requires accurate mechanical properties of electroplating Cu, which may not be achieved by traditional testing methods for large-size samples. Alternatively, nanoindentation can be used as a versatile and non-destructive technique to obtain material properties at micro-scale or nan-scale. The technique, however, is sensitive to experimental data variation and may yield non-unique properties, which is not yet fully understood for TSV-Cu and other packaging materials. This paper reports the results and analysis of in-situ nanoindentation for TSV-Cu specimens. Each specimen has a diameter of 20 um and a depth of 180 um, fabricated on a 200-mm silicon wafer. The relationship of power-law hardening was used to characterize the mechanical behaviors of TSV-Cu with Young's modulus (E), yielding strength (Y), and strain hardening exponent (n). To extract these properties, two methods of so-called reverse analysis were applied to experimental test data. Finite element models were also built to reproduce the displacement-loading curve based on the extracted material properties. The following results were observed: 1) with very different yield strength and hardening coefficient, identical load-displacement curves were produced. This indicates that single indentation testing cannot provide unique material properties for TSV-Cu; 2) the loading-displacement curves vary with the locations of the specimens, possibly due to the effect of grain size on nanoindentation, or experimental ""errors""; 3) the plastic properties can vary dramatically with a slight change in the loading-displacement curve. This implies the sensitivity of extracted properties on experimental data variations. Generally, the non-uniqueness and sensitivity due to experimental data variations of nanoindentation testing are not independent. This study concludes that single nanoindentation testing itself may not be able to adequately and uniquely determine the material properties of TSV-Cu. To make the best use of the nanoindentation technique, a robust methodology is needed to minimize the sensitivity to experimental errors and analysis.","2377-5726","978-1-5386-4999-2","10.1109/ECTC.2018.00157","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8429670","TSV-Cu;nanoindentation;elastic and plastic properties;uniqueness;error sensitivty","Material properties;Testing;Strain;Finite element analysis;Loading;Through-silicon vias;Young's modulus","","2","","13","IEEE","9 Aug 2018","","","IEEE","IEEE Conferences"
"Unique challenges testing SDRs for space","D. Chelmins; J. Downey; S. K. Johnson; J. Nappier","NASA Glenn Research Center, Cleveland, OH, USA; NASA Glenn Research Center, Cleveland, OH, USA; NASA Glenn Research Center, Cleveland, OH, USA; NASA Glenn Research Center, Cleveland, OH, USA",2013 IEEE Aerospace Conference,"13 May 2013","2013","","","1","9","This paper describes the approach used by the Space Communication and Navigation (SCaN) Testbed team to qualify three Software Defined Radios (SDR) for operation in space and the characterization of the platform to enable upgrades on-orbit. The three SDRs represent a significant portion of the new technologies being studied on board the SCAN Testbed, which is operating on an external truss on the International Space Station (ISS). The SCaN Testbed provides experimenters an opportunity to develop and demonstrate experimental waveforms and applications for communication, networking, and navigation concepts and advance the understanding of developing and operating SDRs in space.","1095-323X","978-1-4673-1813-6","10.1109/AERO.2013.6497339","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6497339","","Testing;Hardware;NASA;Software;Software radio;Temperature measurement;Electromagnetic interference","","5","","10","IEEE","13 May 2013","","","IEEE","IEEE Conferences"
"Know You Neighbor: Fast Static Prediction of Test Flakiness","R. Verdecchia; E. Cruciani; B. Miranda; A. Bertolino","Department of Computer Science, Vrije Universiteit Amsterdam, Amsterdam, HV, The Netherlands; Computerwissenschaften, Universität Salzburg, Salzburg, Austria; Center of Informatics, Federal University of Pernambuco, Recife, Brazil; Istituto di Scienza e Tecnologie dell’Informazione “A. Faedo”, Consiglio Nazionale delle Ricerche, Pisa, Italy",IEEE Access,"27 May 2021","2021","9","","76119","76134","Context: Flaky tests plague regression testing in Continuous Integration environments by slowing down change releases and wasting testing time and effort. Despite the growing interest in mitigating the burden of test flakiness, how to efficiently and effectively detect flaky tests is still an open problem. Objective: In this study, we present and evaluate FLAST, an approach designed to statically predict test flakiness. FLAST leverages vector-space modeling, similarity search, dimensionality reduction, and k-Nearest Neighbor classification in order to timely and efficiently detect test flakiness. Method: In order to gain insights into the efficiency and effectiveness of FLAST, we conduct an empirical evaluation of the approach by considering 13 real-world projects, for a total of 1,383 flaky and 26,702 non-flaky tests. We carry out a quantitative comparison of FLAST with the state-of-the-art methods to detect test flakiness, by considering a balanced dataset comprising 1,402 real-world flaky and as many non-flaky tests. Results: From the results we observe that the effectiveness of FLAST is comparable with the state-of-the-art, while providing considerable gains in terms of efficiency. In addition, the results demonstrate how by tuning the threshold of the approach FLAST can be made more conservative, so to reduce false positives, at the cost of missing more potentially flaky tests. Conclusion: The collected results demonstrate that FLAST provides a fast, low-cost and reliable approach that can be used to guide test rerunning, or to gate the inclusion of new potentially flaky tests.","2169-3536","","10.1109/ACCESS.2021.3082424","Facebook Research 2019 Testing and Verification Award; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9437181","Software testing;flaky tests;prediction;static analysis;similarity","Testing;Instruments;Vocabulary;Tools;Static analysis;Social networking (online);Probabilistic logic","","23","","53","CCBY","20 May 2021","","","IEEE","IEEE Journals"
"Application of diversity method for reliability of cloud computing","S. Boranbayev; A. Boranbayev; S. Altayev; Y. Seitkulov","L.N. Gumilyov Eurasian National University, Astana, Kazakhstan; Nazarbayev University, Astana, Kazakhstan; L.N. Gumilyov Eurasian National University, Astana, Kazakhstan; L.N. Gumilyov Eurasian National University, Astana, Kazakhstan",2014 IEEE 8th International Conference on Application of Information and Communication Technologies (AICT),"9 Feb 2015","2014","","","1","5","The aim of the project is creation of methods increasing software reliability and fault tolerance in the cloud based systems. The aim to deliver a comprehensive framework for a substantial, cost-effective improvement in the dependability of application software run in the cloud, beyond the levels offered currently and in the foreseeable future by off-the-shelf (OTS) software products. This improvement will be achieved by using diverse redundancy in an innovative dynamic architecture.","","978-1-4799-4119-3","10.1109/ICAICT.2014.7035955","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7035955","cloud;diversity;dependability;information system;software;application;design","Software reliability;Software;Fault tolerant systems;Testing;Redundancy","","13","","10","IEEE","9 Feb 2015","","","IEEE","IEEE Conferences"
"Scalable Approaches for Test Suite Reduction","E. Cruciani; B. Miranda; R. Verdecchia; A. Bertolino","Gran Sasso Science Institute | L’ Aquila, Italy; Federal University of Pernambuco | Recife, Brazil; Vrije Universiteit Amsterdam | Amsterdam, The Netherlands; ISTI - Consiglio Nazionale delle Ricerche | Pisa, Italy",2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE),"26 Aug 2019","2019","","","419","429","Test suite reduction approaches aim at decreasing software regression testing costs by selecting a representative subset from large-size test suites. Most existing techniques are too expensive for handling modern massive systems and moreover depend on artifacts, such as code coverage metrics or specification models, that are not commonly available at large scale. We present a family of novel very efficient approaches for similarity-based test suite reduction that apply algorithms borrowed from the big data domain together with smart heuristics for finding an evenly spread subset of test cases. The approaches are very general since they only use as input the test cases themselves (test source code or command line input). We evaluate four approaches in a version that selects a fixed budget B of test cases, and also in an adequate version that does the reduction guaranteeing some fixed coverage. The results show that the approaches yield a fault detection loss comparable to state-of-the-art techniques, while providing huge gains in terms of efficiency. When applied to a suite of more than 500K real world test cases, the most efficient of the four approaches could select B test cases (for varying B values) in less than 10 seconds.","1558-1225","978-1-7281-0869-8","10.1109/ICSE.2019.00055","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8812048","Clustering;Random projection;Similarity-based testing;Software testing;Test suite reduction","Testing;Big Data;Software;Measurement;Fault detection;Scalability;Clustering algorithms","","26","","36","IEEE","26 Aug 2019","","","IEEE","IEEE Conferences"
"MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction","K. E. Bennin; J. Keung; P. Phannachitta; A. Monden; S. Mensah","Department of Computer Science, City University of Hong Kong, Kowloon Tong, Hong Kong; Department of Computer Science, City University of Hong Kong, Kowloon Tong, Hong Kong; College of Arts, Media and Technology, Chiang Mai University, Chiang Mai, Thailand; Graduate School of Natural Science and Technology, Okayama University, Okayama, Japan; Department of Computer Science, City University of Hong Kong, Kowloon Tong, Hong Kong",IEEE Transactions on Software Engineering,"12 Jun 2018","2018","44","6","534","550","Highly imbalanced data typically make accurate predictions difficult. Unfortunately, software defect datasets tend to have fewer defective modules than non-defective modules. Synthetic oversampling approaches address this concern by creating new minority defective modules to balance the class distribution before a model is trained. Notwithstanding the successes achieved by these approaches, they mostly result in over-generalization (high rates of false alarms) and generate near-duplicated data instances (less diverse data). In this study, we introduce MAHAKIL, a novel and efficient synthetic oversampling approach for software defect datasets that is based on the chromosomal theory of inheritance. Exploiting this theory, MAHAKIL interprets two distinct sub-classes as parents and generates a new instance that inherits different traits from each parent and contributes to the diversity within the data distribution. We extensively compare MAHAKIL with SMOTE, Borderline-SMOTE, ADASYN, Random Oversampling and the No sampling approach using 20 releases of defect datasets from the PROMISE repository and five prediction models. Our experiments indicate that MAHAKIL improves the prediction performance for all the models and achieves better and more significant pf values than the other oversampling approaches, based on Brunner's statistical significance test and Cliff's effect sizes. Therefore, MAHAKIL is strongly recommended as an efficient alternative for defect prediction models built on highly imbalanced datasets.","1939-3520","","10.1109/TSE.2017.2731766","General Research Fund of the Research Grants Council of Hong Kong(grant numbers:11208017,11214116); City University of Hong Kong(grant numbers:7004683,7004474); JSPS KAKENHI(grant numbers:17K00102); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7990590","Software defect prediction;class imbalance learning;synthetic sample generation;data sampling methods;classification problems","Biological cells;Software;Predictive models;Animals;Electronic mail;Sampling methods","","204","","44","IEEE","25 Jul 2017","","","IEEE","IEEE Journals"
"An Identification of Software Defect Using Cost Based Support Vector Machine and Robust Similarity Aware Clustering Model","S. Patchala; M. Mundher Adnan; T. Vontela; Y. Chanti; I. R","Enquero Global-A Genpact Company, Bangalore, India; The Islamic University, Najaf, Iraq; Department of CSE (Data Science), CMR Technical Campus, Hyderabad, India; School of Computer Science & Artificial Intelligence, SR University, Warangal, India; Department of ECE, Panimalar Engineering College, Chennai, India","2023 International Conference on Ambient Intelligence, Knowledge Informatics and Industrial Electronics (AIKIIE)","22 Jan 2024","2023","","","1","6","Software fault prediction is the prominent research area that aims at the successful delivery of the software to the clients. The success of the software relies on the successful development of the software without any of the faulty modules. The presence of the large number of the software faults results in ineffective product and the faults may be due to any of the hominoid mistake. The software faults are detected in the stress, computational faults, faults in syntax, capacity, load balance, and so on. It is the need of the hour to detect the faults effectively and precisely, but predicting the software faults remained a challenge. This research proposed a software fault prediction and classification approach based on the combination of the spiral model, Cost based Support Vector Machine (CSVM) and Robust Similarity Aware Clustering (RSC) process. The proposed machine learning algorithm efficiently identify the fault occurred on the software modules. RSC algorithm helps to cluster the resultant classes based on the similarity measure. This proposed technique helps to achieve less computing time and also reduces the failure ratio for testing the software modules. The experimental analysis of the proposed CSVM method is done on publicly available dataset such as NASA-CM1 data. The analysis demonstrated that the proposed algorithm is better than various existing approaches with respect to Accuracy (0.991), Precision (0.944), Recall (0.962), and F-measure (0.945) and such proved that it is capable of predicting faults within limited resource budget.","","979-8-3503-1646-9","10.1109/AIKIIE60097.2023.10390074","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10390074","Cost based Support Vector Machine;Machine Learning;Robust Similarity Aware Clustering;Software fault prediction;Spiral model","Fault diagnosis;Support vector machines;Costs;Software algorithms;Clustering algorithms;Predictive models;Prediction algorithms","","","","15","IEEE","22 Jan 2024","","","IEEE","IEEE Conferences"
"SALVO: Automated Generation of Diversified Tests for Self-driving Cars from Existing Maps","V. Nguyen; S. Huber; A. Gambi","University of Passau, Passau, Germany; University of Passau, Passau, Germany; University of Passau, Passau, Germany",2021 IEEE International Conference on Artificial Intelligence Testing (AITest),"14 Oct 2021","2021","","","128","135","Simulation-based tests are more cost-effective and less dangerous than field tests; hence, they are becoming the norm for thoroughly testing self-driving cars in virtual environments. High-quality simulation-based testing requires physically accurate computer simulations, detailed and photo-realistic maps, and systematic approaches for generating tests. Moreover, since creating detailed maps is a manual process, they are expensive, and testers should avoid wasting such valuable resources, for example, by generating irrelevant test cases. To address those issues, we propose SALVO a fully automated approach to identify quantifiably diverse and critical driving scenarios that can be instantiated on existing high-definition maps and implement them in an industrial driving simulator as executable test cases. The evaluation of SALVO in the context of the 2021 IEEE Autonomous Driving AI Test Challenge showed that it could analyze maps of different complexity and identify many critical driving scenarios in minutes. Furthermore, the tests SALVO generated stressed a state-of-art self-driving car software in quantifiably diverse ways and exposed issues with its implementation.","","978-1-6654-3481-2","10.1109/AITEST52744.2021.00033","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9564107","Test Case Generation;Autonomous Vehicles;Software-in-the-loop;Diversity;Feature Space","Space vehicles;Systematics;Conferences;Computer simulation;Virtual environments;Manuals;Software","","16","","23","IEEE","14 Oct 2021","","","IEEE","IEEE Conferences"
"Test Case Reuse Based on Ontology","L. Cai; W. Tong; Z. Liu; J. Zhang","School of Computer Engineering and Science, Shanghai University, Shanghai, China; School of Computer Engineering and Science, Shanghai University, Shanghai, China; Shanghai Key Laboratory of Computer Software Evaluating and Testing, Shanghai, China; School of Computer Engineering and Science, Shanghai University, Shanghai, China",2009 15th IEEE Pacific Rim International Symposium on Dependable Computing,"31 Dec 2009","2009","","","103","108","Test cases are one of the most important assets in the testing process. This paper presents the testing ontology based SWEBOK and software quality model. The management and retrieval of test cases will play a vital role in test cases reuse. The keyword-based, as well as facet-based retrieval cannot meet user's flexible query requirement because of lack of semantic information. SWEBOK provides a broad agreement on the content of the software engineering discipline. At last this paper discusses the management and retrieval of test cases based on the semantic similarity of two test concepts in two ontologies according to difference sets of superconcept, subconcept, extension, and intension.","","978-0-7695-3849-5","10.1109/PRDC.2009.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5368243","test cases;retrieval;ontology;reuse;similarity","Ontologies;Software testing;Information retrieval;Costs;Software quality;Software engineering;Performance evaluation;Research and development;Laboratories;Object oriented modeling","","12","","17","IEEE","31 Dec 2009","","","IEEE","IEEE Conferences"
"Generating Realistic and Diverse Tests for LiDAR-Based Perception Systems","G. Christian; T. Woodlief; S. Elbaum","University of Virginia, Charlottesville, Virginia, USA; University of Virginia, Charlottesville, Virginia, USA; University of Virginia, Charlottesville, Virginia, USA",2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE),"14 Jul 2023","2023","","","2604","2616","Autonomous systems rely on a perception component to interpret their surroundings, and when misinterpretations occur, they can and have led to serious and fatal system-level failures. Yet, existing methods for testing perception software remain limited in both their capacity to efficiently generate test data that translates to real-world performance and in their diversity to capture the long tail of rare but safety-critical scenarios. These limitations are particularly evident for perception systems based on LiDAR sensors, which have emerged as a crucial component in modern autonomous systems due to their ability to provide a 3D scan of the world and operate in all lighting conditions. To address these limitations, we introduce a novel approach for testing LiDAR-based perception systems by leveraging existing real-world data as a basis to generate realistic and diverse test cases through mutations that preserve realism invariants while generating inputs rarely found in existing data sets, and automatically crafting oracles that identify potentially safety-critical issues in perception performance. We implemented our approach to assess its ability to identify perception failures, generating over 50,000 test inputs for five state-of-the-art LiDAR-based perception systems. We found that it efficiently generated test cases that yield errors in perception that could result in real consequences if these systems were deployed and does so at a low rate of false positives.","1558-1225","978-1-6654-5701-9","10.1109/ICSE48619.2023.00217","NSF(grant numbers:AFOSR#FA9550-21-1-0164); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10172508","Software Testing and Validation;Machine Learning","Software testing;Three-dimensional displays;Laser radar;Autonomous systems;Lighting;Tail;Software","","3","","59","IEEE","14 Jul 2023","","","IEEE","IEEE Conferences"
"Situational control algorithm for ensuring parameter stability in unique software and hardware","E. V. Yurkevich; L. N. Kryukova; V. D. Babishin","Institute of Control Sciences V.A. Trapeznikov RAS, Moscow, Russian Federation; Institute of Control Sciences V.A. Trapeznikov RAS, Moscow, Russian Federation; AO Nauchno-Proizvodstvennaya korporatsia, Informatsionno-upravlyayushchie i elektromekhanicheskie kompleksy, Moscow, Russian Federation",2017 Tenth International Conference Management of Large-Scale System Development (MLSD),"16 Nov 2017","2017","","","1","5","In order to ensure the stability of unique software and hardware parameters in a spacecraft's onboard system, a situational control algorithm is being offered. The proposed approach allows to minimize errors when processing external influence test results. A mechanism of minimization of ground test numbers for a single copy device is formed.","","978-1-5386-0798-5","10.1109/MLSD.2017.8109710","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8109710","spacecraft;unique onboard system device;situational control;operational control;external influences;ground test number;parameter stability control","","","","","8","IEEE","16 Nov 2017","","","IEEE","IEEE Conferences"
"Identifying More Equivalent Mutants via Code Similarity","M. Kintis; N. Malevris","Department of Informatics, Athens University of Economics and Business, Athens, Greece; Department of Informatics, Athens University of Economics and Business, Athens, Greece",2013 20th Asia-Pacific Software Engineering Conference (APSEC),"28 Apr 2014","2013","1","","180","188","Equivalent mutants are one of the major costs of mutation testing. The undecidable nature of this problem makes a fully automated solution unattainable and necessitates the manual analysis of live mutants. This paper introduces the concept of mirrored mutants, ones that affect similar code fragments. It is argued that mirrored mutants exhibit analogous behavior with respect to their equivalence. Thus, if one of them is equivalent, then the other mirrored mutants should be too. An empirical study, conducted on real world programs, investigates this argument, focusing on both intra-method and inter-method mirrored mutants. The obtained results suggest that mirrored mutants indeed exhibit this kind of behavior and thus can be utilized to ameliorate the adverse effects of the equivalent mutant problem.","1530-1362","978-1-4799-2144-7","10.1109/APSEC.2013.34","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6805405","mutation testing;equivalent mutants;similar code fragments","Cloning;Testing;Syntactics;Software systems;Manuals;Java","","13","","33","IEEE","28 Apr 2014","","","IEEE","IEEE Conferences"
"ATM: Black-box Test Case Minimization based on Test Code Similarity and Evolutionary Search","R. Pan; T. A. Ghaleb; L. Briand","School of EECS University of Ottawa, Ottawa, Canada; School of EECS University of Ottawa, Ottawa, Canada; School of EECS University of Ottawa, Ottawa, Canada",2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE),"14 Jul 2023","2023","","","1700","1711","Executing large test suites is time and resource consuming, sometimes impossible, and such test suites typically contain many redundant test cases. Hence, test case (suite) minimization is used to remove redundant test cases that are unlikely to detect new faults. However, most test case minimization techniques rely on code coverage (white-box), model-based features, or requirements specifications, which are not always (entirely) accessible by test engineers. Code coverage analysis also leads to scalability issues, especially when applied to large industrial systems. Recently, a set of novel techniques was proposed, called FAST-R, relying solely on test case code for test case minimization, which appeared to be much more efficient than white-box techniques. However, it achieved a comparable low fault detection capability for Java projects, thus making its application challenging in practice. In this paper, we propose ATM (AST-based Test case Minimizer), a similarity-based, search-based test case minimization technique, taking a specific budget as input, that also relies exclusively on the source code of test cases but attempts to achieve higher fault detection through finer-grained similarity analysis and a dedicated search algorithm. ATM transforms test case code into Abstract Syntax Trees (AST) and relies on four tree-based similarity measures to apply evolutionary search, specifically genetic algorithms, to minimize test cases. We evaluated the effectiveness and efficiency of ATM on a large dataset of 16 Java projects with 661 faulty versions using three budgets ranging from 25% to 75% of test suites. ATM achieved significantly higher fault detection rates (0.82 on average), compared to FAST-R (0.61 on average) and random minimization (0.52 on average), when running only 50% of the test cases, within practically acceptable time (1.1 - 4.3 hours, on average, per project version), given that minimization is only occasionally applied when many new test cases are created (major releases). Results achieved for other budgets were consistent.","1558-1225","978-1-6654-5701-9","10.1109/ICSE48619.2023.00146","Natural Sciences and Engineering Research Council of Canada; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10172509","Test case minimization;Test suite reduction;Tree-based similarity;AST;Genetic algorithm;Black-box testing","Java;Codes;Fault detection;Closed box;Transforms;Syntactics;Minimization","","3","","40","IEEE","14 Jul 2023","","","IEEE","IEEE Conferences"
"Can Duplicate Questions on Stack Overflow Benefit the Software Development Community?","D. Abric; O. E. Clark; M. Caminiti; K. Gallaba; S. McIntosh","Department of Electrical and Computer Engineering, McGill University, Montréal, Canada; Department of Electrical and Computer Engineering, McGill University, Montréal, Canada; Department of Electrical and Computer Engineering, McGill University, Montréal, Canada; Department of Electrical and Computer Engineering, McGill University, Montréal, Canada; Department of Electrical and Computer Engineering, McGill University, Montréal, Canada",2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR),"29 Aug 2019","2019","","","230","234","Duplicate questions on Stack Overflow are questions that are flagged as being conceptually equivalent to a previously posted question. Stack Overflow suggests that duplicate questions should not be discussed by users, but rather that attention should be redirected to their previously posted counterparts. Roughly 53% of closed Stack Overflow posts are closed due to duplication. Despite their supposed overlapping content, user activity suggests duplicates may generate additional or superior answers. Approximately 9% of duplicates receive more views than their original counterparts despite being closed. In this paper, we analyze duplicate questions from two perspectives. First, we analyze the experience of those who post duplicates using activity and reputation-based heuristics. Second, we compare the content of duplicates both in terms of their questions and answers to determine the degree of similarity between each duplicate pair. Through analysis of the MSR challenge dataset, we find that although duplicate questions are more likely to be created by inexperienced users, they often receive dissimilar answers to their original counterparts. Indeed, supplementary textual analysis using Natural Language Processing (NLP) techniques suggests duplicate questions provide additional information about the underlying concepts being discussed. We recommend that the Stack Overflow's duplication policy be revised to account for the benefits that leaving duplicate questions open may have for the developer community.","2574-3864","978-1-7281-3412-3","10.1109/MSR.2019.00046","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816736","Duplicate;Similarity;Reputation;Experience;NLP;Stack Overflow;Software;Value","User experience;Data mining;Software;Computer bugs;Natural language processing;Market research;Metadata","","9","","16","IEEE","29 Aug 2019","","","IEEE","IEEE Conferences"
"Development of Testability Prediction Models Considering Complexity Diversity for C Programs","H. -J. Choi; H. -S. Chae","Department of Electrical and Computer Engineering, Pusan National University, Busan, South Korea; Department of Electrical and Computer Engineering, Pusan National University, Busan, South Korea",IEEE Access,"14 Sep 2023","2023","11","","98469","98485","Testability prediction can help developers identify software components that require significant effort to ensure software quality, plan test activities, and recognize the need for refactoring to reduce the test effort. Previous studies have predicted code coverage as a measure of testability based on software metrics. However, these studies have primarily used object-oriented software with simple code structures. Industrial software developed using C is often more complex than the object-oriented software used in these studies. Models trained primarily on low-complexity training data may have insufficient training for the testability of high-complexity software. In this study, we developed a testability prediction model for C programs by considering the complexity diversity. We analyzed the impact of the complexity of the training/test data on the testability prediction model for C programs. The results showed that the model with the best performance achieves an MAE of 7.436 and an R2 of 0.813. Moreover, the results demonstrated that as the complexity diversity of the training data decreased, MAE increased from 5.203 to 6.361, and R2 decreased from 0.809 to 0.725. Furthermore, the performance of the model trained with low complexity-diversity deteriorated as the complexity level of the test data increased, with MAE increasing from 3.498 to 6.631, and R2 decreasing from 0.841 to 0.687. Additionally, in the correlation analysis between the model performance and the difference in the complexity of the training and test data, a strong correlation was observed, with MAE of 0.898 and R2 of -0.848.","2169-3536","","10.1109/ACCESS.2023.3312556","National Research Foundation of Korea (NRF) grant; Korea government (MSIT)(grant numbers:2021R1F1A1060056); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10242100","Coverage prediction;metrics;regression;software testability;testing","Measurement;Predictive models;Object oriented modeling;Software testing;Complexity theory;Training data;C languages","","","","51","CCBY","6 Sep 2023","","","IEEE","IEEE Journals"
"Diversity-Aware Mutation Adequacy Criterion for Improving Fault Detection Capability","D. Shin; S. Yoo; D. -H. Bae","School of Computing, KAIST, Daejeon, Republic of Korea; School of Computing, KAIST, Daejeon, Republic of Korea; School of Computing, KAIST, Daejeon, Republic of Korea","2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)","4 Aug 2016","2016","","","122","131","Many existing testing techniques adopt diversity as an important criterion for the selection and prioritization of tests. However, mutation adequacy has been content with simply maximizing the number of mutants that have been killed. We propose a novel mutation adequacy criterion that considers the diversity in the relationship between tests and mutants, as well as whether mutants are killed. Intuitively, the proposed criterion is based on the notion that mutants can be distinguished by the sets of tests that kill them. A test suite is deemed adequate by our criterion if the test suite distinguishes all mutants in terms of their kill patterns. Our hypothesis is that, simply by using a stronger adequacy criterion, it is possible to improve fault detection capabilities of mutation-adequate test suites. The empirical evaluation selects tests for real world applications using the proposed mutation adequacy criterion to test our hypothesis. The results show that, for real world faults, test suites adequate to our criterion can increase the fault detection success rate by up to 76.8 percentage points compared to test suites adequate to the traditional criterion.","","978-1-5090-3674-5","10.1109/ICSTW.2016.37","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7528954","Mutation testing;adequacy criteria;diversity","Fault detection;Conferences;Software testing;Electronic mail;Pathology;Subspace constraints","","8","","29","IEEE","4 Aug 2016","","","IEEE","IEEE Conferences"
"Test case prioritization incorporating ordered sequence of program elements","K. Wu; C. Fang; Z. Chen; Z. Zhao","State Key Laboratory for Novel Software Technology, Software Institute, Nanjing University, Nanjing, China; State Key Laboratory for Novel Software Technology, Software Institute, Nanjing University, Nanjing, China; State Key Laboratory for Novel Software Technology, Software Institute, Nanjing University, Nanjing, China; State Key Laboratory for Novel Software Technology, Software Institute, Nanjing University, Nanjing, China",2012 7th International Workshop on Automation of Software Test (AST),"2 Jul 2012","2012","","","124","130","Test suites often grow very large over many releases, such that it is impractical to re-execute all test cases within limited resources. Test case prioritization, which rearranges test cases, is a key technique to improve regression testing. Code coverage information has been widely used in test case prioritization. However, other important information, such as the ordered sequence of program elements measured by execution frequencies, was ignored by previous studies. It raises a risk to lose detections of difficult-to-find bugs. Therefore, this paper improves the similarity-based test case prioritization using the ordered sequence of program elements measured by execution counts. The empirical results show that our new technique can increase the rate of fault detection more significantly than the coverage-based ART technique. Moreover, our technique can detect bugs in loops more quickly and be more cost-benefits than the traditional ones.","","978-1-4673-1822-8","10.1109/IWAST.2012.6228980","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6228980","Test case prioritization;similarity;ordered sequence;edit distance;farthest-first algorithm","Computer bugs;Subspace constraints","","9","","26","IEEE","2 Jul 2012","","","IEEE","IEEE Conferences"
"Human-centric Software Engineering for Next Generation Cloud- and Edge-based Smart Living Applications","J. Grundy","Faculty of Information Technology, Monash University, Clayton, Victoria, Australia","2020 20th IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing (CCGRID)","14 Jul 2020","2020","","","1","10","Humans are a key part of software development, including customers, designers, coders, testers and end users. In this keynote talk I explain why incorporating human-centric issues into software engineering for next-generation applications is critical. I use several examples from our recent and current work on handling human-centric issues when engineering various `smart living' cloud- and edge-based software systems. This includes using human-centric, domain-specific visual models for non-technical experts to specify and generate data analysis applications; personality impact on aspects of software activities; incorporating end user emotions into software requirements engineering for smart homes; incorporating human usage patterns into emerging edge computing applications; visualising smart city-related data; reporting diverse software usability defects; and human-centric security and privacy requirements for smart living systems. I assess the usefulness of these approaches, highlight some outstanding research challenges, and briefly discuss our current work on new human-centric approaches to software engineering for smart living applications.","","978-1-7281-6095-5","10.1109/CCGrid49817.2020.00-93","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9139670","smart homes;smart cities;internet of things;edge computing;human factors;diversity and inclusion;software development","Software;Smart homes;Aging;Cloud computing;Software engineering;Visualization;Intelligent sensors","","14","","47","IEEE","14 Jul 2020","","","IEEE","IEEE Conferences"
"A multinational case study on using diverse feedback types applied to introductory programming learning","D. S. Campos; A. J. Mendes; M. J. Marcelino; D. J. Ferreira; L. M. Alves","Center for Informatics and Systems, University of Coimbra, Coimbra, Portugal; Center for Informatics and Systems, University of Coimbra, Coimbra, Portugal; Center for Informatics and Systems, University of Coimbra, Coimbra, Portugal; Institute of Informatics, Federal University of Goiás, Goiania, Brazil; Institute of Informatics, Federal University of Goiás, Goiania, Brazil",2012 Frontiers in Education Conference Proceedings,"18 Feb 2013","2012","","","1","6","Building written feedback, pedagogically sound, standardized and flexible enough to accommodate students who may be in different stages and learning curves is a complex and laborious task. In this paper, we describe a multinational case study involving diverse types of pedagogical feedback provided to Portuguese and Brazilian novice programming students. Programming errors, especially logical ones, can be used as a consistent metric for assessing learning. The research done looks for an innovative form to define content of several types of feedback. It also aims to create an efficient method for the discovery and mapping of students' logical programming errors. The results obtained so far using this approach are presented and analyzed.","2377-634X","978-1-4673-1352-0","10.1109/FIE.2012.6462412","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6462412","feedback;programming learning;logical errors;software testing;pedagogical rubric","Programming profession;Context;Software testing;Educational institutions;Complexity theory","","5","","15","IEEE","18 Feb 2013","","","IEEE","IEEE Conferences"
"Development of Software Cost Estimation and Resource Allocation Using Natural Language Processing, Cosine Similarity and Function Point","L. F. Mz; Z. Tahir; A. Suyuti","Departement of Informatics, Hasanuddin University, Makassar, Indonesia; Departement of Informatics, Hasanuddin University, Makassar, Indonesia; Departement of Electrical Engineering, Hasanuddin University, Makassar, Indonesia","2023 International Conference on Digital Applications, Transformation & Economy (ICDATE)","15 Sep 2023","2023","","","1","6","Cost estimation is the first step of software development that calculate costs and resources required. The budgeting process involves project analysis and factors such as absence of price calculations used as a basic reference. Major rely on prior works, and allocating experts needs a proper calculation basis for assigning experts to job, which impacts completion time and financial losses due to miscalculations. This research uses combination of methods such as text summarization word2vec for sentence analysis and weighting, catalog extraction to identify all SRS files detected as system features, including features had ambiguity, and cosine similarity to determine closeness of weighted values between sentences tested and function point method as counter to processing results of values generated from cosine similarity to produce new model in calculation and confirm that SRS is feasible to be applied as a calculation variable based on its functionality details. The results of this research apply new modeling techniques to produce basic price reference system, determining number of experts in software project budgeting that is accurate and efficient. Thus, it can be a tool to calculate software project budgeting in the future so that budgeting is too low or high and determine right number of experts.","","979-8-3503-1068-9","10.1109/ICDATE58146.2023.10248788","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10248788","Natural Language Processing;Software Cost Estimation;Software Requirement Specification (SRS);Text Summarization Word2vec;Cosine Similarity;Function Point","Analytical models;Costs;Biological system modeling;Software algorithms;Estimation;Feature extraction;Software","","","","15","IEEE","15 Sep 2023","","","IEEE","IEEE Conferences"
"Test Transfer Across Mobile Apps Through Semantic Mapping","J. -W. Lin; R. Jabbarvand; S. Malek","School of Information and Computer Sciences, University of California, Irvine, USA; School of Information and Computer Sciences, University of California, Irvine, USA; School of Information and Computer Sciences, University of California, Irvine, USA",2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),"9 Jan 2020","2019","","","42","53","GUI-based testing has been primarily used to examine the functionality and usability of mobile apps. Despite the numerous GUI-based test input generation techniques proposed in the literature, these techniques are still limited by (1) lack of context-aware text inputs; (2) failing to generate expressive tests; and (3) absence of test oracles. To address these limitations, we propose CraftDroid, a framework that leverages information retrieval, along with static and dynamic analysis techniques, to extract the human knowledge from an existing test suite for one app and transfer the test cases and oracles to be used for testing other apps with the similar functionalities. Evaluation of CraftDroid on real-world commercial Android apps corroborates its effectiveness by achieving 73% precision and 90% recall on average for transferring both the GUI events and oracles. In addition, 75% of the attempted transfers successfully generated valid and feature-based tests for popular features among apps in the same category.","2643-1572","978-1-7281-2508-4","10.1109/ASE.2019.00015","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952228","Test transfer, test migration, GUI testing, natural language processing, semantic similarity","Graphical user interfaces;Testing;Mobile applications;Data mining;Analytical models;Semantics;Manuals","","40","","43","IEEE","9 Jan 2020","","","IEEE","IEEE Conferences"
"Semantics-Based Obfuscation-Resilient Binary Code Similarity Comparison with Applications to Software and Algorithm Plagiarism Detection","L. Luo; J. Ming; D. Wu; P. Liu; S. Zhu","College of Information Sciences and Technology, Pennsylvania State University, University Park, PA; Department of Computer Science and Engineering, University of Texas at Arlington, Arlington, TX; College of Information Sciences and Technology, Pennsylvania State University, University Park, PA; College of Information Sciences and Technology, Pennsylvania State University, University Park, PA; Department of Computer Science and Engineering, Pennsylvania State University, University Park, PA",IEEE Transactions on Software Engineering,"8 Dec 2017","2017","43","12","1157","1177","Existing code similarity comparison methods, whether source or binary code based, are mostly not resilient to obfuscations. Identifying similar or identical code fragments among programs is very important in some applications. For example, one application is to detect illegal code reuse. In the code theft cases, emerging obfuscation techniques have made automated detection increasingly difficult. Another application is to identify cryptographic algorithms which are widely employed by modern malware to circumvent detection, hide network communications, and protect payloads among other purposes. Due to diverse coding styles and high programming flexibility, different implementation of the same algorithm may appear very distinct, causing automatic detection to be very hard, let alone code obfuscations are sometimes applied. In this paper, we propose a binary-oriented, obfuscation-resilient binary code similarity comparison method based on a new concept, longest common subsequence of semantically equivalent basic blocks , which combines rigorous program semantics with longest common subsequence based fuzzy matching. We model the semantics of a basic block by a set of symbolic formulas representing the input-output relations of the block. This way, the semantic equivalence (and similarity) of two blocks can be checked by a theorem prover. We then model the semantic similarity of two paths using the longest common subsequence with basic blocks as elements. This novel combination has resulted in strong resiliency to code obfuscation. We have developed a prototype. The experimental results show that our method can be applied to software plagiarism and algorithm detection, and is effective and practical to analyze real-world software.","1939-3520","","10.1109/TSE.2017.2655046","US National Science Foundation(grant numbers:CCF-1320605); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7823022","Software plagiarism detection;algorithm detection;binary code similarity comparison;obfuscation;symbolic execution;constraint solving","Semantics;Software development;Plagiarism;Binary codes;Software algorithms;Syntactics;Computational modeling","","70","","81","IEEE","18 Jan 2017","","","IEEE","IEEE Journals"
"Measuring the Diversity of a Test Set With Distance Entropy","Q. Shi; Z. Chen; C. Fang; Y. Feng; B. Xu","State Key Lab. for Novel Software Technology, Nanjing University, Nanjing, China; State Key Lab. for Novel Software Technology, Nanjing University, Nanjing, China; State Key Lab. for Novel Software Technology, Nanjing University, Nanjing, China; State Key Lab. for Novel Software Technology, Nanjing University, Nanjing, China; State Key Lab. for Novel Software Technology, Nanjing University, Nanjing, China",IEEE Transactions on Reliability,"1 Mar 2016","2016","65","1","19","27","Most existing metrics that we call white-box metrics, such as coverage metrics, require white-box information, like program structure information, and historical runtime information, to evaluate the fault detection capability of a test set. In practice, such white-box information is usually unavailable or difficult to obtain, which means they often cannot be used. In this paper, we propose a black-box metric, distance entropy, based on the diversification idea behind many published diversity-based techniques. Distance entropy provides a possible solution for test set evaluation when white-box information is not available. The empirical study illustrates that distance entropy can effectively evaluate test sets if the distance metric between tests is well defined. Meanwhile, distance entropy outperforms simple diversity metrics without increasing time complexity.","1558-1721","","10.1109/TR.2015.2434953","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7116633","Fault detection capability;diversity;metrics;minimum spanning tree","Entropy;Fault detection;Time complexity;Image edge detection;Testing;Euclidean distance","","22","","43","IEEE","2 Jun 2015","","","IEEE","IEEE Journals"
"Similarities Across Libraries: Making a Case for Leveraging Test Suites","D. Sondhi; D. Rani; R. Purandare","IIIT Delhi, New Delhi, India; GITA, Bhubaneswar, Odisha, India; IIIT Delhi, New Delhi, India","2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)","6 Jun 2019","2019","","","79","89","Developers may choose to implement a library, despite the existence of similar libraries, considering factors such as computational performance, language or platform dependency, and accuracy. As a result, GitHub is a host to several library projects that have overlaps in the functionalities. These overlaps have been of interest to developers from the perspective of code reuse or preferring one implementation over the other. We present an empirical study to explore the extent and nature of existence of these similarities in the library functions. We have further studied whether the similarity among functions across different libraries and their associated test suites can be leveraged to reveal defects in one another. Applying a natural language processing based approach on the documentations associated with functions, we have extracted matching functions across 12 libraries, available on GitHub, over 2 programming languages and 3 themes. Our empirical evaluation indicates existence of a significant number of similar functions across libraries in same as well as different programming languages where a language can influence the extent of existence of similarities. The test suites from another library can serve as an effective source of defect revealing tests. The study resulted in revealing 72 defects in 12 libraries. Further, we analyzed the source of origination of the defect revealing tests. We deduce that issue reports and pull requests can be beneficial in attaining quality test cases not only to test the libraries in which these issues are reported but also for other libraries that are similar in theme.","2159-4848","978-1-7281-1736-2","10.1109/ICST.2019.00018","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8730155","libraries;language;similarities;test suites;defect exposure;issue reports","Libraries;Documentation;Data mining;Testing;Training;Python;Natural language processing","","2","","33","IEEE","6 Jun 2019","","","IEEE","IEEE Conferences"
"Historical Information Stability based Reward for Reinforcement Learning in Continuous Integration Testing","T. Cao; Z. Li; R. Zhao; Y. Yang","College of Information Science and Technology Beijing University of Chemical Technology, Beijing, P.R.China; College of Information Science and Technology Beijing University of Chemical Technology, Beijing, P.R.China; College of Information Science and Technology Beijing University of Chemical Technology, Beijing, P.R.China; School of Mechanical Engineering and Automation Zhejiang Sci-Tech University, Zhejiang, P.R.China","2021 IEEE 21st International Conference on Software Quality, Reliability and Security (QRS)","10 Mar 2022","2021","","","231","242","In the continuous integration, test case prioritization can effectively alleviate the resource-intensive problems associated with frequent integration commits. Test case prioritization in continuous integration is a sequential decision problem from which reinforcement learning is applied and can effectively adapt and learn from a changing environment. However, continuous integration testing brings new problems of sparse rewards to reinforcement learning because of frequent integration with low test failure and this problem can be addressed by increasing the number of rewarded test cases. In this paper, we propose a reinforcement learning reward object selection strategy based on Test Case Synchronization and Diversity (TCSD) that rewards failed test cases and with an additional selection of passed test cases with potential failure ability. The experiments on six real-world industrial data sets show that TCSD improves the learning efficiency and fault detection ability of reinforcement learning 6.35% in average NAPFD compared with the traditional strategies.","2693-9177","978-1-6654-5813-9","10.1109/QRS54544.2021.00034","National Natural Science Foundation of China(grant numbers:61872026,61902015,62077003); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9724758","continuous integration;test case prioritization;reinforcement learning;reward strategy;test case synchronization;test case diversity","Fault detection;Conferences;Reinforcement learning;Software quality;Software reliability;Synchronization;Security","","","","53","IEEE","10 Mar 2022","","","IEEE","IEEE Conferences"
"A formal model of similarity testing for inheritance in object-oriented software","K. Benlhachmi; M. Benattou","RLCST Research Laboratory in Computer Science and Telecommunications, University Ibn Tofail, Kenitra, Morocco; RLCST Research Laboratory in Computer Science and Telecommunications, University Ibn Tofail, Kenitra, Morocco",2012 Colloquium in Information Science and Technology,"20 Dec 2012","2012","","","38","42","The work presented in this paper extends the constraint model defined for modeling the specification of a given method to its redefinition in subclass using inheritance principle. The main objective is to establish theoretical concepts which allow to compare the behavior of a redefined method in a subclass with its original behavior in the super-class relatively to the basic specification. The key idea of our approach is based on a partition of domains for testing the similarity between the redefined methods and their basic methods in super-class. The proposed test oracle uses a random data generation to test the similarity of methods in the context of inheritance mechanism.","2327-1884","978-1-4673-2725-1","10.1109/CIST.2012.6388060","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6388060","inheritance;formal specification;conformity test;constraints resolution;valid data;invalid data;test data generation","Legged locomotion;Computer science","","4","","12","IEEE","20 Dec 2012","","","IEEE","IEEE Conferences"
"New approach to software code diversification in interpreted languages based on the moving target technology","M. Styugin; V. Zolotarev; A. Prokhorov; R. Gorbil","Department of Information Security, SibSAU, Krasnoyarsk, Russia; Department of Information Security, SibSAU, Krasnoyarsk, Russia; Department of Information Security, SibSAU, Krasnoyarsk, Russia; Department of Applied Mathematics and Information, Security SFU, Krasnoyarsk, Russia",2016 IEEE 10th International Conference on Application of Information and Communication Technologies (AICT),"27 Jul 2017","2016","","","1","5","The paper presents a method based on moving target technology for protecting software components of distributed systems. Practical implementation of this method is a code diversifier, which adds intermediary functions and inserts transformation of key variables into the program code. Theoretical analysis of the method presented here demonstrated its effectiveness even when an adversary had access to a application's program code. The diversifier presented below can also function in a mode of program code obfuscation, which was tested and demonstrated by the example of interpreted programming language functions. Metrics obtained from the program code after obfuscation, showed sufficient level of code modification for independent use in obfuscation mode.","2472-8586","978-1-5090-1841-3","10.1109/ICAICT.2016.7991694","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7991694","software security;diversification;obfuscation;moving target defense","Software;Measurement;Computer security;Information security;Software algorithms;Random variables","","5","","13","IEEE","27 Jul 2017","","","IEEE","IEEE Conferences"
"Generation of Two-Cycle Tests for Structurally Similar Circuits","J. Joe; N. Mukherjee; I. Pomeranz; J. Rajski","School of Electrical and Computer Engineering, Purdue University, West Lafayette, IN, USA; Siemens Digital Industries Software, Wilsonville, OR, USA; School of Electrical and Computer Engineering, Purdue University, West Lafayette, IN, USA; Siemens Digital Industries Software, Wilsonville, OR, USA",IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems,"19 Jan 2024","2024","43","2","694","703","VLSI design flows improve design parameters (performance, power, area, and testability) iteratively. Whereas the “shift left” trend implies that changes at the RTL are preferred for improving the design, it is sometimes necessary to make gate-level changes, e.g., because of layout changes or ECO. In an iterative design flow, repeated ATPG to evaluate the testability of a design after design changes have been made creates a bottleneck. The goal of this article is to address this bottleneck considering two-cycle tests for transition faults. The test generation procedure described in third article transforms an LOC test set generated for an earlier version of the design into an LOC test set for a new version without repeating the entire test generation process. To enable the transformation, it is necessary to find a mapping between the inputs and outputs of the earlier and new versions of the design, taking into consideration that RTL resynthesis may produce a new gate-level netlist, with new signal names and different input and output orders. To address two-cycle tests, the mapping is performed over two time frames of the design. Experimental results for industrial circuits with changes made at the RTL as well as gate-level demonstrate significant runtime gains with the test generation procedure described in this article.","1937-4151","","10.1109/TCAD.2023.3321973","Siemens Digital Industries Software; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10271261","Signatures;structural similarity;testability;transition faults","Circuit faults;Logic gates;Test pattern generators;Runtime;Iterative methods;Industries;Transforms","","","","24","IEEE","3 Oct 2023","","","IEEE","IEEE Journals"
"Measuring Code Behavioral Similarity for Programming and Software Engineering Education","S. Li; X. Xiao; B. Bassett; T. Xie; N. Tillmann","University of Illinois at Urbana-Champaign, Champaign, IL, USA; NEC Laboratories America, Princeton, NJ, USA; University of Illinois at Urbana-Champaign, Champaign, IL, USA; University of Illinois at Urbana-Champaign, Champaign, IL, USA; Microsoft Research, Redmond, WA, USA",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","501","510","In recent years, online programming and software engineering education via information technology has gained a lot of popularity. Typically, popular courses often have hundreds or thousands of students but only a few course staff members. Tool automation is needed to maintain the quality of education. In this paper, we envision that the capability of quantifying behavioral similarity between programs is helpful for teaching and learning programming and software engineering, and propose three metrics that approximate the computation of behavioral similarity. Specifically, we leverage random testing and dynamic symbolic execution (DSE) to generate test inputs, and run programs on these test inputs to compute metric values of the behavioral similarity. We evaluate our metrics on three real-world data sets from the \pexforfun platform (which so far has accumulated more than 1.7 million game-play interactions). The results show that our metrics provide highly accurate approximation to the behavioral similarity. We also demonstrate a number of practical applications of our metrics including hint generation, progress indication, and automatic grading.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883337","Behavioral Similarity;Symbolic Execution;Programming Education","Measurement;Software engineering;Programming profession;Education;Testing;Automation","","","","30","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Validity of Cosine Similarity Measurement of Functional Requirements and Steps Performed Using Cohen Kappa on SRS Scenery Artifacts","Z. Syahrini; Y. Priyadi; A. Herdiani","Department of Informatics, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia; Department of Informatics, Telkom University, Bandung, Indonesia","2023 10th International Conference on Electrical Engineering, Computer Science and Informatics (EECSI)","31 Oct 2023","2023","","","631","636","The Scenery application is informative and educative regarding tourist places in Indonesia. Differences in implementation in application development can cause a discrepancy between the client's needs that the software developer has made. Therefore, to measure success in developing the Scenery application, it is necessary to adjust and change the artifacts that form the basis of the SRS documentation. In this study, the artifact was part of the Requirements Specification in the form of Functional Requirements and part of the Use Case Description in the Step Performed. Through a Textual Similarity approach, the two artifacts were used as measuring tools to see the results of the Similarity of a software requirement between the Client and the Developer. This research uses the Cosine Similarity formula to implement Textual Similarity in Functional Requirements and Step Performed. There are results to help the functional needs of artifacts as much as 14 with document labeling from d1-d14 and for steps carried out as many as 14 with labeling from d15-d28. This study produced a matching value of -0.0290, meaning ""less than chance agreement."" This validity measurement can be used as a reference for improving the quality of artifacts in SRS.","","979-8-3503-0686-6","10.1109/EECSI59885.2023.10295586","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10295586","Step Performed;Functional Requirements;Cosine Similarity;Cohen kappa;Textual Similarity","Electrical engineering;Computer science;Electric variables measurement;Documentation;Software;Labeling;Software measurement","","","","23","IEEE","31 Oct 2023","","","IEEE","IEEE Conferences"
"Comparing Input Prioritization Techniques for Testing Deep Learning Algorithms","V. Mosin; M. Staron; D. Durisic; F. G. d. O. Neto; S. K. Pandey; A. C. Koppisetty","Research & Development, Volvo Cars, Gothenburg, Sweden; Dept. of CSE Chalmers, University of Gothenburg, Sweden; Research & Development, Volvo Cars, Gothenburg, Sweden; Dept. of CSE Chalmers, University of Gothenburg, Sweden; Dept. of CSE Chalmers, University of Gothenburg, Sweden; Research & Development, Volvo Cars, Gothenburg, Sweden",2022 48th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"16 Jan 2023","2022","","","76","83","Deep learning (DL) systems are becoming an essential part of software systems, so it is necessary to test them thoroughly. This is a challenging task since the test sets can grow over time as the new data is being acquired, and it becomes time-consuming. Input prioritization is necessary to reduce the testing time since prioritized test inputs are more likely to reveal the erroneous behavior of a DL system earlier during test execution. Input prioritization approaches have been rudimentary analyzed against each other, this study compares different input prioritization techniques regarding their effectiveness and efficiency. This work considers surprise adequacy, autoencoder-based, and similarity-based input prioritization approaches in the example of testing a DL image classification algorithms applied on MNIST, Fashion-MNIST, CIFAR-10, and STL-10 datasets. To measure effectiveness and efficiency, we use a modified APFD (Average Percentage of Fault Detected), and set up & execution time, respectively. We observe that the surprise adequacy is the most effective (0.785 to 0.914 APFD). The autoencoder-based and similarity-based techniques are less effective, with the performance from 0.532 to 0.744 APFD and 0.579 to 0.709 APFD, respectively. In contrast, the similarity-based and surprise adequacy-based approaches are the most and least efficient, respectively. The findings in this work demonstrate the trade-off between the considered input prioritization techniques to understanding their practical applicability for testing DL algorithms.","","978-1-6654-6152-8","10.1109/SEAA56994.2022.00020","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10011200","test prioritization;deep learning;diversity-based testing","Deep learning;Fault detection;Software algorithms;Software systems;Time measurement;Classification algorithms;Task analysis","","1","","31","IEEE","16 Jan 2023","","","IEEE","IEEE Conferences"
"Measurement of Similarity Between Requirement Elicitation and Requirement Specification Using Text Pre-Processing in the Cinemaloka Application","J. A. Pamungkas; Y. Priyadi; M. J. Alibasa","Department of Informatics, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia",2022 IEEE World AI IoT Congress (AIIoT),"13 Jul 2022","2022","","","672","678","There are differences in perceptions between Clients and Developers regarding software requirements specifications therefore, research is needed to determine the perceived similarity between software requirements specifications and requirements elicitation results. The SRS document used in this study is called the Cinemaloka application. This document contains business processes and Requirements Specifications related to website-based cinema ticket reservations. This study aims to measure the suitability of perceptions between developers and clients regarding the specification of software requirements that will be or are being built. There are methods that are combined in this research, namely: determining the similarity of the requirement specification with the elicitation of requirements, analyzing the text contained in the elicitation results, Text Pre-processing, and validation through Gwet's AC1. The results of the measurement of the similarity between the elicitation of requirements and the requirement specification carried out in this study resulted in a match between the applications made and the wishes of potential users/clients. Through stages such as CountVectorizer, PorterStemmer, and Cosine Similarity, resulting in a match of 0.717144. Kappa Score from Gwet's AC1 formula using Python is -0.2222, which means “Less than Chance-agreement,” while the Kappa Score value using a questionnaire filled out by the Expert is 0.5378, which means “Moderate Aggregation.”.","","978-1-6654-8453-4","10.1109/AIIoT54504.2022.9817193","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9817193","Similarity;Requirement Specification;Requirement Elicitation;Text Pre-Processing;Gwet's AC1","Motion pictures;Software;Software measurement;Artificial intelligence;Python;Business","","9","","21","IEEE","13 Jul 2022","","","IEEE","IEEE Conferences"
"In search of effective diversity: a six-language study of fault-tolerant flight control software","A. Avizienis; M. R. Lyu; W. Schutz","UCLA Dependable Computing and Fault-Tolerant Systems Laboratory, Computer Science Department, University of California, Los Angeles, CA, USA; UCLA Dependable Computing and Fault-Tolerant Systems Laboratory, Computer Science Department, University of California, Los Angeles, CA, USA; UCLA Dependable Computing and Fault-Tolerant Systems Laboratory, Computer Science Department, University of California, Los Angeles, CA, USA",[1988] The Eighteenth International Symposium on Fault-Tolerant Computing. Digest of Papers,"6 Aug 2002","1988","","","15","22","Multiversion software systems achieve fault tolerance through software redundancy and diversity. The authors investigated multiversion software systems using six different programming languages to create six versions of software for an automatic landing program. The rationale, preparation, execution, and evaluation of this investigation are reported.<>","","0-8186-0867-6","10.1109/FTCS.1988.5291","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5291","","Fault tolerance;Aerospace control;Fault tolerant systems;Aircraft manufacture;Software safety;Laboratories;Software systems;Computer languages;Computer industry;Automatic testing","","45","","","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"A Diversity Model Based on Failure Distribution and Its Application in Safety Cases","L. Chen; J. May","Safety Systems Research Centre, University of Bristol, Bristol, UK; Safety Systems Research Centre, University of Bristol, Bristol, UK",2014 Eighth International Conference on Software Security and Reliability (SERE),"15 Sep 2014","2014","","","1","10","This work develops a new basis for evaluating the reliability benefits of diverse software, based on fault injection testing. In particular, the work investigates forms of argumentation that could be used to justify diversity as a basis for the construction of safety claims. Failure distributions of two versions of diverse software under various fault conditions are revealed separately by fault injection methods, and then the common failure probability of the version-pair can be estimated. The approach is justified theoretically, and cross validated with other work. This method is also used to explain the fundamental influence of failure distributions on diversity.","","978-1-4799-4296-1","10.1109/SERE.2014.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6895410","Software Diversity;Safety Case;Safety Critical System;Fault Injection;Multi-version;Reliability","Software;Safety;Sociology;Statistics;Software reliability;Mathematical model","","","","22","IEEE","15 Sep 2014","","","IEEE","IEEE Conferences"
"Selecting Products for High-strength T-wise Testing of Software Product Line by Multi-Objective Method","Y. Qian; C. Zhang; F. Wang","School of Computer Science and Technology, Anhui University, Hefei, China; School of Computer Science and Technology, Anhui University, Hefei, China; School of Computer Science and Technology, Anhui University, Hefei, China",2018 IEEE International Conference on Progress in Informatics and Computing (PIC),"6 May 2019","2018","","","370","378","Combinatorial interaction testing is a hot topic in software testing. This approach has been applied to model-based testing of Software Product Line (SPL). The strategy is to generate a set of product configurations to achieve high t-wise coverage for satisfying test objective. The number of valid combinations increases explosively with the increase of interaction strength. Therefore, how to choose the minimum number of product configuration to achieve maximum t-wise coverage is the complex problem in high-strength feature interaction. This paper introduces a multi-objective method to solve such problem. We use three objectives to decide product selection: t-wise coverage, number of products and similarity. Our method can generate a set of solutions quickly and the maximum t-wise coverage can be achieved with the smallest number of products.","","978-1-5386-7672-1","10.1109/PIC.2018.8706270","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8706270","software product line;testing;t-wise;similarity;multi-objective","","","","","28","IEEE","6 May 2019","","","IEEE","IEEE Conferences"
"Effect of test completeness and redundancy measurement on post release failures — An industrial experience report","T. Gergely; Á. Beszedes; T. Gyimóthy; Milán Imre Gyalai","Department of Software Engineering, University of Szeged, Szeged, Hungary; Department of Software Engineering, University of Szeged, Szeged, Hungary; Department of Software Engineering, University of Szeged, Szeged, Hungary; Department of Software Engineering, University of Szeged, Szeged, Hungary",2010 IEEE International Conference on Software Maintenance,"25 Oct 2010","2010","","","1","10","In risk-based testing, compromises are often made to release a system in spite of knowing that it has outstanding defects. In an industrial setting, time and cost are often the “exit criteria” and - unfortunately - not the technical aspects like coverage or defect ratio. In such situations, the stakeholders accept that the remaining defects will be found after release, so sufficient resources are allocated to the “stabilization” phases following the release. It is hard for many organizations to see that such an approach is significantly costlier than trying to locate the defects earlier. We performed an empirical investigation of this for one of our industrial partners (a financial company). In this project, significant perfective maintenance was performed on the large information system. Based on changes made to the system, we carried out procedure level code coverage measurements with code level change impact analysis, and a similarity-based comparison of test cases in order to quantitatively check the completeness and redundancy of the tests performed. In addition, we logged and compared the number of defects found during testing and live operation. The data obtained were surprising for both the developers and the customer as well, leading to a major reorganization of their development, testing, and operation processes. After the reorganization, a significant improvement in these indicators for testing efficiency was observed.","1063-6773","978-1-4244-8629-8","10.1109/ICSM.2010.5609692","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5609692","Code coverage;White-box testing;Impact analysis;Test redundancy;Test similarity;Test efficiency;Risk-based testing","Testing;Redundancy;Software;Companies;Maintenance engineering;Phase measurement","","1","","20","IEEE","25 Oct 2010","","","IEEE","IEEE Conferences"
"Text Data Processing in Requirement Specifications as a Reference for Similarities Between Use Case Diagrams and Use Case Descriptions for Smart Sleeping Lamp Application Documents","T. A. Hutajulu; Y. Priyadi; A. Gandhi","Department of Informatics, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia",2022 IEEE World AI IoT Congress (AIIoT),"13 Jul 2022","2022","","","665","671","Requirement Specification is defined as a condition or capability that must be met or possessed by a system or system component to comply with contracts, standards, specifications, or in other officially enforced documents. In this study, the example of the SRS document used is the Smart Sleeping Lamp Application, a software application to help and provide solutions to everyone who experiences insomnia. There are differences in interpreting the activities that exist in the Use Case Diagram artifact, with the Use Case Description, which provides an overview of the functionality of a process, so that it can show the involvement of an activity related to the Use Case Diagram. The purpose of this study is to process text data between the Use Case Diagram and the Use Case Description contained in the Software Requirements Specification (SRS) to produce similarity between the artifacts contained in the SRS. In this study, the extraction process was implemented in several parts, namely: Use Case Description (on UCDES1, UCDES2, UCDES3, UCDES4, UCDES5), and Use Case Diagrams (on UCD01, UCD02, UCDE03, UCD04, UCDE05). There are important things produced in this study, namely: The highest similarity is found in the UCDES1 and UCD01 documents with a similarity value of 0.69713076, the highest similarity is obtained in documents between the words “sleeping” and “lights” with a similarity value of 0.7500, the highest value Kappa Score in the program python uses the Gwet's AC1 formula of 0.06097 which means “Less than Chance-agreement,” and the results obtained from the calculation of the questionnaire from the experts are 0.84787 which means “Almost Perfect.”","","978-1-6654-8453-4","10.1109/AIIoT54504.2022.9817197","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9817197","Requirement Specification;Similarity;Use Case Diagram;Use Case Description;SRS","Data processing;Software;Artificial intelligence;Standards;Contracts;Python","","7","","26","IEEE","13 Jul 2022","","","IEEE","IEEE Conferences"
"CIT4DNN: Generating Diverse and Rare Inputs for Neural Networks Using Latent Space Combinatorial Testing","S. Dola; R. McDaniel; M. B. Dwyer; M. L. Soffa","University of Virginia, Charlottesville, Virginia, USA; University of Virginia, Charlottesville, Virginia, USA; University of Virginia, Charlottesville, Virginia, USA; University of Virginia, Charlottesville, Virginia, USA",2024 IEEE/ACM 46th International Conference on Software Engineering (ICSE),"14 Jun 2024","2024","","","1446","1458","Deep neural networks (DNN) are being used in a wide range of applications including safety-critical systems. Several DNN test generation approaches have been proposed to generate fault-revealing test inputs. However, the existing test generation approaches do not systematically cover the input data distribution to test DNNs with diverse inputs, and none of the approaches investigate the relationship between rare inputs and faults. We propose CIT4DNN, an automated black-box approach to generate DNN test sets that are feature-diverse and that comprise rare inputs. CIT4DNN constructs diverse test sets by applying combinatorial interaction testing to the latent space of generative models and formulates constraints over the geometry of the latent space to generate rare and fault-revealing test inputs. Evaluation on a range of datasets and models shows that CIT4DNN generated tests are more feature diverse than the state-of-the-art, and can target rare fault-revealing testing inputs more effectively than existing methods.","1558-1225","979-8-4007-0217-4","10.1145/3597503.3639106","National Science Foundation(grant numbers:2019239,2129824,2217071); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10548914","deep neural networks;test generation;test coverage;combinatorial interaction testing","Geometry;Combinatorial testing;Closed box;Artificial neural networks;Test pattern generators;Testing;Software engineering","","","","71","CCBY","14 Jun 2024","","","IEEE","IEEE Conferences"
"Plagiarism detection based on blinded logical test automation results and detection of textual similarity between source codes","D. Santos de Campos; D. James Ferreira","Institute of Informatics (INF), Federal University of Goiás (UFG), Goiânia, GO, Brazil; Institute of Informatics (INF), Federal University of Goiás (UFG), Goiânia, GO, Brazil",2020 IEEE Frontiers in Education Conference (FIE),"4 Dec 2020","2020","","","1","9","This Research to Practice Full Paper presents in this paper. Finding logical errors is the most difficult skill for students from all sorts of disciplines that involve computer programming. Unfortunately, because of this difficulty, some students resort to plagiarism. Plagiarism corrupts the evaluation process. Several tools are used in different researches for this purpose. Recent research has defined a taxonomy of the most relevant types of plagiarism that can be found in source codes. The Hybrid Framework was made to map the student plagiarisms using NLP tecnhics and software test automation techniques for automatic exercise correction with tools available for this purpose. This framework has been tested in the laboratory with promising results.","2377-634X","978-1-7281-8961-1","10.1109/FIE44824.2020.9274098","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9274098","Plagiarism;Code similarity;Tools to Assess Learning;Natural Language Processing;Automatic Exercise Correction;TPACK","Plagiarism;Tools;Programming;Taxonomy;Programming profession;Software;Natural language processing","","3","","29","IEEE","4 Dec 2020","","","IEEE","IEEE Conferences"
"Gender Diversity and Community Smells: A Double-Replication Study on Brazilian Software Teams","C. Sarmento; T. Massoni; A. Serebrenik; G. Catolino; D. Tamburri; F. Palomba","Federal University of Campina Grande, Campina Grande, Brazil; Federal University of Campina Grande, Campina Grande, Brazil; Eindhoven University of Technology, Eindhoven, The Netherlands; Jheronimus Academy of Data Science, 's Hertogenbosch, The Netherlands; Jheronimus Academy of Data Science, 's Hertogenbosch, The Netherlands; University of Salerno, Salerno, Italy","2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)","21 Jul 2022","2022","","","273","283","Social debts in software teams are gaining increasing attention from the research community due to their potential adverse effects on software quality. For instance, community smells are indicators of sub-optimal organizational structures and may well lead to the emergence of social debt. Previous studies analyzed which factors influence the emergence/mitigation of such smells. In particular, studies by Catolino et al. showed how factors related to team composition, particularly gender diversity, correlated to the mitigation of community smells. However, a confirmation survey on 60 practitioners suggested that these results were not aligned with the experts' perceptions. In a separate survey, Catolino et al. collected the most common team refactoring strategies for those community smells. In this work we replicate two studies by those authors, focusing on the Brazilian software teams; culture-specific expectations on the behavior of people of different genders might have affected the perception of the importance of gender diversity and refactoring strategies when mitigating community smells. We translated the survey instrument used by Catolino et al. to Brazilian Portuguese and recruited 184 Brazilian developers. Re-sults did not show significant differences from the original study; indeed, participants perceived gender diversity as less valuable to mitigate community smells than such factors like experience or team size. Additionally, we performed a qualitative analysis of an open question within the questionnaire for the refactoring strategies. Brazilian developers agree with the original studies for most smells, mainly promoting restructuring communities, creating a communication plan and mentoring. We believe these results provide further evidence on the problem and its implications when managing software teams, avoiding technical debt and maintenance issues due to team communication and coordination problems.","1534-5351","978-1-6654-3786-8","10.1109/SANER53432.2022.00043","European Commission(grant numbers:RADON-H2020); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9825896","Gender Diversity;Development Teams;Commu-nity Smells;Social Debt","Leadership;Instruments;Focusing;Software quality;Maintenance engineering;Particle measurements;Software","","5","","39","IEEE","21 Jul 2022","","","IEEE","IEEE Conferences"
"Hierarchical similarity measurement model of program execution","A. Reungsinkonkarn","Department of Computer Information System, Assumption University, Bangkok, Thailand",2013 IEEE 4th International Conference on Software Engineering and Service Science,"30 Sep 2013","2013","","","255","261","The concept of similarity measurement is widely used in a number of research areas such as data mining, software testing and debugging, and software security. Several researches have been conducted to continuously improve and explore for a better and new measurement of similarity. The similarity measurement mostly deals with data, items, or features of a program. However, there is no similarity measurement for output of program execution which can be various data types including primitive, abstract and heterogeneous data types such as numeric, character, list, tree, table (relation) and object. Lack of these measurements can reduce the effectiveness of software testing techniques or the quality of vulnerability detection methods to a certain degree. This paper proposes hierarchical similarity measurement model for measuring program execution. The measurement is categorized and arranged into successive levels according to its data type, and its calculation for a higher level data type is performed based on lower level data types. Some operations performed on our similarity measurement are briefly introduced. In addition, we present a similarity graph that can be used in an optimization process.","2327-0594","978-1-4673-5000-6","10.1109/ICSESS.2013.6615300","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6615300","Similarity measurement;Data mining;Optimization;Evolution computation;Software engineering","Remuneration;Bismuth;Arrays;Weaving","","2","","9","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"Emulation Tool Diversity for Future Engineering Education","A. A. Periola; A. A. Alonge; K. A. Ogudo","Department of Electrical and Electronics Engineering Technology, University of Johannesburg; Department of Electrical and Electronics Engineering Technology, University of Johannesburg; Department of Electrical and Electronics Engineering Technology, University of Johannesburg",2022 IEEE IFEES World Engineering Education Forum - Global Engineering Deans Council (WEEF-GEDC),"3 Jan 2023","2022","","","1","5","Engineering academia makes use of emulation and simulation i.e software tools. These software tools should evolve to meet the new demands of provisioning of quality engineering education. This requires additional research consideration and is addressed in the presented research. The research proposes the evolution of simulation and emulation tools and describes a model wherein the intelligence is integrated in future emulation and simulation tools used in engineering education and research. The incorporation of intelligence in this case leads to a notion of emulation and simulation tool diversity. In this case, the diversity implies the choice of simulation and emulation tool that meets the learning preferences of an individual. In addition, the research presents a framework wherein the proposed solution executes its function within the environment of a higher education institution. This is done for the cases of a constrained and non-constrained engineering faculty in a higher education institution.","","978-1-6654-7528-0","10.1109/WEEF-GEDC54384.2022.9996237","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9996237","Emulation;Simulation;Computing Modelling;Engineering Education;Tool Diversity","Training;Emulation;Data acquisition;Computer architecture;Convolutional neural networks;Software tools;Engineering students","","","","25","IEEE","3 Jan 2023","","","IEEE","IEEE Conferences"
"Methods for Automatic Web Page Layout Testing and Analysis: A Review","I. Prazina; Š. Bećirović; E. Cogo; V. Okanović","Faculty of Electrical Engineering, University of Sarajevo, Sarajevo, Bosnia and Herzegovina; Faculty of Electrical Engineering, University of Sarajevo, Sarajevo, Bosnia and Herzegovina; Faculty of Electrical Engineering, University of Sarajevo, Sarajevo, Bosnia and Herzegovina; Faculty of Electrical Engineering, University of Sarajevo, Sarajevo, Bosnia and Herzegovina",IEEE Access,"15 Feb 2023","2023","11","","13948","13964","Methods for automatic analysis of user interfaces are essential for a wide range of applications in computer science and software engineering. These methods are used in software security, document archiving, human-computer interaction, software engineering, and data science. Even though these methods are essential, no single research systematically lists most of the methods and their characteristics. This paper aims to give an overview of different solutions and their applications in the separate processes of automatic analysis of user interfaces. The main focus is on the techniques that analyze web page layouts and web page structure. Web pages’ style, type of content, and even structure constantly (often drastically) change, as do methods that analyze them. The fact that most methods use very different datasets and web pages of various complexities are some of the reasons that the direct comparison of methods is difficult, if not impossible. Another fact is that the vast applications of methods practically solve similar problems. With these facts in mind, in the paper, we surveyed relevant scientific articles, categorized them, and provided an overview of how these methods have developed over time.","2169-3536","","10.1109/ACCESS.2023.3242549","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10036415","GUI similarity detection;GUI testing;HCI;information retrieval;software engineering","Web pages;Layout;Information retrieval;Graphical user interfaces;Browsers;Human computer interaction;Software engineering","","2","","73","CCBY","3 Feb 2023","","","IEEE","IEEE Journals"
"Similarity Software Requirement Specification (SRS) Elicitation Based on the Requirement Statement Using Text Mining on the MNC Play Inventory Management Application","A. Azzam; Y. Priyadi; J. H. Husen","Department of Informatics, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia; Department of Software Engineering, Telkom University, Bandung, Indonesia",2021 4th International Conference of Computer and Informatics Engineering (IC2IE),"27 Dec 2021","2021","","","123","128","In the software development stage, there are needs analysis activities carried out through elicitation activities, which will produce requirements specification documents. In this document, there is a discrepancy in the perception of elicitation results between developers and clients regarding software requirements based on two methods, namely: elicitation and the Requirement Statement. There are specific steps to achieve this goal, namely: determining the similarity between the software requirements specifications and the elicitation results, analyzing the text contained in the elicitation results using the text mining method, and testing the validity and reliability of the research results through the use of Gwet's AC1 formula. The results obtained are the document with the highest similarity value is the 6th document, namely ""The manager can approve items that the supervisor has approved,"" and the 8th document, namely ""Admin can approve items that supervisors and managers have approved."" The resulting similarity figure is 0.927587, which means that the similarity level is very high from the number, which is close to number 1.","","978-1-6654-4288-6","10.1109/IC2IE53219.2021.9649023","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9649023","elicitation;similarity;software requirement specification;requirement sStatement;text mining","Text mining;Inventory management;Software;Software reliability;Informatics;Testing","","9","","31","IEEE","27 Dec 2021","","","IEEE","IEEE Conferences"
"scenoRITA: Generating Diverse, Fully Mutable, Test Scenarios for Autonomous Vehicle Planning","Y. Huai; S. Almanee; Y. Chen; X. Wu; Q. A. Chen; J. Garcia","University of California Irvine, Irvine, CA, USA; University of California Irvine, Irvine, CA, USA; University of California Irvine, Irvine, CA, USA; University of California Irvine, Irvine, CA, USA; University of California Irvine, Irvine, CA, USA; University of California Irvine, Irvine, CA, USA",IEEE Transactions on Software Engineering,"16 Oct 2023","2023","49","10","4656","4676","Autonomous Vehicles (AVs) leverage advanced sensing and networking technologies (e.g., camera, LiDAR, RADAR, GPS, DSRC, 5G, etc.) to enable safe and efficient driving without human drivers. Although still in its infancy, AV technology is becoming increasingly common and could radically transform our transportation system and by extension, our economy and society. As a result, there is tremendous global enthusiasm for research, development, and deployment of AVs, e.g., self-driving taxis and trucks from Waymo and Baidu. The current practice for testing AVs uses virtual tests—where AVs are tested in software simulations—since they offer a more efficient and safer alternative compared to field operational tests. Specifically, search-based approaches are used to find particularly critical situations. These approaches provide an opportunity to automatically generate tests; however, systematically creating valid and effective tests for AV software remains a major challenge. To address this challenge, we introduce scenoRITA, a test generation approach for AVs that uses an evolutionary algorithm with (1) a novel gene representation that allows obstacles to be fully mutable, hence, resulting in more reported violations and more diverse scenarios, (2) 5 test oracles to determine both safety and motion sickness-inducing violations and (3) a novel technique to identify and eliminate duplicate tests. Our extensive evaluation shows that scenoRITA can produce test scenarios that are more effective in revealing ADS bugs and more diverse in covering different parts of the map compared to other state-of-the-art test generation approaches.","1939-3520","","10.1109/TSE.2023.3309610","NSF(grant numbers:1823262,1929771,1932464,2145493); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10234383","Embedded/cyber-physical systems;search-based software engineering;software testing","Automobiles;Accidents;Safety;Trajectory;Test pattern generators;Manuals;Web and internet services","","2","","123","IEEE","30 Aug 2023","","","IEEE","IEEE Journals"
"Are We There Yet? Filling the Gap Between Binary Similarity Analysis and Binary Software Composition Analysis","H. Wang; Z. Liu; S. Wang; Y. Wang; Q. Tang; S. Nie; S. Wu","Hong Kong University of Science and Technology; Hong Kong University of Science and Technology; Hong Kong University of Science and Technology; Northeastern University, China; Keen Security Lab, Tencent; Keen Security Lab, Tencent; Keen Security Lab, Tencent",2024 IEEE 9th European Symposium on Security and Privacy (EuroS&P),"22 Aug 2024","2024","","","506","523","Software composition analysis (SCA) has attracted the attention of the industry and academic community in recent years. Given a piece of program source code, SCA facilitates extracting certain components from the input program and matching the extracted components with opensource software (OSS) libraries. Despite the prosperous development of SCA, binary SCA (BSCA) is highly challenging and still underdeveloped. Few available BSCA solutions are either closed source (for commercial usage) or suffer from low performance. Nevertheless, a related line of research, binary similarity analysis (BSA), which decides the similarity between two pieces of binary code, has been progressively developed in academia for decades. De facto BSA techniques, often based on deep learning, efficiently analyze large-scale executables with high accuracy. This study explores bridging the gap between state-of-the-art (SOTA) BSA and BSCA. We spent considerable manual effort building the first large real-world benchmark dataset, containing over 55 million lines of C/C++ code. Then, we establish our BSCA pipeline by extending and calibrating the SOTA SCA pipeline. Particularly, we concretize the key procedure of BSCA, namely matching a binary component with OSS using six SOTA BSA techniques. Evaluation using our benchmark dataset reveals that simply employing BSA in BSCA exhibits less desirable accuracy, as BSCA faces unique challenges. After inspecting the failed cases, we propose three enhancements whose hybrid usage improves the F1 score of BSCA by over 30% and outperforms SOTA commercial BSCA software. Our experiment on 1-day vulnerability detection demonstrates our BSCA framework's effectiveness. We also discuss several open challenges and potential solutions to augment BSCA solutions.","2995-1356","979-8-3503-5425-6","10.1109/EuroSP60621.2024.00034","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10629030","Software composition analysis;Software reuse;Binary code analysis;Binary similarity analysis;Vulnerability detection","Industries;Accuracy;Source coding;Pipelines;Manuals;Benchmark testing;Software","","","","106","IEEE","22 Aug 2024","","","IEEE","IEEE Conferences"
"Improving fault localization for Simulink models using search-based testing and prediction models","B. Liu; Lucia; S. Nejati; L. C. Briand","SnT Centre, University of Luxembourg, Luxembourg; SnT Centre, University of Luxembourg, Luxembourg; SnT Centre, University of Luxembourg, Luxembourg; SnT Centre, University of Luxembourg, Luxembourg","2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)","23 Mar 2017","2017","","","359","370","One promising way to improve the accuracy of fault localization based on statistical debugging is to increase diversity among test cases in the underlying test suite. In many practical situations, adding test cases is not a cost-free option because test oracles are developed manually or running test cases is expensive. Hence, we require to have test suites that are both diverse and small to improve debugging. In this paper, we focus on improving fault localization of Simulink models by generating test cases. We identify three test objectives that aim to increase test suite diversity. We use these objectives in a search-based algorithm to generate diversified but small test suites. To further minimize test suite sizes, we develop a prediction model to stop test generation when adding test cases is unlikely to improve fault localization. We evaluate our approach using three industrial subjects. Our results show (1) the three selected test objectives are able to significantly improve the accuracy of fault localization for small test suite sizes, and (2) our prediction model is able to maintain almost the same fault localization accuracy while reducing the average number of newly generated test cases by more than half.","","978-1-5090-5501-2","10.1109/SANER.2017.7884636","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7884636","Fault localization;Simulink models;search-based testing;test suite diversity;supervised learning","Software packages;Debugging;Computational modeling;Ranking (statistics);Predictive models;Testing;Adaptation models","","29","","86","IEEE","23 Mar 2017","","","IEEE","IEEE Conferences"
"Introducing a test suite similarity metric for event sequence-based test cases","P. A. Brooks; A. M. Memon","Department of Computer Science, University of Maryland, College Park, MD, USA; Department of Computer Science, University of Maryland, College Park, MD, USA",2009 IEEE International Conference on Software Maintenance,"30 Oct 2009","2009","","","243","252","Most of today's event driven software (EDS) systems are tested using test cases that are carefully constructed as sequences of events; they test the execution of an event in the context of its preceding events. Because sizes of these test suites can be extremely large, researchers have developed techniques, such as reduction and minimization, to obtain test suites that are ldquosimilarrdquo to the original test suite, but smaller. Existing similarity metrics mostly use code coverage; they do not consider the contextual relationships between events. Consequently, reduction based on such metrics may eliminate desirable test cases. In this paper, we present a new parameterized metric, CONTeSSi(n) which uses the context of n preceding events in test cases to develop a new context-aware notion of test suite similarity for EDS. This metric is defined and evaluated by comparing four test suites for each of four open source applications. Our results show that CONT eSSi(n) is a better indicator of the similarity of EDS test suites than existing metrics.","1063-6773","978-1-4244-4897-5","10.1109/ICSM.2009.5306305","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5306305","","Software testing;System testing;Software systems;Graphical user interfaces;Information retrieval;Computer science;Educational institutions;Application software;Automatic testing;Fault detection","","6","1","21","IEEE","30 Oct 2009","","","IEEE","IEEE Conferences"
"[Journal First] MAHAKIL: Diversity Based Oversampling Approach to Alleviate the Class Imbalance Issue in Software Defect Prediction","K. E. Bennin; J. Keung; P. Phannachitta; A. Monden; S. Mensah","City University of Hong Kong, Kowloon, HK; City University of Hong Kong, Kowloon, HK; Chiang Mai University, Chiang Mai, TH; Okayama Daigaku, Okayama, Okayama, JP; City University of Hong Kong, Kowloon, HK",2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE),"2 Sep 2018","2018","","","699","699","This study presents MAHAKIL, a novel and efficient synthetic oversampling approach for software defect datasets that is based on the chromosomal theory of inheritance. Exploiting this theory, MAHAKIL interprets two distinct sub-classes as parents and generates a new instance that inherits different traits from each parent and contributes to the diversity within the data distribution. We extensively compare MAHAKIL with five other sampling approaches using 20 releases of defect datasets from the PROMISE repository and five prediction models. Our experiments indicate that MAHAKIL improves the prediction performance for all the models and achieves better and more significant pf values than the other oversampling approaches, based on robust statistical tests.","1558-1225","978-1-4503-5638-1","10.1145/3180155.3182520","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8453138","Software defect prediction;Class imbalance learning;Synthetic sample generation;Data sampling methods;Classification problems","Software;Software engineering;Software measurement;Urban areas;Biological system modeling;Predictive models;Robustness","","4","","","","2 Sep 2018","","","IEEE","IEEE Conferences"
"Stack layout transformation: Towards diversity for securing binary programs","B. Rodes","Department of Computer Science, University of Virginia, Charlottesville, VA, USA",2012 34th International Conference on Software Engineering (ICSE),"28 Jun 2012","2012","","","1543","1546","Despite protracted efforts by both researchers and practitioners, security vulnerabilities remain in modern software. Artificial diversity is an effective defense against many types of attack, and one form, address-space randomization, has been widely applied. Present artificial diversity implementations are either coarse-grained or require source code. Because of the widespread use of software of unknown provenance, e.g., libraries, where no source code is provided or available, building diversity into the source code is not always possible. I investigate an approach to stack layout transformation that operates on x86 binary programs, which would allow users to obfuscate vulnerabilities and increase their confidence in the software's dependability. The proposed approach is speculative: the stack frame layout for a function is inferred from the binary and assessed by executing the transformed program. Upon assessment failure, the inferred layout is refined in hopes to better reflect the actual function layout.","1558-1225","978-1-4673-1067-3","10.1109/ICSE.2012.6227041","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6227041","security;artificial diversity;stack frame layout;address randomization;binary programs","Layout;Software;Security;Transforms;Measurement;Benchmark testing","","4","","15","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Provably Valid and Diverse Mutations of Real-World Media Data for DNN Testing","Y. Yuan; Q. Pang; S. Wang","The Hong Kong University of Science and Technology Clear Water Bay, Hong Kong SAR, Kowloon, China; The Hong Kong University of Science and Technology Clear Water Bay, Hong Kong SAR, Kowloon, China; The Hong Kong University of Science and Technology Clear Water Bay, Hong Kong SAR, Kowloon, China",IEEE Transactions on Software Engineering,"15 May 2024","2024","50","5","1040","1064","Deep neural networks (DNNs) often accept high-dimensional media data (e.g., photos, text, and audio) and understand their perceptual content (e.g., a cat). To test DNNs, diverse inputs are needed to trigger mis-predictions. Some preliminary works use byte-level mutations or domain-specific filters (e.g., foggy), whose enabled mutations may be limited and likely error-prone. State-of-the-art (SOTA) works employ deep generative models to generate (infinite) inputs. Also, to keep the mutated inputs perceptually valid (e.g., a cat remains a “cat” after mutation), existing efforts rely on imprecise and less generalizable heuristics. This study revisits two key objectives in media input mutation — perception diversity (Div) and validity (Val) — in a rigorous manner based on manifold, a well-developed theory capturing perceptions of high-dimensional media data in a low-dimensional space. We show important results that Div and Val inextricably bound each other, and prove that SOTA generative model-based methods fundamentally fail to mutate real-world media data (either sacrificing Div or Val). In contrast, we discuss the feasibility of mutating real-world media data with provably high Div and Val based on manifold. Following, we concretize the technical solution of mutating media data of various formats (images, audios, text) via a unified manner based on manifold. Specifically, when media data are projected into a low-dimensional manifold, the data can be mutated by walking on the manifold with certain directions and step sizes. When contrasted with the input data, the mutated data exhibit encouraging Div in the perceptual traits (e.g., lying vs. standing dog) while retaining reasonably high Val (i.e., a dog remains a dog). We implement our techniques in DeepWalk for testing DNNs. DeepWalk constructs manifolds for media data offline. In online testing, DeepWalk walks on manifolds to generate mutated media data with provably high Div and Val. Our evaluation tests DNNs executing various tasks (e.g., classification, self-driving, machine translation) and media data of different types (image, audio, text). DeepWalk outperforms prior methods in terms of the testing comprehensiveness and can find more error-triggering inputs with higher quality. The tested DNNs, after repaired using DeepWalk's findings, exhibit better accuracy.","1939-3520","","10.1109/TSE.2024.3370807","RGC GRF(grant numbers:16214723); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10462634","Deep learning testing;deep neural networks;metamorphic testing","Media;Testing;Manifolds;Dogs;Legged locomotion;Convolutional neural networks;Training","","","","97","IEEE","7 Mar 2024","","","IEEE","IEEE Journals"
"Scaling Software Security Analysis to Satellites: Automated Fuzz Testing and Its Unique Challenges","J. Willbold; M. Schloegel; F. Göhler; T. Scharnowski; N. Bars; S. Wörner; N. Schiller; T. Holz",Ruhr University Bochum; CISPA Helmholtz Center for Information Security; Ruhr University Bochum; CISPA Helmholtz Center for Information Security; CISPA Helmholtz Center for Information Security; CISPA Helmholtz Center for Information Security; CISPA Helmholtz Center for Information Security; CISPA Helmholtz Center for Information Security,2024 IEEE Aerospace Conference,"13 May 2024","2024","","","1","12","The security of space assets is becoming an increasingly important concern, as the number of satellite services offered from space grows at an accelerating rate. In recent years, the functionalities of satellites have become increasingly sophisticated, allowing them to seamlessly provide complex services such as space-based Internet and high-resolution Earth observation. A significant contribution to these advancements was made by the software systems that control spacecraft in the harsh space environment. However, the development of satellite software poses a significant challenge due to the absence of physical access to the spacecraft during its mission. Recent research conducted by Willbold et al. has highlighted software security concerns, revealing an alarming absence of modern security measures among many satellites. Their analysis uncovered various security vulnerabilities in satellite software that could potentially allow attackers to gain full control over the spacecraft. Despite these results, their analysis is limited by the fact that software is analyzed manually, making the approach hard to scale.In this paper, we propose to use an automated vulnerability analysis technique, fuzz testing (fuzzing for short), to scale the analysis without the need of a human expert. Fuzzing is a dynamic program analysis technique that has proven highly successful at locating bugs in application software, such as browsers, or the Linux kernel. Its effectiveness has seen widespread adoption among the industry, such as Google or Meta, and launched multiple research efforts to make it even more effective. In essence, fuzzing creates a large number of inputs for the system under test and executes them while monitoring the system behavior, i.e., execution paths and crashes. Advanced approaches use lightweight instrumentation to gain introspection capabilities, allowing them to track the program path executed by a specific input and thus to guide the exploration to unseen program behavior. Despite its success, applying fuzzing to spacecraft presents unique challenges that we introduce and thoroughly discuss in this paper. First, obtaining feedback from the target program proves challenging, necessitating the exploration of firmware rehosting techniques where the target firmware is executed in an emulated environment without a precise representation of all peripherals. Second, satellites often employ complex boot processes that ensure memory integrity, perform device checks and configurations, and execute various time-intensive tasks, thereby posing challenges to approaches like fuzzing that aim to execute a program as frequently as possible, i.e., thousands of times per second. Finally, fuzzers rely primarily on crashes to identify bugs in the software under test, which fails to account for unrecoverable configuration issues. Beyond discussing these issues, we analyze their practical impact on the software of three satellites, ESTCube-1, OPS-Sat, and Flying Laptop. By discussing the challenges associated with applying fuzzing to spacecrafts and exploring potential solutions, we aim to contribute to the advancement of security practices in the aerospace industry.","1095-323X","979-8-3503-0462-6","10.1109/AERO58975.2024.10521316","Ministry of Education; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10521316","","Space vehicles;Satellites;Computer bugs;Fuzzing;Aerospace electronics;Software;Internet","","","","38","IEEE","13 May 2024","","","IEEE","IEEE Conferences"
"Dynamic Traffic Diversion in SDN: testbed vs Mininet","R. Barrett; A. Facey; W. Nxumalo; J. Rogers; P. Vatcher; M. St-Hilaire","School of Information Technology, Carleton University, Ottawa, Ontario, Canada; School of Information Technology, Carleton University, Ottawa, Ontario, Canada; School of Information Technology, Carleton University, Ottawa, Ontario, Canada; School of Information Technology, Carleton University, Ottawa, Ontario, Canada; School of Information Technology, Carleton University, Ottawa, Ontario, Canada; School of Information Technology, Carleton University, Ottawa, Ontario, Canada","2017 International Conference on Computing, Networking and Communications (ICNC)","13 Mar 2017","2017","","","167","171","In this paper, we first propose a simple Dynamic Traffic Diversion (DTD) algorithm for Software Defined Networks (SDN). After implementing the algorithm inside the controller, we then compare the results obtained under two different test environments: 1) a testbed using real Cisco equipment and 2) a network emulation using Mininet. From the results, we get two key messages. First, we can clearly see that dynamically diverting important traffic on a backup path will prevent packet loss and reduce jitter. Finally, the two test environments provide relatively similar results. The small differences could be explained by the early field trial image that was used on the Cisco equipment and by the many setting parameters that are available in both environments.","","978-1-5090-4588-4","10.1109/ICCNC.2017.7876121","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7876121","SDN;testbed;Mininet;comparison;dynamic traffic diversion","Heuristic algorithms;Packet loss;Jitter;Software;Control systems;Topology","","19","","13","IEEE","13 Mar 2017","","","IEEE","IEEE Conferences"
"KS-TCP: An Efficient Test Case Prioritization Approach based on K-medoids and Similarity","J. Chen; Y. Gu; S. Cai; H. Chen; J. Chen","School of Computer Science and Communication Engineering, Jiangsu University, Zhenjiang, China; School of Computer Science and Communication Engineering, Jiangsu University, Zhenjiang, China; School of Computer Science and Communication Engineering, Jiangsu University, Zhenjiang, China; School of Computer Science and Communication Engineering, Jiangsu University, Zhenjiang, China; School of Computer Science and Communication Engineering, Jiangsu University, Zhenjiang, China",2021 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW),"14 Feb 2022","2021","","","105","110","Test case prioritization (TCP) tries to find an optimal execution sequence by adjusting test cases that need to be executed. Traditional techniques rely on code coverage information to achieve effective results, but they need access to historical execution information. The string distance-based test case prioritization (SD-TCP) can avoid these limitations through only using the test cases themselves for sorting, but it is sensitive to extreme test cases and inefficient. To overcome these problems, we propose a test case prioritization method based on K-medoids and Similarity (KS-TCP). The proposed KS-TCP approach considers sorting a set of test cases rather than individual test case to effectively avoid the effect of extreme test cases, it uses cluster analysis and greedy strategy to divide the subsets and compose the final execution sequence by polling. Extensive experimental results show that the proposed KS-TCP approach has a higher APFD value compared to Random Prioritization (RP) and SD-TCP, and it also outperforms SD-TCP in terms of better time efficiency on test case prioritization.","","978-1-6654-2603-9","10.1109/ISSREW53611.2021.00051","National Key R&D Program of China(grant numbers:2020YFB1005500); National Natural Science Foundation of China (NSFC)(grant numbers:U1836116,62172194); China Postdoctoral Science Foundation(grant numbers:2021M691310); Postdoctoral Science Foundation of Jiangsu Province(grant numbers:2021K636C); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9700308","Regression testing;Test case prioritization;Cluster analysis;Greedy algorithm","Greedy algorithms;Codes;Conferences;Clustering methods;Software algorithms;Software reliability;Sorting","","2","","17","IEEE","14 Feb 2022","","","IEEE","IEEE Conferences"
"Risk-driven Online Testing and Test Case Diversity Analysis for ML-enabled Critical Systems","J. G. Adigun; T. Philip Huck; M. Camilli; M. Felderer","University of Innsbruck, Austria; Karlsruhe Institute of Technology (KIT), Germany; Politecnico di Milano, Italy; University of Innsbruck, Austria",2023 IEEE 34th International Symposium on Software Reliability Engineering (ISSRE),"2 Nov 2023","2023","","","344","354","Machine Learning (ML)-enabled systems that run in safety-critical settings expose humans to risks. Hence, it is important to build such systems with strong assurances for domain-specific safety requirements. Simulation as well as metaheuristic optimizing search have proven to be valuable tools for online testing of ML-enabled systems for early detection of hazards. However, the efficient generation of effective test cases remains a challenging issue. In particular, the testing process shall produce as many failures as possible but also unveil diverse sets of failure scenarios.To study this phenomenon, we introduce a risk-driven test case generation and diversity analysis method tailored to ML-enabled systems. Our approach uses an online testing technique based on metaheuristic optimizing search to falsify domain-specific safety requirements. All test cases leading to hazards are then analyzed to assess their diversity by using clustering and interpretable ML. We evaluated our approach in a collaborative robotics case study showing that generating tests considering risk metrics represents an effective strategy. Furthermore, we compare alternative optimizing search algorithms and rank them based on the overall diversity of the test cases, ultimately showing that selecting the testing strategy based on the number of failures only may be misleading.","2332-6549","979-8-3503-1594-3","10.1109/ISSRE59848.2023.00017","Austrian Science Fund; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10301271","Search-based testing;ML-enabled systems;Risk;Diversity analysis;Simulation","Measurement;Metaheuristics;Collaboration;Clustering algorithms;Diversity methods;Search problems;Hazards","","","","32","IEEE","2 Nov 2023","","","IEEE","IEEE Conferences"
"The N-Version Approach to Fault-Tolerant Software","A. Avizienis","Department of Computer Science, University of California, Los Angeles, CA, USA",IEEE Transactions on Software Engineering,"18 Sep 2006","1985","SE-11","12","1491","1501","Evolution of the N-version software approach to the tolerance of design faults is reviewed. Principal requirements for the implementation of N-version software are summarized and the DEDIX distributed supervisor and testbed for the execution of N-version software is described. Goals of current research are presented and some potential benefits of the N-version approach are identified.","1939-3520","","10.1109/TSE.1985.231893","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1701972","Design diversity;fault tolerance;multiple computation;N-version programming;N-version software;software reliability;tolerance of design faults","Fault tolerance;Circuit faults;Fault tolerant systems;Hardware;Application software;Humans;Computer science;Computer errors;Software testing;Software reliability","","684","23","53","IEEE","18 Sep 2006","","","IEEE","IEEE Journals"
"Discovering Service Similarity by Testing","J. Church; A. Motro","Computer Science Department, George Mason University, Fairfax, VA, USA; Computer Science Department, George Mason University, Fairfax, VA, USA",2011 IEEE International Conference on Services Computing,"5 Sep 2011","2011","","","733","734","We describe a comprehensive methodology for discovering service similarity (substitutability) by testing. Our solution does not rely on the service descriptions provided by their authors, it does not assume the existence of ontologies, semantic tagging, or other representations, and it avoids common information retrieval techniques. The only information our method expects is that every service in the repository will be annotated with its inputs and outputs, and that each input and output will be associated with a domain from a published list.","","978-1-4577-0863-3","10.1109/SCC.2011.91","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6009332","Web services;Software testing;Clustering methods;Software reusability","Testing;Indexes;Semantics;Accuracy;Service oriented architecture;Clustering methods","","2","","4","IEEE","5 Sep 2011","","","IEEE","IEEE Conferences"
"Diversity maximization speedup for fault localization","L. Gong; D. Lo; L. Jiang; H. Zhang","School of Software, Tsinghua National Laboratory for Information Science and Technology (TNList), Tsinghua University, Beijing, China; School of Information Systems, Singapore Management University, Singapore; School of Information Systems, Singapore Management University, Singapore; School of Software, Tsinghua National Laboratory for Information Science and Technology (TNList), Tsinghua University, Beijing, China",2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering,"8 Apr 2013","2012","","","30","39","Fault localization is useful for reducing debugging effort. However, many fault localization techniques require non-trivial number of test cases with oracles, which can determine whether a program behaves correctly for every test input. Test oracle creation is expensive because it can take much manual labeling effort. Given a number of test cases to be executed, it is challenging to minimize the number of test cases requiring manual labeling and in the meantime achieve good fault localization accuracy. To address this challenge, this paper presents a novel test case selection strategy based on Diversity Maximization Speedup (DMS). DMS orders a set of unlabeled test cases in a way that maximizes the effectiveness of a fault localization technique. Developers are only expected to label a much smaller number of test cases along this ordering to achieve good fault localization results. Our experiments with more than 250 bugs from the Software-artifact Infrastructure Repository show (1) that DMS can help existing fault localization techniques to achieve comparable accuracy with on average 67% fewer labeled test cases than previously best test case prioritization techniques, and (2) that given a labeling budget (i.e., a fixed number of labeled test cases), DMS can help existing fault localization techniques reduce their debugging cost (in terms of the amount of code needed to be inspected to locate faults). We conduct hypothesis test and show that the saving of the debugging cost we achieve for the real C programs are statistically significant.","","978-1-4503-1204-2","10.1145/2351676.2351682","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6494903","Fault Localization;Test Case Prioritization","","","10","","32","","8 Apr 2013","","","IEEE","IEEE Conferences"
"Improving Test Execution Efficiency Through Clustering and Reordering of Independent Test Steps","B. Walter; M. Schilling; M. Piechotta; S. Rudolph","Research and Development MB Passenger Cars, Daimler AG; Research and Development MB Passenger Cars, Daimler AG; Research and Development MB Passenger Cars, Daimler AG; University of Stuttgart, ISD","2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)","28 May 2018","2018","","","363","373","We observe an inefficient execution order of tests in the way that for a given set of test cases, a significant number of test steps occur in more than one test case. During test executions these duplicates increase the test load while providing none or limited additional test results. Removing such test steps interrupts the initial execution chain of steps inside a test case. To solve this issue, we propose a test case synthesis. After removing redundant steps, all (non-redundant) test steps are rearranged into a new set of test cases. This is achieved by using a clustering technique to group similar test steps into new test cases. A Path finding algorithm is used to find an optimized test step execution order for each test case. By applying this method in a case study at Mercedes-Benz Passenger Car Development, we observe a test load reduction of 15% due to removing redundant test steps and an additional reduction of at least 3% for rearranging test steps. This totals up to at least 18% overall test load reduction for the proposed method including removing redundant elements. We see this as strong indication for the usefulness of our approach.","","978-1-5386-5012-7","10.1109/ICST.2018.00043","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8367063","Redundant Tests;Test Case Optimization;Clustering;Hierarchical Single-Linkage;Geometric Similarity;Path Finding;Ant Colony System","Automobiles;Measurement;Data models;Data structures;Clustering algorithms;Ignition;Switches","","1","","35","IEEE","28 May 2018","","","IEEE","IEEE Conferences"
"A unique system for automated, generic testing of hydraulic UUT's","J. E. Sage","ACL Technologies, Inc., Santa Ana, CA, USA",Conference Record AUTOTESTCON '91 IEEE Systems Readiness Technology Conference Improving Systems Effectiveness in the Changing Environment of the '90s,"6 Aug 2002","1991","","","263","267","The IMAGE system is used to test a variety of hydraulic components in many commercial and military aircraft. The test system executes under control of the run time system and permits the prescribed testing sequence to occur. The IMAGE system operates in three modes and can be executed if a valid UUT unit under test definition and appropriate transducers have been specified. The modes of operation are outlined.<>","","0-87942-576-8","10.1109/AUTEST.1991.197558","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=197558","","Automatic testing;System testing;Software testing;Test equipment;Hardware;Manufacturing;Aircraft manufacture;Industrial training;Software systems;Computer architecture","","","","1","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"Reviving Software Diversity in Microservices to Optimize the Performance of Software Systems","P. Dhaliwal; H. Khazaei","Dept. of Electrical Engineering & Computer Science, York University, Toronto, Ontario, Canada; Dept. of Electrical Engineering & Computer Science, York University, Toronto, Ontario, Canada",2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems Companion (ACSOS-C),"11 Dec 2023","2023","","","31","32","With the increasing popularity and complexity of microservice software systems, satisfying the performance requirements of these systems becomes a non-trivial task. While horizontal auto-scaling is a common remedy to this problem, it is not necessarily cost-effective and the proper solution for all scenarios. Also, regardless of the number of replicas, they are all prone to common bug failure. In this poster/demo, we present an agile and cost-effective approach for satisfying the performance requirements of microservice software systems without incurring extra costs on the service provider. We research how performance, i.e., response time, can be tamed by applying software diversity, aka multi-versioning, to the system's resource-heavy critical services. We use our open-source extension of the Docker framework, called DockerMV, to deploy microservice systems with multi-versioning embedded underneath. We also propose a dynamic load-balancing service that proactively adapts to the various versions depending on current and near-future performance needs. We demonstrate the efficacy of multi-versioning for satisfying the performance requirements of microservice software systems through extensive experiments on TeaStore, a microservice reference test application, and Znn, a containerized news portal. We will present our results through the poster and a live demonstration throughout the conference. A preliminary demo of our work can be accessed here11https://www.youtube.com/watch?v=oeMCxlDtU64. The GitHub repository of our work can be accessed here22https://github.com/prabjot09/nginx-dynamic-load-balancing.","","979-8-3503-3746-4","10.1109/ACSOS-C58168.2023.00031","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10336238","Microservices;Adaptive Systems;Multi Versioning;Software Diversity;Performance Optimization","Costs;Computer bugs;Microservice architectures;Software systems;Time factors;Task analysis;Distributed computing","","","","7","IEEE","11 Dec 2023","","","IEEE","IEEE Conferences"
"On the Investigation of Essential Diversities for Deep Learning Testing Criteria","Z. Zhang; X. Xie","School of Computer Science, Wuhan University, Wuhan, China; School of Computer Science, Wuhan University, Wuhan, China","2019 IEEE 19th International Conference on Software Quality, Reliability and Security (QRS)","3 Oct 2019","2019","","","394","405","Recent years, more and more testing criteria for deep learning systems has been proposed to ensure system robustness and reliability. These criteria were defined based on different perspectives of diversity. However, there lacks comprehensive investigation on what are the most essential diversities that should be considered by a testing criteria for deep learning systems. Therefore, in this paper, we conduct an empirical study to investigate the relation between test diversities and erroneous behaviors of deep learning models. We define five metrics to reflect diversities in neuron activities, and leverage metamorphic testing to detect erroneous behaviors. We investigate the correlation between metrics and erroneous behaviors. We also go further step to measure the quality of test suites under the guidance of defined metrics. Our results provided comprehensive insights on the essential diversities for testing criteria to exhibit good fault detection ability.","","978-1-7281-3927-2","10.1109/QRS.2019.00056","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8854700","metamorphic testing;deep learning testing;testing criteria;essential metrics","Neurons;Testing;Deep learning;Measurement;Image retrieval;Task analysis;Fault detection","","4","","42","IEEE","3 Oct 2019","","","IEEE","IEEE Conferences"
"SiMut: Exploring Program Similarity to Support the Cost Reduction of Mutation Testing","A. V. Pizzoleto; F. C. Ferrari; L. D. Dallilo; J. Offutt","Computing Department, Federal University of São Carlos, São Carlos, SP, Brazil; Computing Department, Federal University of São Carlos, São Carlos, SP, Brazil; Department of Computer Systems, University of São Paulo, São Carlos, SP, Brazil; Department of Computer Science, George Mason University, Fairfax, VA, USA","2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)","4 Aug 2020","2020","","","264","273","Scientists have created many cost reduction techniques for mutation testing, and most of them reduce cost with minor losses of effectiveness. However, many of these techniques are difficult to generalize, difficult to scale, or both. Published results are usually limited to a modest collection of programs. Therefore, an open question is whether the results of a given cost reduction technique on programs studied in the paper will hold true for other programs. This paper introduces a conceptual framework, named SiMut, to support the cost reduction of mutation testing based on historical data and program similarity. Given a new, untested program u, the central idea is applying to u the same cost reduction strategy applied to a group G of programs that are similar to u and have already been tested with mutation, and check for consistency of results in terms of reduced costs and quality of test sets. SiMut includes activities to compute program abstractions and similarity. Based on this information, it supports the application of mutation cost reduction techniques to both G and u. This paper presents the concepts behind SiMut, a proof-of-concept implementation of SiMut, and results from a pilot study. Finally, we discuss some issues related to the use of SiMut, focusing on the composition of a representative dataset to properly explore the potential of our framework.","","978-1-7281-1075-2","10.1109/ICSTW50294.2020.00052","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9155963","mutation testing;cost reduction;program similarity;reuse of historical data","Testing;Current measurement;Machine learning algorithms;Conferences;Bibliographies;Computer languages","","4","","49","IEEE","4 Aug 2020","","","IEEE","IEEE Conferences"
"Automatic Extraction of Behavioral Features for Test Program Similarity Analysis","E. De Angelis; A. Pellegrini; M. Proietti","IASI-CNR, Rome, Italy; IASI-CNR, Rome, Italy; IASI-CNR, Rome, Italy",2021 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW),"14 Feb 2022","2021","","","129","136","We present a methodology for performing automatic extraction of behavioral features from test programs, that is, for collecting pieces of information about the test programs execution. These features are then exploited to carry out analysis and reasoning about test program similarity. The similarity information can be used to drive the execution of test campaigns, in the attempt to either reduce the time-to-test, or to increase the testing capabilities of a given test suite. Our methodology is embedded in the Hyperion analysis framework, which can be configured to define a wide range of test program similarity criteria.","","978-1-6654-2603-9","10.1109/ISSREW53611.2021.00054","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9700263","Test Program;Similarity Analysis;Symbolic Execution;Automated Reasoning","Knowledge engineering;Conferences;Feature extraction;Cognition;Software reliability;Data mining;Testing","","1","","42","IEEE","14 Feb 2022","","","IEEE","IEEE Conferences"
"Capability of single hardware channel for automotive safety applications according to ISO 26262","J. Braun; J. Mottok; C. Miedl; D. Geyer; M. Minas","LaS, University of Applied Science Regensburg, Regensburg, Germany; AVL Software and Functions GMBH, Regensburg, Germany; AVL Software and Functions GMBH, Regensburg, Germany; LaS, University of Applied Science Regensburg, Regensburg, Germany; Universität der Bundeswehr Munich, Neubiberg, Germany",2012 International Conference on Applied Electronics,"11 Oct 2012","2012","","","41","46","There is no doubt that electromobility will be the future. All-electric vehicles were already available on the market in 2011 and 14 new vehicles will be commercially available in 2012. Due to the fact that automotive applications are influenced by the safety requirements of the ISO 26262, nowadays the use of new technologies requires more and more understanding for fail-safe and fault-tolerant systems due to increasingly complex systems. The safety of electric vehicles has the highest priority because it helps contribute to customer confidence and thereby ensures further growth of the electromobility market. Therefore in series production redundant hardware concepts like dual core microcontrollers running in lock-step-mode are used to reach ASIL D requirements given from the ISO 26262. In this paper redundant hardware concepts and the coded processing will be taken into account, which are listed in the current standard ISO 26262 as recommended safety measures.","1803-7232","978-80-261-0039-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6328876","fail-safe;fault-tolerant;failure rates;failure probability;safety measure;mechanism;ISO 26262;electromobility;series system;parallel system;coded processing;Safely Embedded Software;SES;backward recovery;reliability;Proof-Test;diversity","Safety;Hardware;Software;ISO standards;Redundancy","","2","","6","","11 Oct 2012","","","IEEE","IEEE Conferences"
"Variability Aware Requirements Reuse Analysis","M. Abbas","Mälardalen University & RISE Research Institutes of Sweden, Västerås, Sweden",2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"1 Dec 2020","2020","","","190","193","Problem: The goal of a software product line is to aid quick and quality delivery of software products, sharing common features. Effectively achieving the above-mentioned goals requires reuse analysis of the product line features. Existing requirements reuse analysis approaches are not focused on recommending product line features, that can be reused to realize new customer requirements. Hypothesis: Given that the customer requirements are linked to product line features' description satisfying them: then the customer requirements can be clustered based on patterns and similarities, preserving the historic reuse information. New customer requirements can be evaluated against existing customer requirements and reuse of product line features can be recommended. Contributions: We treated the problem of feature reuse analysis as a text classification problem at the requirements-level. We use Natural Language Processing and clustering to recommend reuse of features based on similarities and historic reuse information. The recommendations can be used to realize new customer requirements.","2574-1926","978-1-4503-7122-3","","ITEA; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9270333","software reuse;variability;product line;requirements;similarities","Feature extraction;Pipelines;Software;Testing;Software product lines;Recommender systems;Rail transportation","","","","18","","1 Dec 2020","","","IEEE","IEEE Conferences"
"Evaluating Software Diversity Based on Gadget Feature Analysis","G. Xie; G. Cheng; H. Liang; Q. Wang; B. He","Information Engineering University, Zhengzhou, China; Information Engineering University, Zhengzhou, China; Information Engineering University, Zhengzhou, China; Information Engineering University, Zhengzhou, China; Information Engineering University, Zhengzhou, China",2022 IEEE 8th International Conference on Computer and Communications (ICCC),"20 Mar 2023","2022","","","1656","1660","Evaluating the security gains brought by software diversity is one key issue of software diversity research, but the existing software diversity evaluation methods are generally based on conventional code features and are relatively single, which are difficult to accurately reflect the security gains brought by software diversity. To solve these problems, from the perspective of return-oriented programming (ROP) attack, we present a software diversity evaluation method which integrates metrics for the quality and distribution of gadgets. Based on the proposed evaluation method and SpiderMonkey JavaScript engine, we implement a software diversity evaluation system for compiled languages and script languages. Diversity techniques with different granularities are used to test. The evaluation results show that the proposed evaluation method can accurately and comprehensively reflect the security gains brought by software diversity.","","978-1-6654-5051-5","10.1109/ICCC56324.2022.10065871","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10065871","software diversity;security gain;code reuse attack;gadget feature;JavaScript engine","Codes;Diversity methods;Gain measurement;Programming;Software;Security;Software measurement","","","","15","IEEE","20 Mar 2023","","","IEEE","IEEE Conferences"
"Similarity–Difference Analysis and Matrix Fault Diagnosis of SoC-components","V. Hahanov; M. Karavay; V. Sergienko; S. Chumahahanko; E. Litvinova; H. Khakhanova; T. H. Salih","Design Automation Department, Kharkov National University of Radio Electronics, Kharkov, Ukraine; V.A. Trapeznikov Institute of Control Scienses of Russian Academy of Sciences, Moscow, Russia; Design Automation Department, Kharkov National University of Radio Electronics, Kharkov, Ukraine; Design Automation Department, Kharkov National University of Radio Electronics, Kharkov, Ukraine; Design Automation Department, Kharkov National University of Radio Electronics, Kharkov, Ukraine; Design Automation Department, Kharkov National University of Radio Electronics, Kharkov, Ukraine; Design Automation Department, Kharkov National University of Radio Electronics, Kharkov, Ukraine",2020 IEEE East-West Design & Test Symposium (EWDTS),"15 Oct 2020","2020","","","1","5","Universal metric of data search in cyberspace is proposed; it is based on the use of similarity - difference parameters and matrix structure in binary form. Method for analyzing matrix data structures using the similarity-difference metric for fault detection in digital systems is described. The difference diagnostic method is characterized by the execution of three logical operations on the binary states of the matrix vector-rows and is focused on single and multiple faults in digital systems and software applications. The qubit-difference method for fault detection is characterized by the use of vector parallel logical operations to form a diagnosis of a multivalued technical state, according to the principle of ""divide and unite, eliminating contradictions."" The advantage of the qubit-vector representation of data in matrix cells is shown, which makes it possible to perform logical operations in parallel in three automatic cycles in order to obtain the required result. Method for detecting single and multiple faults in digital software and hardware systems is described, focused on the hardware implementation of parallel logical register operations, which provide a significant increase in performance compared to existing analogues. Method and hardware implementation of a sequencer for determining similarity-difference-inclusion is proposed, which is characterized by obtaining a more accurate structured assessment of the interaction of two objects.","2472-761X","978-1-7281-9899-6","10.1109/EWDTS50664.2020.9224740","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9224740","single and multiple faults;fault diagnosis;similarity–difference metric;qubit vectors;matrix data structures;digital systems-on-chips","","","","","16","IEEE","15 Oct 2020","","","IEEE","IEEE Conferences"
"Linkage of Similar Code Snippets Assessed in the Micro Benchmark Service jsPerf","K. Saiki; A. Ihara","Social Software Engineering Laboratory (SocSEL), Wakayama University, Wakayama, Japan; Social Software Engineering Laboratory (SocSEL), Wakayama University, Wakayama, Japan",2021 IEEE 21st International Working Conference on Source Code Analysis and Manipulation (SCAM),"24 Nov 2021","2021","","","247","251","A benchmark is an action to assess performance (e.g., program execution time) by developers preparing and running several test cases over a long period. To reasonably assess the performance of method-level code snippets, developers could use a micro benchmark. Some micro benchmarks for JavaScript provide online web services (e.g., jsPerf and MeasureThat.net). Developers easily search code snippets with better performance in the micro benchmark service. Then, the developers will find many similar code snippets for different functions in the service because the micro benchmark service has a collection of versatile method-level code snippets. To find replaceable code snippets with better performance, we tackle to distinguish similar code snippets for different functions with more fine-grained size than method-level in micro benchmark services.This study proposes an approach to collect diverse code snippets using the similar function. The approach measures the similarity using Code2Vec between some code snippets assessed in the micro benchmark service, and find an appropriate threshold to associate with the code snippets using the similar function. Using the micro benchmark service jsPerf dataset that the authors collected, this study evaluates the usefulness of our approach. Specifically, we collect code snippets related to the most frequent topics ""innerHTML vs removeChild"" and ""for vs forEach"" assessed in jsPerf. Consequently, we find our approach achieves higher precision (98% and 92%) to identify diverse code snippets using the similar function.","2470-6892","978-1-6654-4897-0","10.1109/SCAM52516.2021.00038","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9610675","micro benchmark;software quality;program analysis;source code classification","Couplings;Codes;Web services;Conferences;Benchmark testing","","","","5","IEEE","24 Nov 2021","","","IEEE","IEEE Conferences"
"A new voting strategy in Diverse programming for railway interlocking systems","M. S. Durmuş; O. Eriş; U. Yildirim; M. T. Söylemez","Control Engineering Department, Istanbul Technical University, Maslak, Istanbul, Turkey; Control Engineering Department, Istanbul Technical University, Maslak, Istanbul, Turkey; Control Engineering Department, Istanbul Technical University, Maslak, Istanbul, Turkey; Control Engineering Department, Istanbul Technical University, Maslak, Istanbul, Turkey","Proceedings 2011 International Conference on Transportation, Mechanical, and Electrical Engineering (TMEE)","14 May 2012","2011","","","723","726","The main issue in controlling systems such as nuclear power reactors or railway systems is to provide safety at the highest level where risk ratio is high and sometimes small errors might result with death of several people. In order to improve reliability and keep safety of such systems at the required level by decreasing common cause failures at the same time Diverse programming (which is synonymous with N-version programming) technique can be used. In this study an example railway interlocking architecture is explained and a new voting strategy is also proposed.","","978-1-4577-1701-7","10.1109/TMEE.2011.6199304","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6199304","Diverse Programming;Safety-Critical Software;Railway interlocking systems","Rail transportation;Safety;Software;Programming;Control systems;Reliability;Testing","","2","1","15","IEEE","14 May 2012","","","IEEE","IEEE Conferences"
"Bugs.jar: A Large-Scale, Diverse Dataset of Real-World Java Bugs","R. Saha; Y. Lyu; W. Lam; H. Yoshida; M. Prasad","Software Quality and Security Lab, Fujitsu Laboratories of America, Inc., USA; Department of Computer Science, University of Southern, California, USA; Department of Computer Science, University of Illinois at Urbana-Champaign, USA; Software Quality and Security Lab, Fujitsu Laboratories of America, Inc., USA; Software Quality and Security Lab, Fujitsu Laboratories of America, Inc., USA",2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR),"30 Dec 2018","2018","","","10","13","We present Bugs.jar, a large-scale dataset for research in automated debugging, patching, and testing of Java programs. Bugs.jar is comprised of 1,158 bugs and patches, drawn from 8 large, popular opensource Java projects, spanning 8 diverse and prominent application categories. It is an order of magnitude larger than Defects4J, the only other dataset in its class. We discuss the methodology used for constructing Bugs.jar, the representation of the dataset, several use-cases, and an illustration of three of the use-cases through the application of 3 specific tools on Bugs.jar, namely our own tool, Elixir, and two third-party tools, Ekstazi and JaCoCo.","2574-3864","978-1-4503-5716-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595167","Reproducible Bugs;Large Scale Dataset;Java Programs","Computer bugs;Java;Software;Tools;Libraries;Debugging;Testing","","8","","10","","30 Dec 2018","","","IEEE","IEEE Conferences"
"ALANCA: Active Learning Guided Adversarial Attacks for Code Comprehension on Diverse Pre-trained and Large Language Models","D. Liu; S. Zhang","Key Laboratory of High Confidence Software Technologies, Peking University, Beijing, China; Key Laboratory of High Confidence Software Technologies, Peking University, Beijing, China","2024 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)","16 Jul 2024","2024","","","602","613","Neural code models have demonstrated their efficacy across a range of code comprehension tasks, including vulnerability detection, code classification, automatic code summarization, completion, clone detection, etc. Yet, a substantial gap exists in our understanding of the robustness of models in the realm of code comprehension and its associated applications. To probe and illuminate the robustness of code, recent efforts have sought to employ NLP-like techniques to craft adversarial code instances, primarily by perturbing variable and token names. It's worth noting that the semantics of source code predominantly surface through its structural elements, such as abstract syntax trees and control flow graphs, which fundamentally differ from natural languages. The question remains open: Can we perturb the structural aspects of code while preserving its semantics, thereby generating more disruptive adversarial examples that elude current structural-unaware approaches? Moreover, orchestrating adaptive adversarial attacks on diverse neural code models with varying architectures poses formidable challenges, especially in real-world scenarios characterized by constraints on target model access and querying. In this paper, we introduce ALANCA, an active-learning guided adversarial attack framework tailored for neural code models. Leveraging semantic-preserving translations, combined with an adaptive adversarial discriminator and token selector, ALANCA excels in executing adversarial attacks with high success rates, exceptional generation quality, and adaptability across different target models. We substantiate ALANCA's efficacy through comprehensive evaluations across four distinct code comprehension tasks, demonstrating its ability to effectively confound a range of neural models, including pre-trained models and LLMs used in software engineering.","2640-7574","979-8-3503-3066-3","10.1109/SANER60148.2024.00067","National Key Research and Development Program of China(grant numbers:2021YFB3101802); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10589851","AI for Software Engineering;Software testing and debugging;AI Security","Adaptation models;Analytical models;Codes;Source coding;Semantics;Syntactics;Robustness","","","","56","IEEE","16 Jul 2024","","","IEEE","IEEE Conferences"
"Simulink Compiler Testing via Configuration Diversification With Reinforcement Learning","X. Li; S. Guo; H. Cheng; H. Jiang","School of Software, and Key Laboratory for Ubiquitous Network and Service Software of Liaoning Province, Dalian University of Technology, Dalian, China; School of Information Science and Technology, Dalian Maritime University, Dalian, China; School of Information Science and Technology, Dalian Maritime University, Dalian, China; School of Software, and Key Laboratory for Ubiquitous Network and Service Software of Liaoning Province, Dalian Key Laboratory of Artificial Intelligence, Dalian University of Technology, Dalian, China",IEEE Transactions on Reliability,"3 Jun 2024","2024","73","2","1060","1074","Simulink compiler testing is important since all cyber-physical system (CPS) models are required to be compiled by Simulink compiler. Current testing processes use CPS models generated by CPS model generators for testing. Since the effectiveness of CPS model generators heavily relies on suitable generator configurations, existing approaches randomize configurations or infer configurations with historical bug information to generate diverse bug-triggering CPS models. However, these approaches are designed for general-purpose compilers (e.g., GCC), which have two challenges when testing Simulink compiler, namely, the CPS model representation challenge on representing CPS models for diversity measurement and the configuration learning challenge on learning configurations to generate diverse CPS models. To address these challenges, we propose Reinforcement lEarning-based COnfiguRation Diversification (RECORD), a new configuration diversification approach. RECORD has a feature vectorization component, which addresses the first challenge by representing CPS models as feature vectors to capture the local and global characteristics of CPS models for diversity measurement. RECORD then uses a reinforcement learning component to generate diverse CPS models based on the learned relationship between configuration updates and diversity changes, thus addressing the second challenge. Experiments demonstrate that within three months, RECORD reported 11 confirmed Simulink compiler bugs, significantly outperforming the state-of-the-art configuration diversification approaches. RECORD can also facilitate different testing strategies to find more bugs.","1558-1721","","10.1109/TR.2023.3317643","National Natural Science Foundation of China(grant numbers:62032004,62202079); Dalian Excellent Young(grant numbers:2022RY35); Fundamental Research Funds for the Central Universities(grant numbers:DUT22RC(3)028,DUT22ZD101); Postgraduate Education Reform Project of Liaoning Province(grant numbers:Liao Jiao Tong [2023] 385-151); Dalian Maritime University Teacher Development(grant numbers:JF2023Y05); Higher Education Scientific Research(grant numbers:23LK0408); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10273747","Compiler testing;configuration diversification;cyber-physical system (CPS);reinforcement learning;Simulink","Software packages;Testing;Computer bugs;Analytical models;Generators;Libraries;Reinforcement learning","","","","40","IEEE","6 Oct 2023","","","IEEE","IEEE Journals"
"The Effectiveness of Software Diversity in a Large Population of Programs","M. J. P. van der Meulen; M. A. Revilla","Det Norske Veritas, Hovik, Norway; Departamento Matematica Aplicada, Facultad de Ciencias, Universidad de Valladolid, Valladolid, Spain",IEEE Transactions on Software Engineering,"12 Dec 2008","2008","34","6","753","764","In this paper, we first present an exploratory analysis of the aspects of multiple-version software diversity using 36,123, programs written to the same specification. We do so within the framework of the theories of Eckhardt and Lee and Littlewood and Miller. We analyse programming faults made, explore failure regions and difficulty functions, show how effective 1-out-of-2 diversity is and how language diversity increases this effectiveness. The second part of the paper generalizes the findings about 1-out-of-2 diversity, and its special case language diversity by performing statistical analyses of 89,402 programs written to 60 specifications. Most observations in the exploratory analysis are confirmed; however, although the benefit of language diversity can be observed, its effectiveness appears to be low.","1939-3520","","10.1109/TSE.2008.70","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4604670","Programming Techniques;Protection mechanisms;Design concepts;Quality analysis and evaluation;Software and System Safety;Reliability;Reliability;Performance measures;Programming Techniques;Protection mechanisms;Design concepts;Quality analysis and evaluation;Software and System Safety;Reliability;Reliability;Performance measures","Statistical analysis;Software reliability;Failure analysis;Functional programming;Fault tolerance;Software testing;Java;Algorithm design and analysis;Reliability engineering","","22","","12","IEEE","22 Aug 2008","","","IEEE","IEEE Journals"
"Using Semantic Similarity in Crawling-Based Web Application Testing","J. -W. Lin; F. Wang; P. Chu","Dept. of Informatics, University of California, Irvine, USA; Dept. of Electrical Engineering, National Taiwan University, Taiwan; QNAP Inc.","2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)","18 May 2017","2017","","","138","148","To automatically test web applications, crawling-based techniques are usually adopted to mine the behavior models, explore the state spaces or detect the violated invariants of the applications. However, their broad use is limited by the required manual configurations for input value selection, GUI state comparison and clickable detection. In existing crawlers, the configurations are usually string-matching based rules looking for tags or attributes of DOM elements, and often application-specific. Moreover, in input topic identification, it can be difficult to determine which rule suggests a better match when several rules match an input field to more than one topic. This paper presents a natural-language approach based on semantic similarity to address the above issues. The proposed approach represents DOM elements as vectors in a vector space formed by the words used in the elements. The topics of encountered input fields during crawling can then be inferred by their similarities with ones in a labeled corpus. Semantic similarity can also be applied to suggest if a GUI state is newly discovered and a DOM element is clickable under an unsupervised learning paradigm. We evaluated the proposed approach in input topic identification with 100 real-world forms and GUI state comparison with real data from industry. Our evaluation shows that the proposed approach has comparable or better performance to the conventional techniques. Experiments in input topic identification also show that the accuracy of the rule-based approach can be improved by up to 22% when integrated with our approach.","","978-1-5090-6031-3","10.1109/ICST.2017.20","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7927970","Web application testing;semantic similarity;GUI testing","Testing;Graphical user interfaces;Crawlers;Web pages;Semantics;Manuals;Feature extraction","","8","","34","IEEE","18 May 2017","","","IEEE","IEEE Conferences"
"Uncertainty Explicit Assessment of Off-the-Shelf Software: Selection of an Optimal Diverse Pair","I. Gashi; P. Popov","Centre for Software Reliability, City University, London, UK; Centre for Software Reliability, City University, London, UK",2007 Sixth International IEEE Conference on Commercial-off-the-Shelf (COTS)-Based Software Systems (ICCBSS'07),"12 Mar 2007","2007","","","93","102","Assessment of software COTS components is an essential part of component-based software development. Sub-optimal selection of components may lead to solutions with low quality. The assessment is based on incomplete knowledge about the COTS components themselves and other aspects, which may affect the choice such as the vendor's credentials, etc. We argue in favor of assessment methods in which uncertainty is explicitly represented (`uncertainty explicit' methods) using probability distributions. We have adapted a model (developed elsewhere by Littlewood, B. et al. (2000)) for assessment of a pair of COTS components to take account of the fault (bug) logs that might be available for the COTS components being assessed. We also provide empirical data from a study we have conducted with off-the-shelf database servers, which illustrate the use of the method","","0-7695-2785-X","10.1109/ICCBSS.2007.44","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4127304","","Uncertainty;Programming;Probability distribution;Databases;Costs;Software reliability;Testing;Fault tolerance;Software design;Job production systems","","","","36","IEEE","12 Mar 2007","","","IEEE","IEEE Conferences"
